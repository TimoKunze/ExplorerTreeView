//////////////////////////////////////////////////////////////////////
/// \mainpage ExplorerTreeView Documentation
///
/// \section intro_sec Introduction
///
/// %ExplorerTreeView is an ActiveX control that may be used as a common treeview as well as for
/// shell-browsing. It is optimized for Visual Basic 6.0, but should also work in any other environment
/// that supports COM controls.
///
/// \section basics_sec Basics
///
/// The control superclasses the native treeview window class of Windows: \c SysTreeView32. Although I
/// tried to wrap all features of this window class (status: Windows 10), some things may be missing.
/// In these cases you usually may use the Win32 API and handle the control as a native treeview window.
/// One of my goals was it to create a treeview control that may be controlled via API as well as via the
/// classes that I implemented.\n
/// The control's label-edit control is a native edit window of Windows and it may be controlled via
/// API, too.
///
/// \subsection basics_conv_sec Conventions
///
/// An "item button" is the "+"/"-" button that can be displayed next to an item to indicate that
/// this item has sub-items. It is also referred to as "expando" to match Microsoft Windows SDK.
///
/// \section reqs_sec Requirements
///
/// %ExplorerTreeView Unicode runs on the following operating systems:
/// - Windows XP (SP3 or later)
/// - Windows Server 2003 (SP2 or later)
/// - Windows Vista (SP2 or later)
/// - Windows Server 2008 (SP2 or later)
/// - Windows 7 (SP1 or later)
/// - Windows Server 2008 R2 (SP1 or later)
/// - Windows 8
/// - Windows Server 2012
/// - Windows 8.1
/// - Windows Server 2012 R2
/// - Windows 10
/// - Windows Server 2016
/// - Systems supported by Wine (Wine is a Win32 subsystem for alternative operating systems) - <strong>limited support</strong>
/// - ReactOS (a free Windows XP clone) - <strong>limited support</strong>
///
/// Some features have additional requirements which are mentioned in the affected feature's
/// documentation.\n
/// Limited support means, that I won't invest much work to support those systems. If a feature works on
/// a system tagged with "limited support" - fine; if it does not and it's easy to fix, I'll fix it, but if
/// it's difficult to fix, I probably won't fix it. Also I will test the control much less on those systems.
///
/// \section support_sec Support
///
/// There's no entitlement to support. Period. However, you have good chances to get help if you post your
/// questions on <a href="https://github.com/TimoKunze/ExplorerTreeView">GitHub</a> or in the
/// <a href="https://www.timosoft-software.de/forum/viewforum.php?f=38">forums</a>.\n
/// Also the project is open source, so feel free to have a look at the source code. You may modify it, but
/// please consider sharing your changes with the rest of the world.
///
/// \section lic_sec License
///
/// <pre>
///      MIT License
///
///      Copyright (c) 2002-2019 Timo Kunze
///
///      Permission is hereby granted, free of charge, to any person obtaining a copy
///      of this software and associated documentation files (the "Software"), to deal
///      in the Software without restriction, including without limitation the rights
///      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
///      copies of the Software, and to permit persons to whom the Software is
///      furnished to do so, subject to the following conditions:
///
///      The above copyright notice and this permission notice shall be included in all
///      copies or substantial portions of the Software.
///
///      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
///      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
///      SOFTWARE.
/// </pre>
///
/// \section acks_sec Acknowledgements
///
/// Thanks go to:
/// - <a href="https://www.winehq.com">Wine Headquarters</a>, because Wine helped me a lot on
///   understanding how Windows is working.
/// - Microsoft, for ATL, WTL and Visual Studio - great libraries and a great IDE
/// - Igor Tandetnik, for his great help on learning ATL and WTL
/// - Dimitri van Heesch, for Doxygen
/// - <a href="http://www.zabkat.com/">Nikos Bozinis</a>, for his awesome help with the Vista drag'n'drop
///   stuff.
/// - <a href="https://www.dateicommander.de">Christian LÃ¼tgens</a>, for his great work as beta-tester
///   and for his help when I needed a 2nd opinion on some decisions.
/// - All donators
/// - For great music: Heaven Shall Burn, Arch Enemy, Machine Head, Trivium, Deadlock, Draconian, Soulfly,
///   Delain, Lacuna Coil, Ensiferum, Epica, Sirenia, Tristania, Nightwish, Battlelore, Amon Amarth, Volbeat,
///   Guns N' Roses
///
/// \section faq_sec FAQ
///
/// <strong>1. Why is the \c Font property ignored?</strong>\n
/// It isn't. My controls have a property \c UseSystemFont which defaults to \c True. This property tells
/// the control to use the system font rather than the font set by the \c Font property.\n
/// Why is this property's default \c True? Well, if I set system wide settings (like fonts) I expect all
/// applications to follow them. Unfortunately ignoring system wide settings seems to be trendy, so see
/// my decision as an educational measure.
///
/// <strong>2. Why is event xyz not fired?</strong>\n
/// Firing an event is relative time-consuming, even if the event isn't handled by the application at all.
/// Therefore I implemented a \c DisabledEvents property which can be used to deactivate certain events.\n
/// By default many events are deactivated.
///
/// <strong>3. The control doesn't seem to have full Unicode support if it is used in Visual Basic 6. Why?</strong>\n
/// The forms, that Visual Basic 6 is creating, are ANSI windows. Therefore they force the control's
/// underlying native treeview window class to use ANSI messages when communicating with the form. This
/// breaks Unicode support in some situations. To work around this problem, the \c WM_NOTIFYFORMAT message
/// must be reflected back to the control.\n
/// In Visual Basic, you must subclass the control's container window and send \c WM_NOTIFYFORMAT back to
/// the window that it was sent for. In C++, message reflection works similar. The sample projects teach
/// you how to reflect the message.
///
/// <strong>4. Why can't I compare \c %TreeViewItem objects using VB's \c Is operator?</strong>\n
/// The \c Is operator compares the objects by there memory address. To keep memory usage low and to
/// ease internal item management, %ExplorerTreeView creates objects, that wrap items or item
/// collections, on the fly. Therefore you'll get different objects (with different addresses) for the
/// same item. Because of the different addresses the \c Is operator handles the items as different
/// ones.\n
/// To compare items, you should use the items' handles or IDs.
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// \namespace ExTVwLibU
/// \brief <em>Contains COM definitions for the control's public interface</em>
///
/// This is the Unicode version of the ExplorerTreeView COM library.
//////////////////////////////////////////////////////////////////////


#include "olectl.h"
#include "CompilerFlags.h"
#include "DispIDs.h"

#ifndef DOXYGEN_SHOULD_SKIP_THIS
	// interface is not automation marshaling conformant, requires Windows NT 4.0 SP4 or greater
	midl_pragma warning(disable: 2039)
	// identifier length exceeds 31 characters
	midl_pragma warning(disable: 2111)
	// too many methods in the interface, requires Windows NT 4.0 SP3 or greater
	midl_pragma warning(disable: 2362)
#endif

import "oaidl.idl";
import "ocidl.idl";


[
	uuid(1F8F0FE7-2CFB-4466-A2BC-ABB441ADEDD5),
	version(2.6),
	helpstring("TimoSoft ExplorerTreeView 2.6 (Unicode)")
]
library ExTVwLibU
{
	importlib("stdole2.tlb");

	interface ITreeViewItem;
	interface ITreeViewItems;


	/// \brief <em>Constants used with the \c Appearance property</em>
	///
	/// \sa IExplorerTreeView::Appearance
	[helpstring("Constants used with the 'Appearance' property.")]
	typedef enum AppearanceConstants {
		/// \brief The control is drawn with a flat border
		[helpstring("The control is drawn flat.")]
		a2D,
		/// \brief The control is drawn with a normal 3D border
		[helpstring("The control is drawn with a normal 3D border.")]
		a3D,
		/// \brief The control is drawn with a light 3D border
		[helpstring("The control is drawn with a light 3D border.")]
		a3DLight
	} AppearanceConstants;

	/// \brief <em>Constants used with the \c BorderStyle property</em>
	///
	/// \sa IExplorerTreeView::BorderStyle
	[helpstring("Constants used with the 'BorderStyle' property.")]
	typedef enum BorderStyleConstants {
		/// \brief The control is drawn without an inner border
		[helpstring("The control is drawn without an additional border.")]
		bsNone,
		/// \brief The control is drawn with an inner border
		[helpstring("The control is drawn with an additional border.")]
		bsFixedSingle
	} BorderStyleConstants;

	/// \brief <em>Flags used with the \c BuiltInStateImages property</em>
	///
	/// \sa IExplorerTreeView::BuiltInStateImages
	[helpstring("Flags used with the 'BuiltInStateImages' property. They can be combined.")]
	typedef enum BuiltInStateImagesConstants {
		/// \brief The built-in state imagelist contains one image for the state "selected" and one for "unselected"
		///
		/// \remarks These two state images are always part of the built-in state imagelist.
		[helpstring("The built-in state imagelist contains one image for the state 'selected' and one for 'unselected'. These two state images are always part of the built-in state imagelist.")]
		bisiSelectedAndUnselected = 0x00,
		/// \brief The built-in state imagelist contains an image for the state "indeterminate"
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The built-in state imagelist contains an image for the state 'indeterminate'. Requires comctl32.dll version 6.10 or higher.")]
		bisiIndeterminate = 0x01,
		/// \brief The built-in state imagelist contains an additional image for the state "selected", that appears dimmed
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The built-in state imagelist contains an additional image for the state 'selected', that appears dimmed. Requires comctl32.dll version 6.10 or higher.")]
		bisiSelectedDimmed = 0x02,
		/// \brief The built-in state imagelist contains an image for the state "excluded"
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The built-in state imagelist contains an image for the state 'excluded'. Requires comctl32.dll version 6.10 or higher.")]
		bisiExcluded = 0x04
	} BuiltInStateImagesConstants;

	/// \brief <em>Constants used with the \c CaretChanging  and \c CaretChanged events</em>
	///
	/// \sa _IExplorerTreeViewEvents::CaretChanging, _IExplorerTreeViewEvents::CaretChanged
	[helpstring("Constants used with the 'CaretChanging' and 'CaretChanged' events.")]
	typedef enum CaretChangeCausedByConstants {
		/// \brief The caret change was caused by an unknown event
		[helpstring("The caret change was caused by an unknown event.")]
		cccbUnknown,
		/// \brief The caret change was caused by mouse input
		[helpstring("The caret change was caused by a mouse input.")]
		cccbMouse,
		/// \brief The caret change was caused by keyboard input
		[helpstring("The caret change was caused by keyboard input.")]
		cccbKeyboard,
		/// \brief The caret change was caused by the control itself
		[helpstring("The caret change was caused by the control itself.")]
		cccbInternal
	} CaretChangeCausedByConstants;

	/// \brief <em>Constants used with the \c CompareItems event</em>
	///
	/// \sa _IExplorerTreeViewEvents::CompareItems
	[helpstring("Constants used with the 'CompareItems' event.")]
	typedef enum CompareResultConstants {
		/// \brief The first item should precede the second
		[helpstring("The first item should precede the second.")]
		crFirstSecond = -1,
		/// \brief The two items are equivalent
		[helpstring("The two items are equivalent.")]
		crEqual = 0,
		/// \brief The first item should follow the second
		[helpstring("The first item should follow the second.")]
		crSecondFirst = 1
	} CompareResultConstants;

	/// \brief <em>Flags used to identify item states during custom draw</em>
	///
	/// \sa CustomDrawStageConstants, CustomDrawReturnValuesConstants,
	///     _IExplorerTreeViewEvents::CustomDraw
	[helpstring("Flags used to identify item states during custom draw.")]
	typedef enum CustomDrawItemStateConstants {
		/// \brief The item is selected
		///
		/// \usedin The "Disabled Items" sample
		[helpstring("The item is selected.")]
		cdisSelected = 0x1 /*CDIS_SELECTED*/,
		/// \brief The item is grayed
		///
		/// \remarks Current versions of Windows probably do not use this flag for treeview controls.
		[helpstring("The item is grayed. Current versions of Windows probably do not use this flag for treeview controls.")]
		cdisGrayed = 0x2 /*CDIS_GRAYED*/,
		/// \brief The item is disabled
		///
		/// \remarks Current versions of Windows probably do not use this flag for treeview controls.
		[helpstring("The item is disabled. Current versions of Windows probably do not use this flag for treeview controls.")]
		cdisDisabled = 0x4 /*CDIS_DISABLED*/,
		/// \brief The item is checked
		///
		/// \remarks Current versions of Windows probably do not use this flag for treeview controls.
		[helpstring("The item is checked. Current versions of Windows probably do not use this flag for treeview controls.")]
		cdisChecked = 0x8 /*CDIS_CHECKED*/,
		/// \brief The item has the keyboard focus
		///
		/// \usedin The "Fonts and Colors" sample
		[helpstring("The item has the keyboard focus.")]
		cdisFocus = 0x10 /*CDIS_FOCUS*/,
		/// \brief The item is in its default state
		[helpstring("The item is in its default state.")]
		cdisDefault = 0x20 /*CDIS_DEFAULT*/,
		/// \brief The item is currently under the mouse cursor
		///
		/// \sa IExplorerTreeView::HotTracking
		[helpstring("The item is hot, i. e. it's currently under the mouse cursor.")]
		cdisHot = 0x40 /*CDIS_HOT*/,
		/// \brief The item is marked
		///
		/// \remarks Current versions of Windows probably do not use this flag for treeview controls.
		[helpstring("The item is marked. Current versions of Windows probably do not use this flag for treeview controls.")]
		cdisMarked = 0x80 /*CDIS_MARKED*/,
		/// \brief The item is in an indeterminate state
		///
		/// \remarks Current versions of Windows probably do not use this flag for treeview controls.
		[helpstring("The item is in an indeterminate state. Current versions of Windows probably do not use this flag for treeview controls.")]
		cdisIndeterminate = 0x100 /*CDIS_INDETERMINATE*/,
		/// \brief The item is a keyboard cue
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          Current versions of Windows probably do not use this flag for treeview controls.
		[helpstring("The item is a keyboard cue. Requires comctl32.dll version 6.0 or higher. Current versions of Windows probably do not use this flag for treeview controls.")]
		cdisShowKeyboardCues = 0x200 /*CDIS_SHOWKEYBOARDCUES*/,
		/// \brief The item is part of a control that is currently under the mouse pointer ("hot"), but the item is not "hot" itself
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          Current versions of Windows probably do not use this flag for treeview controls.
		[helpstring("The item is part of a control that is currently under the mouse pointer (\"hot\"), but the item is not \"hot\" itself. Requires comctl32.dll version 6.10 or higher. Current versions of Windows probably do not use this flag for treeview controls.")]
		cdisNearHot = 0x400 /*CDIS_NEARHOT*/,
		/// \brief The item is part of a split button that is currently under the mouse pointer ("hot"), but the item is not "hot" itself
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          Current versions of Windows probably do not use this flag for treeview controls.
		[helpstring("The item is part of a split button that is currently under the mouse pointer (\"hot\"), but the item is not \"hot\" itself. Requires comctl32.dll version 6.10 or higher. Current versions of Windows probably do not use this flag for treeview controls.")]
		cdisOtherSideHot = 0x800 /*CDIS_OTHERSIDEHOT*/,
		/// \brief The item is highlighted as a drop target
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          Current versions of Windows probably do not use this flag for treeview controls.
		[helpstring("The item is highlighted as a drop target. Requires comctl32.dll version 6.10 or higher. Current versions of Windows probably do not use this flag for treeview controls.")]
		cdisDropHilited = 0x1000 /*CDIS_DROPHILITED*/
	} CustomDrawItemStateConstants;

	/// \brief <em>Flags used to control further custom draw processing</em>
	///
	/// \sa CustomDrawItemStateConstants, CustomDrawStageConstants, _IExplorerTreeViewEvents::CustomDraw
	[helpstring("Flags used to control further custom draw processing. They can be combined.")]
	typedef enum CustomDrawReturnValuesConstants {
		/// \brief Don't use custom draw
		///
		/// Advises the control to draw itself and to not raise any further custom draw events during the
		/// current paint cycle.
		///
		/// \usedin All custom draw samples
		[helpstring("Default processing will take place.")]
		cdrvDoDefault = 0x0 /*CDRF_DODEFAULT*/,
		/// \brief Use different font and colors
		///
		/// Advises the control to draw the item using the specified font and colors.
		///
		/// \usedin The "Fonts and Colors" sample
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsItemPrePaint.
		[helpstring("Default processing will take place using the specified font and colors.")]
		cdrvNewFont = 0x2 /*CDRF_NEWFONT*/,
		/// \brief Don't draw the item
		///
		/// Advises the control to not draw the item. Use this to draw the item entirely yourself.
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsItemPrePaint.
		[helpstring("The control won't draw the item.")]
		cdrvSkipDefault = 0x4 /*CDRF_SKIPDEFAULT*/,
		/// \brief Draw the background only
		///
		/// Advises the control to draw the background only.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This flag is valid if the custom draw stage equals \c cdsPrePaint.
		[helpstring("The control will draw the background only. Requires comctl32.dll version 6.10 or higher.")]
		cdrvDoErase = 0x8 /*CDRF_DOERASE*/,
		/// \brief Fire the custom draw event after drawing took place
		///
		/// Advises the control to fire the custom draw event after drawing took place.
		///
		/// \usedin The "Fonts and Colors" sample
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsPrePaint.
		[helpstring("Fire the custom draw event after drawing took place.")]
		cdrvNotifyPostPaint = 0x10 /*CDRF_NOTIFYPOSTPAINT*/,
		/// \brief Fire the custom draw event for item related drawing operations
		///
		/// \usedin All custom draw samples
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsPrePaint.
		[helpstring("Fire the custom draw event for item related drawing operations.")]
		cdrvNotifyItemDraw = 0x20 /*CDRF_NOTIFYITEMDRAW*/,
		/// \brief Fire the custom draw event for sub-item related drawing operations
		///
		/// \remarks This flag is not valid for a treeview control. It's used with listview controls and
		///          simply defined for completeness.
		[helpstring("Fire the custom draw event for sub-item related drawing operations. Not used.")]
		cdrvNotifySubItemDraw = 0x20 /*CDRF_NOTIFYSUBITEMDRAW*/,
		/// \brief Fire the custom draw event after erasing took place
		///
		/// Advises the control to fire the custom draw event after erasing took place.
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsPrePaint.
		[helpstring("Fire the custom draw event after erasing took place.")]
		cdrvNotifyPostErase = 0x40 /*CDRF_NOTIFYPOSTERASE*/,
		/// \brief Fire the custom draw event for item related erasing operations
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsPrePaint.
		[helpstring("Fire the custom draw event for item related erasing operations.")]
		cdrvNotifyItemErase = 0x80 /*CDRF_NOTIFYITEMERASE*/,
		/// \brief Don't draw the focus rectangle
		///
		/// Advises the control to not draw the focus rectangle.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This flag is valid if the custom draw stage equals \c cdsPrePaint.
		[helpstring("The control won't draw the focus rectangle. Requires comctl32.dll version 6.10 or higher.")]
		cdrvSkipPostPaint = 0x100 /*CDRF_SKIPPOSTPAINT*/,
		/// \brief Don't draw icons or state images
		///
		/// Advises the control to not draw any images for the specified treeview item. The space simply will
		/// be left blank.
		///
		/// \remarks This flag is valid if the custom draw stage equals \c cdsItemPrePaint.
		[helpstring("Don't draw icons or state images.")]
		cdrvNoImages = 0x10000 /*TVCDRF_NOIMAGES*/
	} CustomDrawReturnValuesConstants;

	/// \brief <em>Constants used to identify custom draw stages</em>
	///
	/// \sa CustomDrawItemStateConstants, CustomDrawReturnValuesConstants,
	///     _IExplorerTreeViewEvents::CustomDraw
	[helpstring("Constants used to identify custom draw stages.")]
	typedef enum CustomDrawStageConstants {
		/// \brief Before the painting cycle begins
		///
		/// \usedin All custom draw samples
		[helpstring("Before the painting cycle begins.")]
		cdsPrePaint = 0x1 /*CDDS_PREPAINT*/,
		/// \brief After the painting cycle is complete
		[helpstring("After the painting cycle is complete.")]
		cdsPostPaint = 0x2 /*CDDS_POSTPAINT*/,
		/// \brief Before the erasing cycle begins
		[helpstring("Before the erasing cycle begins.")]
		cdsPreErase = 0x3 /*CDDS_PREERASE*/,
		/// \brief After the erasing cycle is complete
		[helpstring("After the erasing cycle is complete.")]
		cdsPostErase = 0x4 /*CDDS_POSTERASE*/,
		/// \brief The event affects a single item only and not the whole control
		[helpstring("The event affects a single item only and not the whole control.")]
		cdsItem = 0x10000 /*CDDS_ITEM*/,
		/// \brief Before an item is drawn
		///
		/// \usedin The "Fonts and Colors" sample
		[helpstring("Before an item is drawn.")]
		cdsItemPrePaint = cdsItem | cdsPrePaint /*CDDS_ITEMPREPAINT*/,
		/// \brief After an item has been drawn
		///
		/// \usedin The "Fonts and Colors" sample
		[helpstring("After an item has been drawn.")]
		cdsItemPostPaint = cdsItem | cdsPostPaint /*CDDS_ITEMPOSTPAINT*/,
		/// \brief Before an item is erased
		[helpstring("Before an item is erased.")]
		cdsItemPreErase = cdsItem | cdsPreErase /*CDDS_ITEMPREERASE*/,
		/// \brief After an item has been erased
		[helpstring("After an item has been erased.")]
		cdsItemPostErase = cdsItem | cdsPostErase /*CDDS_ITEMPOSTERASE*/,
		/// \brief The event affects a single sub-item only and not the whole item
		///
		/// \remarks This flag is not valid for a treeview control. It's used with listview controls and
		///          simply defined for completeness.
		[helpstring("The event affects a single sub-item only and not the whole item. Not used.")]
		cdsSubItem = 0x20000 /*CDDS_SUBITEM*/,
		/// \brief Before a sub-item is drawn
		///
		/// \remarks This flag is not valid for a treeview control. It's used with listview controls and
		///          simply defined for completeness.
		[helpstring("Before a sub-item is drawn. Not used.")]
		cdsSubItemPrePaint = cdsSubItem | cdsItemPrePaint /*CDDS_SUBITEM | CDDS_ITEMPREPAINT*/,
		/// \brief After a sub-item has been drawn
		///
		/// \remarks This flag is not valid for a treeview control. It's used with listview controls and
		///          simply defined for completeness.
		[helpstring("After a sub-item has been drawn. Not used.")]
		cdsSubItemPostPaint = cdsSubItem | cdsItemPostPaint /*CDDS_SUBITEM | CDDS_ITEMPOSTPAINT*/
	} CustomDrawStageConstants;

	/// \brief <em>Flags used with the \c DisabledEvents property</em>
	///
	/// \sa IExplorerTreeView::DisabledEvents
	[helpstring("Flags used with the 'DisabledEvents' property. They can be combined.")]
	typedef enum DisabledEventsConstants {
		/// \brief Mouse events concerning the control itself (not the label-edit control) won't be fired
		///
		/// The following events won't be fired: \c MouseDown, \c MouseUp, \c MClick, \c XClick, \c MouseEnter,
		/// \c MouseHover, \c MouseLeave, \c ItemMouseEnter, \c ItemMouseLeave, \c MouseMove, \c MouseWheel
		///
		/// \attention Because the MouseDown and MouseUp events are required to provide the MClick event,
		///            it won't be fired anymore, too.
		///
		/// \sa _IExplorerTreeViewEvents::MouseDown, _IExplorerTreeViewEvents::MouseUp,
		///     _IExplorerTreeViewEvents::MClick, _IExplorerTreeViewEvents::XClick,
		///     _IExplorerTreeViewEvents::MouseEnter, _IExplorerTreeViewEvents::MouseHover,
		///     _IExplorerTreeViewEvents::MouseLeave, _IExplorerTreeViewEvents::ItemMouseEnter,
		///     _IExplorerTreeViewEvents::ItemMouseLeave, _IExplorerTreeViewEvents::MouseMove,
		///     _IExplorerTreeViewEvents::MouseWheel
		[helpstring("Disables the following events: MouseDown, MouseUp, MClick, XClick, MouseEnter, MouseHover, MouseLeave, ItemMouseEnter, ItemMouseLeave, MouseMove, MouseWheel")]
		deTreeMouseEvents = 0x01,
		/// \brief Click events concerning the control itself (not the label-edit control) won't be fired
		///
		/// The following events won't be fired: \c Click, \c DblClick, \c MClick, \c MDblClick,
		/// \c RClick, \c RDblClick, \c XClick, \c XDblClick
		///
		/// \sa _IExplorerTreeViewEvents::Click, _IExplorerTreeViewEvents::DblClick,
		///     _IExplorerTreeViewEvents::MClick, _IExplorerTreeViewEvents::MDblClick,
		///     _IExplorerTreeViewEvents::RClick, _IExplorerTreeViewEvents::RDblClick,
		///     _IExplorerTreeViewEvents::XClick, _IExplorerTreeViewEvents::XDblClick
		[helpstring("Disables the following events: Click, DblClick, MClick, MDblClick, RClick, RDblClick, XClick, XDblClick")]
		deTreeClickEvents = 0x02,
		/// \brief Mouse events concerning the label-edit control won't be fired
		///
		/// The following events won't be fired: \c EditMouseDown, \c EditMouseUp, \c EditMouseEnter,
		/// \c EditMouseHover, \c EditMouseLeave, \c EditMouseMove, \c EditMouseWheel, \c EditClick,
		/// \c EditDblClick, \c EditMClick, \c EditMDblClick, \c EditRClick, \c EditRDblClick, \c EditXClick,
		/// \c EditXDblClick
		///
		/// \sa _IExplorerTreeViewEvents::EditMouseDown, _IExplorerTreeViewEvents::EditMouseUp,
		///     _IExplorerTreeViewEvents::EditMouseEnter, _IExplorerTreeViewEvents::EditMouseHover,
		///     _IExplorerTreeViewEvents::EditMouseLeave, _IExplorerTreeViewEvents::EditMouseMove,
		///     _IExplorerTreeViewEvents::EditMouseWheel,
		///     _IExplorerTreeViewEvents::EditClick, _IExplorerTreeViewEvents::EditDblClick,
		///     _IExplorerTreeViewEvents::EditMClick, _IExplorerTreeViewEvents::EditMDblClick,
		///     _IExplorerTreeViewEvents::EditRClick, _IExplorerTreeViewEvents::EditRDblClick,
		///     _IExplorerTreeViewEvents::EditXClick, _IExplorerTreeViewEvents::EditXDblClick
		[helpstring("Disables the following events: EditMouseDown, EditMouseUp, EditMouseEnter, EditMouseHover, EditMouseLeave, EditMouseMove, EditMouseWheel, EditClick, EditDblClick, EditMClick, EditMDblClick, EditRClick, EditRDblClick, EditXClick, EditXDblClick")]
		deEditMouseEvents = 0x04,
		/// \brief Keyboard events concerning the control itself (not the label-edit control) won't be fired
		///
		/// The following events won't be fired: \c KeyDown, \c KeyUp, \c KeyPress,
		/// \c IncrementalSearchStringChanging
		///
		/// \sa _IExplorerTreeViewEvents::KeyDown, _IExplorerTreeViewEvents::KeyUp,
		///     _IExplorerTreeViewEvents::KeyPress,
		///     _IExplorerTreeViewEvents::IncrementalSearchStringChanging
		[helpstring("Disables the following events: KeyDown, KeyUp, KeyPress, IncrementalSearchStringChanging")]
		deTreeKeyboardEvents = 0x08,
		/// \brief Keyboard events concerning the label-edit control won't be fired
		///
		/// The following events won't be fired: \c EditKeyDown, \c EditKeyUp, \c EditKeyPress
		///
		/// \sa _IExplorerTreeViewEvents::EditKeyDown, _IExplorerTreeViewEvents::EditKeyUp,
		///     _IExplorerTreeViewEvents::EditKeyPress
		[helpstring("Disables the following events: EditKeyDown, EditKeyUp, EditKeyPress")]
		deEditKeyboardEvents = 0x10,
		/// \brief Events concerning item-insertions won't be fired
		///
		/// The following events won't be fired: \c InsertingItem, \c InsertedItem
		///
		/// \sa _IExplorerTreeViewEvents::InsertingItem, _IExplorerTreeViewEvents::InsertedItem
		[helpstring("Disables the following events: InsertingItem, InsertedItem")]
		deItemInsertionEvents = 0x20,
		/// \brief Events concerning item-deletions won't be fired
		///
		/// The following events won't be fired: \c RemovingItem, \c RemovedItem
		///
		/// \sa _IExplorerTreeViewEvents::RemovingItem, _IExplorerTreeViewEvents::RemovedItem
		[helpstring("Disables the following events: RemovingItem, RemovedItem")]
		deItemDeletionEvents = 0x40,
		/// \brief The \c FreeItemData event won't be fired
		///
		/// The following event won't be fired: \c FreeItemData
		///
		/// \sa _IExplorerTreeViewEvents::FreeItemData
		[helpstring("Disables the following event: FreeItemData")]
		deFreeItemData = 0x80,
		/// \brief The \c CustomDraw event won't be fired
		///
		/// The following event won't be fired: \c CustomDraw
		///
		/// \sa _IExplorerTreeViewEvents::CustomDraw
		[helpstring("Disables the following event: CustomDraw")]
		deCustomDraw = 0x100,
		/// \brief The \c ItemGetInfoTipText event won't be fired
		///
		/// The following event won't be fired: \c ItemGetInfoTipText
		///
		/// \sa _IExplorerTreeViewEvents::ItemGetInfoTipText, ITreeViewItem::DisplayInfoTip
		[helpstring("Disables the following event: ItemGetInfoTipText")]
		deItemGetInfoTipText = 0x200,
		/// \brief Events concerning item selection changes won't be fired
		///
		/// The following events won't be fired: \c ItemSelectionChanging, \c ItemSelectionChanged
		///
		/// \sa _IExplorerTreeViewEvents::ItemSelectionChanging,
		///     _IExplorerTreeViewEvents::ItemSelectionChanged
		[helpstring("Disables the following events: ItemSelectionChanging, ItemSelectionChanged")]
		deItemSelectionChangingEvents = 0x40000,
		/// \brief The \c ItemGetDisplayInfo event won't be fired
		///
		/// The following event won't be fired: \c ItemGetDisplayInfo. This is useful if the control is used in
		/// combination with the \c ShellTreeView control, because \c ShellTreeView will make this event being
		/// raised very often, decreasing performance of \c ExplorerTreeView.
		///
		/// \sa _IExplorerTreeViewEvents::ItemGetDisplayInfo
		[helpstring("Disables the following event: ItemGetDisplayInfo")]
		deItemGetDisplayInfo = 0x800000
	} DisabledEventsConstants;

	/// \brief <em>Constants used with the \c IOLEDataObject::GetDropDescription and IOLEDataObject::SetDropDescription methods</em>
	///
	/// \sa IOLEDataObject::GetDropDescription, IOLEDataObject::SetDropDescription
	[helpstring("Constants used with the 'OLEDataObject.GetDropDescription' and 'OLEDataObject.SetDropDescription' methods.")]
	typedef enum DropDescriptionIconConstants {
		/// \brief No drop description is displayed
		[helpstring("No drop description is displayed.")]
		ddiNone = -1/*DROPIMAGE_INVALID*/,     // should be 8 (DROPIMAGE_NOIMAGE)
		/// \brief The drop description icon that visualizes the \c odeNone drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeNone' drop effect is displayed.")]
		ddiNoDrop = 0/*DROPIMAGE_NONE*/,
		/// \brief The drop description icon that visualizes the \c odeCopy drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeCopy' drop effect is displayed.")]
		ddiCopy = 1/*DROPIMAGE_COPY*/,
		/// \brief The drop description icon that visualizes the \c odeMove drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeMove' drop effect is displayed.")]
		ddiMove = 2/*DROPIMAGE_MOVE*/,
		/// \brief The drop description icon that visualizes the \c odeLink drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeLink' drop effect is displayed.")]
		ddiLink = 4/*DROPIMAGE_LINK*/,
		/// \brief The drop description icon that visualizes a drop, which causes a metadata change, is displayed
		[helpstring("The drop description icon that visualizes a drop, which causes a metadata change, is displayed.")]
		ddiMetadataChange = 6/*DROPIMAGE_LABEL*/,
		/// \brief The drop description icon that visualizes a warning is displayed
		[helpstring("The drop description icon that visualizes a warning is displayed.")]
		ddiWarning = 7/*DROPIMAGE_WARNING*/,
		/// \brief The default drop description is displayed
		///
		/// \remarks Requires Windows 7 or newer.
		[helpstring("The default drop description is displayed. Requires Windows 7 or newer.")]
		ddiUseDefault = 8/*DROPIMAGE_NOIMAGE*/     // should be -1 (DROPIMAGE_INVALID)
	} DropDescriptionIconConstants;

	/// \brief <em>Constants used with the extended mouse button events</em>
	///
	/// \sa _IExplorerTreeViewEvents::MouseDown, _IExplorerTreeViewEvents::MouseEnter,
	///     _IExplorerTreeViewEvents::MouseHover, _IExplorerTreeViewEvents::MouseLeave,
	///     _IExplorerTreeViewEvents::MouseMove, _IExplorerTreeViewEvents::MouseUp,
	///     _IExplorerTreeViewEvents::ItemMouseEnter, _IExplorerTreeViewEvents::ItemMouseLeave,
	///     _IExplorerTreeViewEvents::XClick, _IExplorerTreeViewEvents::XDblClick,
	///     _IExplorerTreeViewEvents::EditMouseDown, _IExplorerTreeViewEvents::EditMouseEnter,
	///     _IExplorerTreeViewEvents::EditMouseHover, _IExplorerTreeViewEvents::EditMouseLeave,
	///     _IExplorerTreeViewEvents::EditMouseMove, _IExplorerTreeViewEvents::EditMouseUp,
	///     _IExplorerTreeViewEvents::EditXClick, _IExplorerTreeViewEvents::EditXDblClick
	[helpstring("Constants used with the extended mouse button events.")]
	typedef enum ExtendedMouseButtonConstants {
		/// \brief Identifies the first extended mouse button
		[helpstring("Identifies the first extended mouse button.")]
		embXButton1 = 0x20,
		/// \brief Identifies the second extended mouse button
		[helpstring("Identifies the second extended mouse button.")]
		embXButton2 = 0x40
	} ExtendedMouseButtonConstants;

	/// \brief <em>Flags used with the \c ITreeViewItem::ExpansionState property</em>
	///
	/// \sa ITreeViewItem::ExpansionState, IVirtualTreeViewItem::ExpansionState
	[helpstring("Flags used with the 'TreeViewItem.ExpansionState' property. They can be combined.")]
	typedef enum ExpansionStateConstants {
		/// \brief The item is not and never was entirely or partially expanded
		[helpstring("The item is not and never was entirely or partially expanded.")]
		esNeverWasExpanded = 0x0,
		/// \brief The item is expanded
		[helpstring("The item is expanded.")]
		esIsExpanded = 0x20 /*TVIS_EXPANDED*/,
		/// \brief The item has been expanded at least one time
		[helpstring("The item has been expanded at least one time.")]
		esWasExpandedOnce = 0x40 /*TVIS_EXPANDEDONCE*/,
		/// \brief The item is partially expanded
		///
		/// The item is expanded, but the item button is a "+" instead of a "-".
		[helpstring("The item is partially expanded, i. e. it's expanded, but the item button is a \"+\" instead of a \"-\".")]
		esIsPartiallyExpanded = 0x80 /*TVIS_EXPANDPARTIAL*/
	} ExpansionStateConstants;

	/// \brief <em>Constants used with the \c ItemAsynchronousDrawFailed event</em>
	///
	/// \sa _IExplorerTreeViewEvents::ItemAsynchronousDrawFailed
	[helpstring("Constants used with the 'ItemAsynchronousDrawFailed' event.")]
	typedef enum FailedAsyncDrawReturnValuesConstants {
		/// \brief Draw the same image with the same settings synchronously
		[helpstring("Draw the same image with the same settings synchronously.")]
		fadrvDrawImageSynchronously = 0x00000000/*ADRF_DRAWSYNC*/,
		/// \brief Don't draw an image
		[helpstring("Don't draw an image.")]
		fadrvDrawNoImage = 0x00000001/*ADRF_DRAWNOTHING*/,
		/// \brief Draw again asynchronously using the image specified by the \c newImageToDraw parameter of the \c _IExplorerTreeViewEvents::ItemAsynchronousDrawFailed event
		[helpstring("Draw again asynchronously using the image specified by the 'newImageToDraw' parameter of the 'ItemAsynchronousDrawFailed' event.")]
		fadrvDrawNewImageAsynchronously = 0x00000002/*ADRF_DRAWIMAGE*/
	} FailedAsyncDrawReturnValuesConstants;

	/// \brief <em>Flags used with the \c ITreeViewItems::Filter property</em>
	///
	/// \sa ITreeViewItems::Filter
	[helpstring("Flags used with the 'TreeViewItems.Filter' property.")]
	typedef enum FilteredPropertyConstants {
		/// \brief Retrieve or set the filter that filters by the \c Bold property
		///
		/// \sa ITreeViewItem::Bold
		[helpstring("Retrieve or set the filter that filters by the 'Bold' property.")]
		fpBold = 0,
		/// \brief Retrieve or set the filter that filters by the \c ExpandedIconIndex property
		///
		/// \sa ITreeViewItem::ExpandedIconIndex
		[helpstring("Retrieve or set the filter that filters by the 'ExpandedIconIndex' property.")]
		fpExpandedIconIndex = 15,
		/// \brief Retrieve or set the filter that filters by the \c ExpansionState property
		///
		/// \sa ITreeViewItem::ExpansionState
		[helpstring("Retrieve or set the filter that filters by the 'ExpansionState' property.")]
		fpExpansionState = 2,
		/// \brief Retrieve or set the filter that filters by the \c Ghosted property
		///
		/// \sa ITreeViewItem::Ghosted
		[helpstring("Retrieve or set the filter that filters by the 'Ghosted' property.")]
		fpGhosted = 1,
		/// \brief Retrieve or set the filter that filters by the \c Grayed property
		///
		/// \sa ITreeViewItem::Grayed
		[helpstring("Retrieve or set the filter that filters by the 'Grayed' property.")]
		fpGrayed = 16,
		/// \brief Retrieve or set the filter that filters by the \c Handle property
		///
		/// \sa ITreeViewItem::Handle
		[helpstring("Retrieve or set the filter that filters by the 'Handle' property.")]
		fpHandle = 3,
		/// \brief Retrieve or set the filter that filters by the \c HasExpando property
		///
		/// \sa ITreeViewItem::HasExpando
		[helpstring("Retrieve or set the filter that filters by the 'HasExpando' property.")]
		fpHasExpando = 5,
		/// \brief Retrieve or set the filter that filters by the \c HeightIncrement property
		///
		/// \sa ITreeViewItem::HeightIncrement
		[helpstring("Retrieve or set the filter that filters by the 'HeightIncrement' property.")]
		fpHeightIncrement = 6,
		/// \brief Retrieve or set the filter that filters by the \c IconIndex property
		///
		/// \sa ITreeViewItem::IconIndex
		[helpstring("Retrieve or set the filter that filters by the 'IconIndex' property.")]
		fpIconIndex = 4,
		/// \brief Retrieve or set the filter that filters by the \c ItemData property
		///
		/// \sa ITreeViewItem::ItemData
		[helpstring("Retrieve or set the filter that filters by the 'ItemData' property.")]
		fpItemData = 7,
		/// \brief Retrieve or set the filter that filters by the \c Level property
		///
		/// \sa ITreeViewItem::Level
		[helpstring("Retrieve or set the filter that filters by the 'Level' property.")]
		fpLevel = 12,
		/// \brief Retrieve or set the filter that filters by the \c OverlayIndex property
		///
		/// \sa ITreeViewItem::OverlayIndex
		[helpstring("Retrieve or set the filter that filters by the 'OverlayIndex' property.")]
		fpOverlayIndex = 8,
		/// \brief Retrieve or set the filter that filters by the \c ParentItem property
		///
		/// \sa ITreeViewItem::ParentItem
		[helpstring("Retrieve or set the filter that filters by the 'ParentItem' property.")]
		fpParentItem = 13,
		/// \brief Retrieve or set the filter that filters by the \c Selected property
		///
		/// \sa ITreeViewItem::Selected
		[helpstring("Retrieve or set the filter that filters by the 'Selected' property.")]
		fpSelected = 9,
		/// \brief Retrieve or set the filter that filters by the \c SelectedIconIndex property
		///
		/// \sa ITreeViewItem::SelectedIconIndex
		[helpstring("Retrieve or set the filter that filters by the 'SelectedIconIndex' property.")]
		fpSelectedIconIndex = 14,
		/// \brief Retrieve or set the filter that filters by the \c StateImageIndex property
		///
		/// \sa ITreeViewItem::StateImageIndex
		[helpstring("Retrieve or set the filter that filters by the 'StateImageIndex' property.")]
		fpStateImageIndex = 10,
		/// \brief Retrieve or set the filter that filters by the \c Text property
		///
		/// \sa ITreeViewItem::Text
		[helpstring("Retrieve or set the filter that filters by the 'Text' property.")]
		fpText = 11,
		/// \brief Retrieve or set the filter that filters by the \c Virtual property
		///
		/// \sa ITreeViewItem::Virtual
		[helpstring("Retrieve or set the filter that filters by the 'Virtual' property.")]
		fpVirtual = 17
	} FilteredPropertyConstants;

	/// \brief <em>Flags used with the \c ITreeViewItems::FilterType property</em>
	///
	/// \sa ITreeViewItems::FilterType
	[helpstring("Flags used with the 'TreeViewItems.FilterType' property.")]
	typedef enum FilterTypeConstants {
		/// \brief The filter is deactivated
		[helpstring("The filter is deactivated.")]
		ftDeactivated,
		/// \brief An item must match this filter to be in the collection
		[helpstring("An item must match this filter to be in the collection.")]
		ftIncluding,
		/// \brief An item must not match this filter to be in the collection
		[helpstring("An item must not match this filter to be in the collection.")]
		ftExcluding
	} FilterTypeConstants;

	/// \brief <em>Constants used with the \c ITreeViewItem::HasExpando property</em>
	///
	/// \sa ITreeViewItem::HasExpando, IVirtualTreeViewItem::HasExpando, IExplorerTreeView::FadeExpandos
	[helpstring("Constants used with the 'TreeViewItem.HasExpando' property.")]
	typedef enum HasExpandoConstants {
		/// \brief The control draws a button next to the item only if the item has children
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		[helpstring("The control draws a button next to the item only if the item has children. Requires comctl32.dll version 6.0 or higher.")]
		heAuto = -2 /*I_CHILDRENAUTO*/,
		/// \brief The \c ItemGetDisplayInfo event is fired
		///
		/// The button to show is retrieved by firing the \c ItemGetDisplayInfo event if needed.
		///
		/// \sa _IExplorerTreeViewEvents::ItemGetDisplayInfo
		[helpstring("The 'ItemGetDisplayInfo' event is fired to retrieve the button style.")]
		heCallback = -1 /*I_CHILDRENCALLBACK*/,
		/// \brief The control doesn't draw a button next to the item
		[helpstring("The control doesn't draw a button next to the item.")]
		heNo = 0,
		/// \brief The control draws a button next to the item
		[helpstring("The control draws a button next to the item.")]
		heYes = 1
	} HasExpandoConstants;

	/// \brief <em>Flags used with the \c HitTest method</em>
	///
	/// \sa IExplorerTreeView::HitTest
	[helpstring("Flags used with the 'HitTest' method.")]
	typedef enum HitTestConstants {
		/// \brief Below the last item
		///
		/// The specified point lies inside the control's client area, but is below the last item.
		[helpstring("The specified point lies inside the control's client area, but is below the last item.")]
		htBelowLastItem = 0x0001 /*TVHT_NOWHERE*/,
		/// \brief On an item's icon
		///
		/// The specified point lies on an item's icon.
		[helpstring("The specified point lies on an item's icon.")]
		htItemIcon = 0x0002 /*TVHT_ONITEMICON*/,
		/// \brief On an item's label
		///
		/// The specified point lies on an item's text label.
		[helpstring("The specified point lies on an item's text label.")]
		htItemLabel = 0x0004 /*TVHT_ONITEMLABEL*/,
		/// \brief On an item
		///
		/// The specified point lies on an item's icon, state image or text label.
		[helpstring("The specified point lies on an item's icon, state image or text label.")]
		htItem = 0x0046 /*TVHT_ONITEM*/,
		/// \brief On an item's indentation
		///
		/// The specified point lies on an item's indentation.
		[helpstring("The specified point lies on an item's indentation.")]
		htItemIndent = 0x0008 /*TVHT_ONITEMINDENT*/,
		/// \brief On an item's expando
		///
		/// The specified point lies on an item's expando.
		[helpstring("The specified point lies on an item's expando.")]
		htItemExpando = 0x0010 /*TVHT_ONITEMBUTTON*/,
		/// \brief Right to the item
		///
		/// The specified point lies in the area to the right of an item.
		[helpstring("The specified point lies in the area to the right of an item.")]
		htItemRight = 0x0020 /*TVHT_ONITEMRIGHT*/,
		/// \brief On an item's state image
		///
		/// The specified point lies on an item's state image.
		[helpstring("The specified point lies on an item's state image.")]
		htItemStateImage = 0x0040 /*TVHT_ONITEMSTATEICON*/,
		/// \brief Above the control's client area
		///
		/// The specified point lies above the control's client area.
		[helpstring("The specified point lies above the control's client area.")]
		htAbove = 0x0100 /*TVHT_ABOVE*/,
		/// \brief Below the control's client area
		///
		/// The specified point lies below the control's client area.
		[helpstring("The specified point lies below the control's client area.")]
		htBelow = 0x0200 /*TVHT_BELOW*/,
		/// \brief To the right of the control's client area
		///
		/// The specified point lies to the right of the control's client area.
		[helpstring("The specified point lies to the right of the control's client area.")]
		htToRight = 0x0400 /*TVHT_TORIGHT*/,
		/// \brief To the left of the control's client area
		///
		/// The specified point lies to the left of the control's client area.
		[helpstring("The specified point lies to the left of the control's client area.")]
		htToLeft = 0x0800 /*TVHT_TOLEFT*/
	} HitTestConstants;

	/// \brief <em>Constants used with the \c HotTracking property</em>
	///
	/// \sa IExplorerTreeView::HotTracking
	[helpstring("Constants used with the 'HotTracking' property.")]
	typedef enum HotTrackingConstants {
		/// \brief Hot tracking is entirely deactivated
		[helpstring("Hot tracking is disabled.")]
		htrNone,
		/// \brief Common hot tracking is activated
		[helpstring("Hot tracking is enabled.")]
		htrNormal,
		/// \brief Windows XP style hot tracking is activated
		///
		/// Windows XP style hot tracking differs from common hot tracking in that the mouse cursor won't
		/// switch to a pointing hand while located over an item.
		[helpstring("Hot tracking is enabled, but the mouse cursor won't be changed to a pointing hand.")]
		htrWinXPStyle
	} HotTrackingConstants;

	/// \brief <em>Flags used with the \c FAILEDIMAGEDETAILS type</em>
	///
	/// \sa FAILEDIMAGEDETAILS
	[helpstring("Flags used with the 'FAILEDIMAGEDETAILS' type. Some of them may be combined.")]
	typedef enum ImageDrawingEffectsConstants {
		/// \brief The image state is not modified
		[helpstring("The image state is not modified.")]
		ideNormal = 0x00000000/*ILS_NORMAL*/,
		/// \brief Not supported; defined for completeness
		///
		/// \sa FAILEDIMAGEDETAILS::EffectColor
		[helpstring("Not supported; defined for completeness.")]
		ideGlow = 0x00000001/*ILS_GLOW*/,
		/// \brief Not supported; defined for completeness
		///
		/// \sa FAILEDIMAGEDETAILS::EffectColor
		[helpstring("Not supported; defined for completeness.")]
		ideShadow = 0x00000002/*ILS_SHADOW*/,
		/// \brief Reduces the color saturation of the icon to grayscale (affects 32bpp images only)
		[helpstring("Reduces the color saturation of the icon to grayscale (affects 32bpp images only).")]
		ideGrayscale = 0x00000004/*ILS_SATURATE*/,
		/// \brief Alpha blends the image
		///
		/// \sa FAILEDIMAGEDETAILS::AlphaChannel
		[helpstring("Alpha blends the image.")]
		ideAlphaBlending = 0x00000008/*ILS_ALPHA*/
	} ImageDrawingEffectsConstants;

	/// \brief <em>Constants used with the \c ItemAsynchronousDrawFailed event</em>
	///
	/// \sa _IExplorerTreeViewEvents::ItemAsynchronousDrawFailed
	[helpstring("Constants used with the 'ItemAsynchronousDrawFailed' event.")]
	typedef enum ImageDrawingFailureReasonConstants {
		/// \brief The image has too low quality
		[helpstring("The image has too low quality.")]
		idfrImageHasLowQuality = 0x00000001/*ILDRF_IMAGELOWQUALITY*/,
		/// \brief The overlay image has too low quality
		[helpstring("The overlay image has too low quality.")]
		idfrOverlayHasLowQuality = 0x00000010/*ILDRF_OVERLAYLOWQUALITY*/,
		/// \brief The image is not present and needs to be extracted
		[helpstring("The image is not present and needs to be extracted.")]
		idfrImageNotPresent = 0x8000000A/*E_PENDING*/,
		/// \brief The image is present, but not at the required image quality
		[helpstring("The image is present, but not at the required image quality.")]
		idfrQualityMismatch = 0x00000000/*S_OK*/
	} ImageDrawingFailureReasonConstants;

	/// \brief <em>Flags used with the \c FAILEDIMAGEDETAILS type</em>
	///
	/// \sa FAILEDIMAGEDETAILS
	[helpstring("Flags used with the 'FAILEDIMAGEDETAILS' type. Some of them may be combined.")]
	typedef enum ImageDrawingStyleConstants {
		/// \brief The image is drawn normal using the specified background color
		///
		/// Draws the image using the background color for the image list. If the background color is -1, the
		/// image is drawn transparently using the mask.
		[helpstring("The image is drawn normal using the specified background color.")]
		idsNormal = 0x00000000/*ILD_NORMAL*/,
		/// \brief The image is drawn transparently using the mask
		///
		/// Draws the image transparently using the mask, regardless of the background color. This value has no
		/// effect if the image list does not contain a mask.
		[helpstring("The image is drawn transparently using the mask.")]
		idsTransparent = 0x00000001/*ILD_TRANSPARENT*/,
		/// \brief The image is drawn blended 25 percent with the blend color
		///
		/// Draws the image, blending 25 percent with the blend color specified by
		/// \c FAILEDIMAGEDETAILS::ForeColor. This value has no effect if the image list does not contain a
		/// mask.
		///
		/// \sa FAILEDIMAGEDETAILS::ForeColor
		[helpstring("The image is drawn blended 25 percent with the blend color.")]
		idsBlend25 = 0x00000002/*ILD_BLEND25*/,
		/// \brief The image is drawn blended 50 percent with the blend color
		///
		/// Draws the image, blending 50 percent with the blend color specified by
		/// \c FAILEDIMAGEDETAILS::ForeColor. This value has no effect if the image list does not contain a
		/// mask.
		///
		/// \sa FAILEDIMAGEDETAILS::ForeColor
		[helpstring("The image is drawn blended 50 percent with the blend color.")]
		idsBlend50 = 0x00000004/*ILD_BLEND50*/,
		/// \brief Draws the image's mask
		[helpstring("Draws the image's mask.")]
		idsMask = 0x00000010/*ILD_MASK*/,
		/// \brief Use this flag if the overlay image does not require a mask to be drawn
		///
		/// \sa FAILEDIMAGEDETAILS::OverlayIndex
		[helpstring("Use this flag if the overlay image does not require a mask to be drawn.")]
		idsImage = 0x00000020/*ILD_IMAGE*/,
		/// \brief Draws the image using the raster operation code specified by \c FAILEDIMAGEDETAILS::RasterOperationCode
		///
		/// \sa FAILEDIMAGEDETAILS::RasterOperationCode
		[helpstring("Draws the image using the raster operation code specified by 'FAILEDIMAGEDETAILS.RasterOperationCode'.")]
		idsUseRasterOperationCode = 0x00000040/*ILD_ROP*/,
		/// \brief Preserves the alpha channel in the destination device context
		///
		/// \sa FAILEDIMAGEDETAILS::hDC
		[helpstring("Preserves the alpha channel in the destination device context.")]
		idsPreserveAlphaChannel = 0x00001000/*ILD_PRESERVEALPHA*/,
		/// \brief Causes the image to be scaled to \c FAILEDIMAGEDETAILS::SectionToDrawWidth, \c FAILEDIMAGEDETAILS::SectionToDrawHeight instead of being clipped
		///
		/// \sa FAILEDIMAGEDETAILS::SectionToDrawWidth, FAILEDIMAGEDETAILS::SectionToDrawHeight
		[helpstring("Causes the image to be scaled to 'FAILEDIMAGEDETAILS.SectionToDrawWidth', 'FAILEDIMAGEDETAILS.SectionToDrawHeight' instead of being clipped.")]
		idsScale = 0x00002000/*ILD_SCALE*/,
		/// \brief Scales the image to the current dots per inch (dpi) of the display
		[helpstring("Scales the image to the current dots per inch (dpi) of the display.")]
		idsDPIScale = 0x00004000/*ILD_DPISCALE*/,
		/// \brief Draws the image if it is available in the cache only
		[helpstring("Draws the image if it is available in the cache only.")]
		idsDrawAsynchronously = 0x00008000/*ILD_ASYNC*/
	} ImageDrawingStyleConstants;

	/// \brief <em>Constants used with the \c IExplorerTreeView::hImageList property</em>
	///
	/// \sa IExplorerTreeView::hImageList
	[helpstring("Constants used with the 'ExplorerTreeView.hImageList' property.")]
	typedef enum ImageListConstants {
		/// \brief Identifies the imagelist containing the items' icons
		///
		/// Identifies the imagelist containing the items' icons. If this imagelist is set to 0, no icons are
		/// drawn.
		///
		/// \sa ITreeViewItem::IconIndex, ITreeViewItem::SelectedIconIndex, ITreeViewItem::ExpandedIconIndex,
		///     IExplorerTreeView::DrawImagesAsynchronously
		[helpstring("Identifies the imagelist containing the items' icons.")]
		ilItems = 1,
		/// \brief Identifies the imagelist containing the items' icons used for Aero OLE drag images
		///
		/// Identifies the imagelist containing the items' icons used when icons with a high resolution are
		/// required. Currently the only usage of this imagelist is the creation of Aero OLE drag images.\n
		/// If this imagelist is set to 0, the \c ilItems imagelist is used.
		///
		/// \sa ilItems, ITreeViewItem::IconIndex, ITreeViewItem::SelectedIconIndex,
		///     IExplorerTreeView::SupportOLEDragImages, IExplorerTreeView::OLEDrag
		[helpstring("Identifies the imagelist containing the items' icons used for Aero OLE drag images.")]
		ilHighResolution = 4,
		/// \brief Identifies the imagelist containing the items' state images
		///
		/// \sa IExplorerTreeView::ShowStateImages, IExplorerTreeView::BuiltInStateImages,
		///     IExplorerTreeView::IndentStateImages, ITreeViewItem::StateImageIndex
		[helpstring("Identifies the imagelist containing the items' state images.")]
		ilState = 6
	} ImageListConstants;

	/// \brief <em>Constants used with the \c IMEMode property</em>
	///
	/// \sa IExplorerTreeView::IMEMode, IExplorerTreeView::EditIMEMode
	[helpstring("Constants used with the 'IMEMode' property.")]
	typedef enum IMEModeConstants {
		/// \brief Use the same IME settings as the control's parent
		[helpstring("Inherit the IME status from the control's parent.")]
		imeInherit = -1,
		/// \brief Don't change anything on the control's default IME settings
		[helpstring("Leaves the control's IME status untouched.")]
		imeNoControl = 0,
		/// \brief Set the control's IME status to "on"
		[helpstring("Sets the control's IME status to \"on\".")]
		imeOn = 1,
		/// \brief Set the control's IME status to "off"
		[helpstring("Sets the control's IME status to \"off\".")]
		imeOff = 2,
		/// \brief Don't use IME
		[helpstring("Disables IME for the control.")]
		imeDisable = 3,
		/// \brief Set the control's IME status to "Hiragana Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Japanese.
		[helpstring("Sets the control's IME status to \"Hiragana Double-Byte Characters\" (Japanese IME only).")]
		imeHiragana = 4,
		/// \brief Set the control's IME status to "Hiragana Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Japanese.
		[helpstring("Sets the control's IME status to \"Katakana Double-Byte Characters\" (Japanese IME only).")]
		imeKatakana = 5,
		/// \brief Set the control's IME status to "Katakana Single-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Japanese.
		[helpstring("Sets the control's IME status to \"Katakana Single-Byte Characters\" (Japanese IME only).")]
		imeKatakanaHalf = 6,
		/// \brief Set the control's IME status to "Alphanumeric Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean or Japanese.
		[helpstring("Sets the control's IME status to \"Alphanumeric Double-Byte Characters\" (Korean and Japanese IME only).")]
		imeAlphaFull = 7,
		/// \brief Set the control's IME status to "Alphanumeric Single-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean or Japanese.
		[helpstring("Sets the control's IME status to \"Alphanumeric Single-Byte Characters\" (Korean and Japanese IME only).")]
		imeAlpha = 8,
		/// \brief Set the control's IME status to "Hangul Single-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean.
		[helpstring("Sets the control's IME status to \"Hangul Single-Byte Characters\" (Korean IME only).")]
		imeHangulFull = 9,
		/// \brief Set the control's IME status to "Hangul Double-Byte Characters"
		///
		/// \remarks This flag is valid only if the input language is Korean.
		[helpstring("Sets the control's IME status to \"Hangul Double-Byte Characters\" (Korean IME only).")]
		imeHangul = 10
	} IMEModeConstants;

	/// \brief <em>Constants that may be used with the \c ITreeViewItems::Add method</em>
	///
	/// Constants that may be used for the \c insertAfter parameter of the \c ITreeViewItems::Add method.
	///
	/// \sa ITreeViewItems::Add
	[helpstring("Constants that may be used for the 'insertAfter' parameter of the 'TreeViewItems.Add' method.")]
	typedef enum InsertAfterConstants {
		/// \brief Insert the item at the beginning of the list of sub-items
		[helpstring("Insert the item at the beginning of the list.")]
		iaFirst = 0xFFFF0001 /*TVI_FIRST*/,
		/// \brief Insert the item at the end of the list of sub-items
		[helpstring("Insert the item at the end of the list.")]
		iaLast = 0xFFFF0002 /*TVI_LAST*/,
		/// \brief Insert the item into the list of sub-items in alphabetical order
		///
		/// \sa IExplorerTreeView::SortItems
		[helpstring("Insert the item into the list in alphabetical order.")]
		iaSort = 0xFFFF0003 /*TVI_SORT*/
	} InsertAfterConstants;

	/// \brief <em>Constants that may be used with the \c SetInsertMarkPosition and \c GetInsertMarkPosition methods</em>
	///
	/// Constants that may be used for the \c relativePosition parameter of the \c SetInsertMarkPosition
	/// and \c GetInsertMarkPosition methods.
	///
	/// \sa IExplorerTreeView::SetInsertMarkPosition, IExplorerTreeView::GetInsertMarkPosition
	[helpstring("Constants that may be used for the 'relativePosition' parameter of the 'SetInsertMarkPosition' and 'GetInsertMarkPosition' methods.")]
	typedef enum InsertMarkPositionConstants {
		/// \brief The insertion mark is or will be removed
		[helpstring("The insertion mark is or will be removed.")]
		impNowhere = 0,
		/// \brief The insertion mark is or will be placed before the item
		[helpstring("The insertion mark is or will be placed before the item.")]
		impBefore = 1,
		/// \brief The insertion mark is or will be placed after the item
		[helpstring("The insertion mark is or will be placed after the item.")]
		impAfter = 2,
		/// \brief The insertion mark won't be (re-)moved
		[helpstring("The insertion mark won't be (re-)moved.")]
		impDontChange = 3
	} InsertMarkPositionConstants;

	/// \brief <em>Flags used with the \c ItemBoundingBoxDefinition property</em>
	///
	/// \sa IExplorerTreeView::ItemBoundingBoxDefinition
	[helpstring("Flags used with the 'ItemBoundingBoxDefinition' property. They can be combined.")]
	typedef enum ItemBoundingBoxDefinitionConstants {
		/// \brief An item expando is treated as part of the item
		[helpstring("An item expando is treated as part of the item.")]
		ibbdItemExpando = htItemExpando,
		/// \brief An item's icon is treated as part of the item
		[helpstring("An item's icon is treated as part of the item.")]
		ibbdItemIcon = htItemIcon,
		/// \brief An item's indentation area is treated as part of the item
		[helpstring("An item's indentation area is treated as part of the item.")]
		ibbdItemIndent = htItemIndent,
		/// \brief An item's text label is treated as part of the item
		[helpstring("An item's text label is treated as part of the item.")]
		ibbdItemLabel = htItemLabel,
		/// \brief The area to an item's right is treated as part of the item
		[helpstring("The area to an item's right is treated as part of the item.")]
		ibbdItemRight = htItemRight,
		/// \brief An item's state image is treated as part of the item
		[helpstring("An item's state image is treated as part of the item.")]
		ibbdItemStateImage = htItemStateImage
	} ItemBoundingBoxDefinitionConstants;

	/// \brief <em>Constants used to identify items within an \c ITreeViewItems collection</em>
	///
	/// \sa ITreeViewItems
	[helpstring("Constants used to identify items within a 'TreeViewItems' collection.")]
	typedef enum ItemIdentifierTypeConstants {
		/// \brief The item is identified by an unique ID
		///
		/// An item's ID will never change.
		///
		/// \sa ITreeViewItem::ID
		[helpstring("The item is identified by an unique ID.")]
		iitID,
		/// \brief The item is identified by an item-handle
		///
		/// Moving the item is the only action that will change an item's handle.
		///
		/// \remarks This is the preferred and fastest method to identify an item.
		///
		/// \sa ITreeViewItem::Handle
		[helpstring("The item is identified by an item-handle.")]
		iitHandle,
		/// \brief The item is identified by an accessibility ID
		///
		/// Usually accessibility ids are used for accessibility features which make it easier for
		/// disabled people to use computers.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.
		///
		/// \sa ITreeViewItem::AccessibilityID
		[helpstring("The item is identified by an accessibility identifier. Requires comctl32.dll version 6.0 or higher.")]
		iitAccessibilityID
	} ItemIdentifierTypeConstants;

	/// \brief <em>Constants used with the \c ITreeViewItem::GetRectangle method</em>
	///
	/// \sa ITreeViewItem::GetRectangle
	[helpstring("Constants used with the 'TreeViewItem.GetRectangle' method.")]
	typedef enum ItemRectangleTypeConstants {
		/// \brief Retrieve the bounding rectangle of the treeview item's caption
		[helpstring("Retrieve the bounding rectangle of the treeview item's caption.")]
		irtItem = 0,
		/// \brief Retrieve the bounding rectangle of the row containing the item
		[helpstring("Retrieve the bounding rectangle of the row containing the item.")]
		irtItemRow = 1,
		/// \brief Retrieve the bounding rectangle of the treeview item's expando
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("Retrieve the bounding rectangle of the treeview item's expando. Requires comctl32.dll version 6.10 or higher.")]
		irtItemExpando = 2/*TVGIPR_BUTTON + 1*/
	} ItemRectangleTypeConstants;

	/// \brief <em>Constants used with the \c LineStyle property</em>
	///
	/// \sa IExplorerTreeView::LineStyle
	[helpstring("Constants used with the 'LineStyle' property.")]
	typedef enum LineStyleConstants {
		/// \brief Top-level items' expandos are not displayed
		[helpstring("Top-level items' expandos are not displayed.")]
		lsLinesAtItem,
		/// \brief Top-level items' expandos are displayed
		[helpstring("Top-level items' expandos are displayed.")]
		lsLinesAtRoot
	} LineStyleConstants;

	/// \brief <em>Constants used with the \c MousePointer property</em>
	///
	/// \sa IExplorerTreeView::MousePointer
	[helpstring("Constants used with the 'MousePointer' property.")]
	typedef enum MousePointerConstants {
		/// \brief The default mouse cursor is used
		[helpstring("The default mouse cursor is used.")]
		mpDefault,
		/// \brief The default arrow is used as mouse cursor
		[helpstring("The default arrow is used as mouse cursor.")]
		mpArrow,
		/// \brief A cross is used as mouse cursor
		[helpstring("A cross is used as mouse cursor.")]
		mpCross,
		/// \brief A vertical beam (like in textboxes) is used as mouse cursor
		[helpstring("A vertical beam (like in textboxes) is used as mouse cursor.")]
		mpIBeam,
		/// \brief An icon is used as mouse cursor
		[helpstring("An icon is used as mouse cursor.")]
		mpIcon,
		/// \brief A mouse cursor indicating window sizing is used
		[helpstring("A mouse cursor indicating window sizing is used.")]
		mpSize,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its
		/// upper-right or lower-left corner.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper-right or lower-left corner is used.")]
		mpSizeNESW,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its upper or
		/// lower border.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper or lower border is used.")]
		mpSizeNS,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its
		/// upper-left or lower-right corner.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper-left or lower-right corner is used.")]
		mpSizeNWSE,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its left or
		/// right border.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's left or right border is used.")]
		mpSizeEW,
		/// \brief An arrow pointing upwardly is used as mouse cursor
		[helpstring("An arrow pointing upwardly is used as mouse cursor.")]
		mpUpArrow,
		/// \brief An hourglass is used as mouse cursor
		[helpstring("An hourglass is used as mouse cursor.")]
		mpHourglass,
		/// \brief An mouse cursor indicating that the control can't be a drop target is used
		[helpstring("An mouse cursor indicating that the control can't be a drop target is used.")]
		mpNoDrop,
		/// \brief The default arrow with a small hourglass is used as mouse cursor
		[helpstring("The default arrow with a small hourglass is used as mouse cursor.")]
		mpArrowHourglass,
		/// \brief The default arrow with a small question mark is used as mouse cursor
		[helpstring("The default arrow with a small question mark is used as mouse cursor.")]
		mpArrowQuestion,
		/// \brief A mouse cursor indicating window sizing to all directions is used
		[helpstring("A mouse cursor indicating window sizing to all directions is used.")]
		mpSizeAll,
		/// \brief A hand typically used for hyperlinks is used as mouse cursor
		[helpstring("A hand typically used for hyperlinks is used as mouse cursor.")]
		mpHand,
		/// \brief A mouse cursor indicating that the program waits for some media is used
		[helpstring("A mouse cursor indicating that the program waits for some media is used.")]
		mpInsertMedia,
		/// \brief A mouse cursor indicating scrolling to all directions is used
		[helpstring("A mouse cursor indicating scrolling to all directions is used.")]
		mpScrollAll,
		/// \brief A mouse cursor indicating scrolling upwardly is used
		[helpstring("A mouse cursor indicating scrolling upwardly is used.")]
		mpScrollN,
		/// \brief A mouse cursor indicating scrolling to the window's upper-right corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's upper-right corner is used.")]
		mpScrollNE,
		/// \brief A mouse cursor indicating scrolling to the window's right border is used
		[helpstring("A mouse cursor indicating scrolling to the window's right border is used.")]
		mpScrollE,
		/// \brief A mouse cursor indicating scrolling to the window's lower-right corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's lower-right corner is used.")]
		mpScrollSE,
		/// \brief A mouse cursor indicating scrolling downwards is used
		[helpstring("A mouse cursor indicating scrolling downwards is used.")]
		mpScrollS,
		/// \brief A mouse cursor indicating scrolling to the window's lower-left corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's lower-left corner is used.")]
		mpScrollSW,
		/// \brief A mouse cursor indicating scrolling to the window's left border is used
		[helpstring("A mouse cursor indicating scrolling to the window's left border is used.")]
		mpScrollW,
		/// \brief A mouse cursor indicating scrolling to the window's upper-left corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's upper-left corner is used.")]
		mpScrollNW,
		/// \brief A mouse cursor indicating scrolling upwardly or downwards is used
		[helpstring("A mouse cursor indicating scrolling upwardly or downwards is used.")]
		mpScrollNS,
		/// \brief A mouse cursor indicating scrolling to the window's left or right border is used
		[helpstring("A mouse cursor indicating scrolling to the window's left or right border is used.")]
		mpScrollEW,
		/// \brief The custom mouse cursor defined by the \c MouseIcon property is used
		[helpstring("The custom mouse cursor defined by the MouseIcon property is used.")]
		mpCustom = 0x63
	} MousePointerConstants;

	/// \brief <em>Constants used with the \c OLEQueryContinueDrag event</em>
	///
	/// \sa _IExplorerTreeViewEvents::OLEQueryContinueDrag, _IExplorerTreeViewEvents::OLEGiveFeedback,
	///     IExplorerTreeView::OLEDrag
	[helpstring("Constants used with the 'OLEQueryContinueDrag' event.")]
	typedef enum OLEActionToContinueWithConstants {
		/// \brief Continue the drag'n'drop operation
		[helpstring("Continue the drag'n'drop operation.")]
		oatcwContinue = 0x0 /*S_OK*/,
		/// \brief Cancel the drag'n'drop operation
		[helpstring("Cancel the drag'n'drop operation.")]
		oatcwCancel = 0x40101 /*DRAGDROP_S_CANCEL*/,
		/// \brief Complete the drag'n'drop operation
		[helpstring("Complete the drag'n'drop operation.")]
		oatcwDrop = 0x40100 /*DRAGDROP_S_DROP*/
	} OLEActionToContinueWithConstants;

	/// \brief <em>Constants used with the \c OLEDragImageStyle property</em>
	///
	/// \sa IExplorerTreeView::OLEDragImageStyle
	[helpstring("Constants used with the 'OLEDragImageStyle' property.")]
	typedef enum OLEDragImageStyleConstants {
		/// \brief OLE drag images will be generated in classic style
		[helpstring("OLE drag images will be generated in classic style.")]
		odistClassic,
		/// \brief OLE drag images will be generated in Aero (Vista) style on systems supporting it and in classic style on other systems
		///
		/// \remarks Aero style is supported by Windows Vista and newer systems.\n
		///          The icons for Aero style drag images are taken from the \c ilHighResolution or \c ilItems
		///          image list (in this order).
		///
		/// \sa IExplorerTreeView::hImageList
		[helpstring("OLE drag images will be generated in Aero (Vista) style on systems supporting it and in classic style on other systems. Aero style is supported by Windows Vista and newer systems.")]
		odistAeroIfAvailable
	} OLEDragImageStyleConstants;

	/// \brief <em>Constants used with OLE drag'n'drop</em>
	///
	/// \sa _IExplorerTreeViewEvents::OLEDragEnter, _IExplorerTreeViewEvents::OLEDragMouseMove,
	///     _IExplorerTreeViewEvents::OLEDragDrop, IExplorerTreeView::OLEDrag
	[helpstring("Constants used with the 'OLEDrag*' events.")]
	typedef enum OLEDropEffectConstants {
		/// \brief No OLE drag and drop operation has occurred or will occur
		[helpstring("No OLE drag and drop operation has occurred or will occur.")]
		odeNone = 0 /*DROPEFFECT_NONE*/,
		/// \brief A copy has occured or will occur
		[helpstring("A copy has occured or will occur.")]
		odeCopy = 1 /*DROPEFFECT_COPY*/,
		/// \brief A move has occured or will occur
		[helpstring("A move has occured or will occur.")]
		odeMove = 2 /*DROPEFFECT_MOVE*/,
		/// \brief A link has occured or will occur
		[helpstring("A link has occured or will occur.")]
		odeLink = 4 /*DROPEFFECT_LINK*/,
		/// \brief Combination of \c odeCopy and \c odeMove
		[helpstring("Combination of 'odeCopy' and 'odeMove'.")]
		odeCopyOrMove = odeCopy | odeMove,
		/// \brief The drop target window has scrolled or will scroll
		[helpstring("The drop target window has scrolled or will scroll.")]
		odeScroll = 0x80000000 /*DROPEFFECT_SCROLL*/
	} OLEDropEffectConstants;

	/// \brief <em>Flags used with the \c ItemGetDisplayInfo event</em>
	///
	/// \sa _IExplorerTreeViewEvents::ItemGetDisplayInfo
	[helpstring("Flags used with the 'ItemGetDisplayInfo' event.")]
	typedef enum RequestedInfoConstants {
		/// \brief The event was fired to retrieve the item's text
		///
		/// \sa ITreeViewItem::Text
		[helpstring("The control requires the item's text.")]
		riItemText = 0x0001,
		/// \brief The event was fired to retrieve the index of the item's standard icon
		///
		/// \sa ITreeViewItem::IconIndex
		[helpstring("The control requires the index of the item's standard icon.")]
		riIconIndex = 0x0002,
		/// \brief The event was fired to retrieve the index of the item's selected icon
		///
		/// The event was fired to retrieve the index of the item's selected icon. The selected icon
		/// is used instead of the standard icon if the item is the control's caret item.
		///
		/// \sa ITreeViewItem::SelectedIconIndex
		[helpstring("The control requires the index of the item's selected icon.")]
		riSelectedIconIndex = 0x0004,
		/// \brief The event was fired to retrieve the index of the item's expanded icon
		///
		/// The event was fired to retrieve the index of the item's expanded icon. The expanded icon
		/// is used instead of the standard icon if the item is expanded.
		///
		/// \sa ITreeViewItem::ExpandedIconIndex
		[helpstring("The control requires the index of the item's expanded icon.")]
		riExpandedIconIndex = 0x0008,
		/// \brief The event was fired to retrieve the value of the item's \c HasExpando property
		///
		/// \sa ITreeViewItem::HasExpando
		[helpstring("The control requires the value of the item's 'HasExpando' property.")]
		riHasExpando = 0x0080
	} RequestedInfoConstants;

	/// \brief <em>Flags used with \c RightToLeft property</em>
	///
	/// \sa IExplorerTreeView::RightToLeft
	[helpstring("Flags used with the 'RightToLeft' property. They can be combined.")]
	typedef enum RightToLeftConstants {
		/// \brief Read text from right to left
		///
		/// The items' text is read from right to left, but the general layout is left to right, e. g. the
		/// item expandos are placed on the left side.
		[helpstring("The items' text is read from right to left, but the general layout is left to right, e. g. the item expandos are placed on the left side.")]
		rtlText = 1,
		/// \brief Use a right to left layout
		///
		/// The general layout is right to left, e. g. the item expandos are placed on the right side.
		[helpstring("The general layout is right to left, e. g. the item expandos are placed on the right side.")]
		rtlLayout = 2
	} RightToLeftConstants;

	/// \brief <em>Constants used with the \c MouseWheel events</em>
	///
	/// \sa _IExplorerTreeViewEvents::MouseWheel, _IExplorerTreeViewEvents::EditMouseWheel
	[helpstring("Constants used with the 'MouseWheel' events.")]
	typedef enum ScrollAxisConstants {
		/// \brief Scroll vertically
		[helpstring("The control will scroll vertically.")]
		saVertical = 1,
		/// \brief Scroll horizontally
		[helpstring("The control will scroll horizontally.")]
		saHorizontal = 2
	} ScrollAxisConstants;

	/// \brief <em>Constants used with \c ScrollBars property</em>
	///
	/// \sa IExplorerTreeView::ScrollBars
	[helpstring("Constants used with the 'ScrollBars' property.")]
	typedef enum ScrollBarsConstants {
		/// \brief Don't display any scrollbars
		[helpstring("The control doesn't display any scrollbars.")]
		sbNone,
		/// \brief Display a vertical scrollbar if needed
		[helpstring("The control displays a vertical scrollbar if needed.")]
		sbVerticalOnly,
		/// \brief Display scrollbars as needed
		[helpstring("The control displays vertical and horizontal scrollbars as needed.")]
		sbNormal
	} ScrollBarsConstants;

	/// \brief <em>Constants used with \c SingleExpand property</em>
	///
	/// \sa IExplorerTreeView::SingleExpand
	[helpstring("Constants used with the 'SingleExpand' property.")]
	typedef enum SingleExpandConstants {
		/// \brief Don't restrict expansion and expand on double-click
		///
		/// Items may be expanded without restrictions. Double-clicking an item expands/collapses it.
		[helpstring("Item expansion isn't restricted. Items get expanded by a double-click.")]
		seNone,
		/// \brief Only one item per level may be expanded
		///
		/// Items are collapsed automatically so that only one item per level is expanded. Single-clicking
		/// an item expands/collapses it.
		[helpstring("By clicking on the item's title, only one item may be expanded. Items get expanded by a single click.")]
		seNormal,
		/// \brief Windows XP style single expansion
		///
		/// Items are collapsed automatically so that only one item per level is expanded. Exception: If
		/// the previous selected item has a different immediate parent item than the item, that gets
		/// selected, the previous selected item won't be collapsed. Single-clicking an item expands,
		/// but does not collapse it.
		[helpstring("Same as 'seNormal', except that the previous focused item won't be collapsed if it has a different parent item than the new one.")]
		seWinXPStyle
	} SingleExpandConstants;

	/// \brief <em>Constants used with the \c SortItems and \c ITreeViewItem::SortSubItems methods</em>
	///
	/// \sa IExplorerTreeView::SortItems, ITreeViewItem::SortSubItems,
	///     _IExplorerTreeViewEvents::CompareItems
	[helpstring("Constants used with the 'SortItems' and 'ITreeViewItem.SortSubItems' methods.")]
	typedef enum SortByConstants {
		/// \brief The items don't get sorted
		[helpstring("The items don't get sorted.")]
		sobNone = -1,
		/// \brief The items get sorted through \c ShellTreeView by the Windows Shell
		///
		/// \remarks This sort criterion is ignored if no \c ShellTreeView control is attached.
		[helpstring("The items get sorted through ShellTreeView by the Windows Shell. This sort criterion is ignored if no ShellTreeView control is attached.")]
		sobShell = 0,
		/// \brief The items get sorted by their text
		///
		/// \sa IExplorerTreeView::Locale, IExplorerTreeView::TextParsingFlags
		[helpstring("The items get sorted by their text.")]
		sobText,
		/// \brief The items get sorted by their selection state (selected stand first)
		[helpstring("The items get sorted by their selection state (selected stand first).")]
		sobSelectionState,
		/// \brief The items get sorted by their state image index (higher stands first)
		[helpstring("The items get sorted by their state image index (higher stands first).")]
		sobStateImageIndex,
		/// \brief The \c CompareItems event is fired to sort items
		[helpstring("The 'CompareItems' event is fired to sort items.")]
		sobCustom,
		/// \brief The items get sorted by their text and the text is interpreted as integer number
		///
		/// \sa IExplorerTreeView::Locale, IExplorerTreeView::TextParsingFlags
		[helpstring("The items get sorted by their text and the text is interpreted as integer number.")]
		sobNumericIntText,
		/// \brief The items get sorted by their text and the text is interpreted as floating point number
		///
		/// \sa IExplorerTreeView::Locale, IExplorerTreeView::TextParsingFlags
		[helpstring("The items get sorted by their text and the text is interpreted as floating point number.")]
		sobNumericFloatText,
		/// \brief The items get sorted by their text and the text is interpreted as currency number
		///
		/// \sa IExplorerTreeView::Locale, IExplorerTreeView::TextParsingFlags
		[helpstring("The items get sorted by their text and the text is interpreted as currency number.")]
		sobCurrencyText,
		/// \brief The items get sorted by their text and the text is interpreted as date-time value
		///
		/// \sa IExplorerTreeView::Locale, IExplorerTreeView::TextParsingFlags
		[helpstring("The items get sorted by their text and the text is interpreted as date-time value.")]
		sobDateTimeText
	} SortByConstants;

	/// \brief <em>Constants used with the \c SortOrder property</em>
	///
	/// \sa IExplorerTreeView::SortOrder
	[helpstring("Constants used with the 'SortOrder' property.")]
	typedef enum SortOrderConstants {
		/// \brief The items get sorted in ascending order
		[helpstring("The items get sorted in ascending order.")]
		soAscending,
		/// \brief The items get sorted in descending order
		[helpstring("The items get sorted in descending order.")]
		soDescending
	} SortOrderConstants;

	/// \brief <em>Constants used with the \c ItemStateImageChanging and \c ItemStateImageChanged events</em>
	///
	/// \sa _IExplorerTreeViewEvents::ItemStateImageChanging,
	///     _IExplorerTreeViewEvents::ItemStateImageChanged
	[helpstring("Constants used with the 'ItemStateImageChanging' and 'ItemStateImageChanged' events.")]
	typedef enum StateImageChangeCausedByConstants {
		/// \brief The state image change was caused by mouse input
		[helpstring("The state image change was caused by mouse input.")]
		siccbMouse,
		/// \brief The state image change was caused by keyboard input
		[helpstring("The state image change was caused by keyboard input.")]
		siccbKeyboard,
		/// \brief The state image was changed directly through code
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		[helpstring("The state image was changed directly through code. Requires comctl32.dll version 6.10 or higher.")]
		siccbCode
	} StateImageChangeCausedByConstants;

	/// \brief <em>Constants used with the \c TextParsingFlags property</em>
	///
	/// \sa IExplorerTreeView::TextParsingFlags
	[helpstring("Constants used with the 'TextParsingFlags' property.")]
	typedef enum TextParsingFunctionConstants {
		/// \brief Retrieve or set the options for the \c CompareString function
		///
		/// Retrieve or set the options that are applied when calling the \c CompareString function. This
		/// function is called if sorting by the \c sobText criterion and a locale identifier has been
		/// specified.
		///
		/// \remarks See the documentation of \c CompareString for valid options. The specified options are
		///          passed to the \c dwCmpFlags parameter of \c CompareString.
		///
		/// \sa <a href="https://msdn.microsoft.com/en-us/library/dd317759.aspx">CompareString</a>,
		///     SortByConstants
		[helpstring("Retrieve or set the options that are applied when calling the 'CompareString' function. This function is called if sorting by the 'sobText' criterion and a locale identifier has been specified.")]
		tpfCompareString,
		/// \brief Retrieve or set the options for the \c VarI8FromStr, \c VarR8FromStr, \c VarDateFromStr and \c VarCyFromStr functions
		///
		/// Retrieve or set the options that are applied when calling the \c VarI8FromStr, \c VarR8FromStr,
		/// \c VarDateFromStr and \c VarCyFromStr functions. These functions are called if sorting by the
		/// \c sobNumericIntText, \c sobNumericFloatText, \c sobDateTimeText or \c sobCurrencyText criterion:
		/// - \c sobNumericIntText: \c VarI8FromStr is used to parse the text into an integer value.
		/// - \c sobNumericFloatText: \c VarR8FromStr is used to parse the text into a floating point value.
		/// - \c sobDateTimeText: \c VarDateFromStr is used to parse the text into a date-time value.
		/// - \c sobCurrencyText: \c VarCyFromStr is used to parse the text into a currency value.
		///
		/// \remarks See the documentation of \c VarI8FromStr, \c VarR8FromStr, \c VarDateFromStr and
		///          \c VarCyFromStr for valid options. The specified options are passed to the \c dwFlags
		///          parameters of the functions.
		///
		/// \sa <a href="https://msdn.microsoft.com/en-us/library/ms644510.aspx">VarI8FromStr</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms221331.aspx">VarR8FromStr</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms221395.aspx">VarDateFromStr</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms221582.aspx">VarCyFromStr</a>,
		///     SortByConstants
		[helpstring("Retrieve or set the options that are applied when calling the 'VarI8FromStr', 'VarR8FromStr', 'VarDateFromStr' and 'VarCyFromStr' functions. These functions are called if sorting by 'sobNumeric*Text', 'sobDateTimeText' or 'sobCurrencyText'.")]
		tpfVarFromStr
	} TextParsingFunctionConstants;

	/// \brief <em>Flags used with \c TreeViewStyle property</em>
	///
	/// \sa IExplorerTreeView::TreeViewStyle
	[helpstring("Flags used with the 'TreeViewStyle' property. They can be combined.")]
	typedef enum TreeViewStyleConstants {
		/// \brief The control shows expandos next to items that have \c HasExpando set to \c heYes
		///
		/// \sa ITreeViewItem::HasExpando, IExplorerTreeView::FadeExpandos, HasExpandoConstants
		[helpstring("The control shows item expandos next to items that have the 'HasExpando' property set to 'heYes'.")]
		tvsExpandos = 1,
		/// \brief The control draws thin lines to visualize the items' hierarchic order
		[helpstring("The control draws thin lines to visualize the hierarchy.")]
		tvsLines = 2
	} TreeViewStyleConstants;


	/// \brief <em>Describes an image that failed to draw</em>
	///
	/// \sa _IExplorerTreeViewEvents::ItemAsynchronousDrawFailed
	// NOTE: If we change the UUID, we also need to update _IExplorerTreeViewEvents_CP.h!
	[helpstring("Describes an image that failed to draw."), uuid(95ECE649-48D0-4133-9D53-31304AA41EE1)]
	typedef struct FAILEDIMAGEDETAILS
	{
		/// \brief <em>Specifies the handle of the imagelist that contains the image</em>
		[helpstring("Specifies the handle of the imagelist that contains the image.")]
		OLE_HANDLE hImageList;
		/// \brief <em>Specifies the zero-based index of the image within the imagelist specified by \c hImageList</em>
		///
		/// \sa hImageList, OverlayIndex
		[helpstring("Specifies the zero-based index of the image within the imagelist specified by 'hImageList'.")]
		LONG IconIndex;
		/// \brief <em>Specifies the handle of the device context that the image should be drawn to</em>
		[helpstring("Specifies the handle of the device context that the image should be drawn to.")]
		OLE_HANDLE hDC;
		/// \brief <em>Specifies the x-coordinate (in pixels) of the position in the device context specified by \c hDC at which the image should have been drawn</em>
		///
		/// \sa hDC
		[helpstring("Specifies the x-coordinate (in pixels) of the position in the device context specified by 'hDC' at which the image should have been drawn.")]
		OLE_XPOS_PIXELS TargetPositionX;
		/// \brief <em>Specifies the y-coordinate (in pixels) of the position in the device context specified by \c hDC at which the image should have been drawn</em>
		///
		/// \sa hDC
		[helpstring("Specifies the y-coordinate (in pixels) of the position in the device context specified by 'hDC' at which the image should have been drawn.")]
		OLE_YPOS_PIXELS TargetPositionY;
		/// \brief <em>Specifies the x-coordinate (in pixels) that specifies the upper-left corner of the drawing operation in reference to the image itself</em>
		///
		/// \sa SectionToDrawTop, SectionToDrawWidth, SectionToDrawHeight
		[helpstring("Specifies the x-coordinate (in pixels) that specifies the upper-left corner of the drawing operation in reference to the image itself.")]
		OLE_XPOS_PIXELS SectionToDrawLeft;
		/// \brief <em>Specifies the y-coordinate (in pixels) that specifies the upper-left corner of the drawing operation in reference to the image itself</em>
		///
		/// \sa SectionToDrawLeft, SectionToDrawWidth, SectionToDrawHeight
		[helpstring("Specifies the y-coordinate (in pixels) that specifies the upper-left corner of the drawing operation in reference to the image itself.")]
		OLE_YPOS_PIXELS SectionToDrawTop;
		/// \brief <em>Specifies the width (in pixels) of the image section to draw</em>
		///
		/// \remarks If \c SectionToDrawLeft and \c SectionToDrawTop are both zero, then the entire remaining
		///          section of the image is drawn.
		///
		/// \sa SectionToDrawLeft, SectionToDrawTop, SectionToDrawHeight
		[helpstring("Specifies the width (in pixels) of the image section to draw.")]
		OLE_XSIZE_PIXELS SectionToDrawWidth;
		/// \brief <em>Specifies the height (in pixels) of the image section to draw</em>
		///
		/// \remarks If \c SectionToDrawLeft and \c SectionToDrawTop are both zero, then the entire remaining
		///          section of the image is drawn.
		///
		/// \sa SectionToDrawLeft, SectionToDrawTop, SectionToDrawWidth
		[helpstring("Specifies the height (in pixels) of the image section to draw.")]
		OLE_YSIZE_PIXELS SectionToDrawHeight;
		/// \brief <em>Specifies the background color of the image to draw</em>
		///
		/// Specifies the background color of the image to draw. The value is a RGB color. If set to -1, the
		/// image is drawn transparently. If set to \c 0xFF000000, the image is drawn using the imagelist
		/// background color.
		///
		/// \sa ForeColor, EffectColor
		[helpstring("Specifies the background color of the image to draw.")]
		LONG BackColor;
		/// \brief <em>Specifies the foreground color of the image to draw</em>
		///
		/// Specifies the foreground color, i. e. the color that the image is blended with, of the image to
		/// draw. The value is a RGB color. If set to -1, the image is blended with the color of the
		/// destination device context (specified by \c hDC). If set to \c 0xFF000000, the is blended with the
		/// system highlight color.
		///
		/// \remarks This value is used only if the \c DrawingStyle member includes \c dsBlend25 or
		///          \c dsBlend50.
		///
		/// \sa BackColor, hDC, EffectColor
		[helpstring("Specifies the foreground color of the image to draw.")]
		LONG ForeColor;
		/// \brief <em>Specifies the drawing style to use</em>
		///
		/// Specifies the drawing style to use. Any of the values defined by the \c ImageDrawingStyleConstants
		/// enumeration is valid.
		///
		/// \sa DrawingEffects, ImageDrawingStyleConstants
		[helpstring("Specifies the drawing style to use.")]
		ImageDrawingStyleConstants DrawingStyle;
		/// \brief <em>Specifies the one-based index of the overlay image to draw</em>
		///
		/// Specifies the one-based index of the overlay image within the imagelist specified by \c hImageList
		/// that is drawn over the image specified by \c IconIndex. An index of 0 means that no overlay is
		/// drawn.
		///
		/// \sa hImageList, IconIndex
		[helpstring("Specifies the one-based index of the overlay image to draw.")]
		LONG OverlayIndex;
		/// \brief <em>Specifies the raster operation code to use</em>
		///
		/// Specifies the raster operation code to use in the drawing operation, if the \c DrawingStyle member
		/// includes \c idsUseRasterOperationCode.\n
		/// The raster operation code defines how the color data for the source rectangle will be combined with
		/// the color data for the destination rectangle to achieve the final color.
		///
		/// \sa hImageList, IconIndex
		[helpstring("Specifies the raster operation code to use.")]
		LONG RasterOperationCode;
		/// \brief <em>Specifies the drawing effects to apply</em>
		///
		/// Specifies the drawing effects to apply. Any of the values defined by the
		/// \c ImageDrawingEffectsConstants enumeration is valid.
		///
		/// \sa DrawingStyle, ImageDrawingEffectsConstants
		[helpstring("Specifies the drawing effects to apply.")]
		ImageDrawingEffectsConstants DrawingEffects;
		/// \brief <em>Specifies the value of the alpha channel to use with the \c ideAlphaBlending effect</em>
		///
		/// Specifies the value of the alpha channel to use with the \c ideAlphaBlending effect. This value can
		/// be from 0 to 255, with 0 being completely transparent, and 255 being completely opaque.
		///
		/// \sa DrawingEffects
		[helpstring("Specifies the value of the alpha channel to use with the 'ideAlphaBlending' effect.")]
		BYTE AlphaChannel;
		/// \brief <em>Specifies the color that is used with the \c ideGlow and \c ideShadow effects</em>
		///
		/// Specifies the color that is used with the \c ideGlow and \c ideShadow effects. The value is a RGB
		/// color.
		///
		/// \sa DrawingEffects, BackColor, ForeColor
		[helpstring("Specifies the color that is used with the 'ideGlow' and 'ideShadow' effects.")]
		LONG EffectColor;
	} FAILEDIMAGEDETAILS;

	/// \brief <em>Holds the coordinates of a rectangle's opposing corners</em>
	///
	/// \sa _IExplorerTreeViewEvents::CustomDraw
	// NOTE: If we change the UUID, we also need to update _IExplorerTreeViewEvents_CP.h!
	[helpstring("Holds a rectangle's position and size."), uuid(E46C3FEF-0F13-4d0d-88BE-D73F9B46B49E)]
	typedef struct RECTANGLE
	{
		/// \brief <em>Holds the position of the rectangle's left border in pixels</em>
		[helpstring("Holds the position of the rectangle's left border in pixels.")]
		OLE_XPOS_PIXELS Left;
		/// \brief <em>Holds the position of the rectangle's upper border in pixels</em>
		[helpstring("Holds the position of the rectangle's upper border in pixels.")]
		OLE_YPOS_PIXELS Top;
		/// \brief <em>Holds the position of the rectangle's right border in pixels</em>
		[helpstring("Holds the position of the rectangle's right border in pixels.")]
		OLE_XPOS_PIXELS Right;
		/// \brief <em>Holds the position of the rectangle's lower border in pixels</em>
		[helpstring("Holds the position of the rectangle's lower border in pixels.")]
		OLE_YPOS_PIXELS Bottom;
	} RECTANGLE;


	/// \interface IVirtualTreeViewItem
	/// \brief <em>Wraps a not existing item</em>
	///
	/// This interface is a wrapper around a treeview item that does not yet or not anymore exist within
	/// the control.
	///
	/// \sa _IVirtualTreeViewItemEvents, ITreeViewItem, _IExplorerTreeViewEvents
	[
		object,
		uuid(9F90A30A-1457-4984-A83B-A3A9F4E72B3A),
		dual,
		nonextensible,
		helpstring("IVirtualTreeViewItem interface"),
		pointer_default(unique)
	]
	interface IVirtualTreeViewItem : IDispatch
	{
		/// \brief <em>Retrieves whether the item's text is drawn in bold font</em>
		///
		/// Retrieves whether the item's text will be or was drawn in bold font. If this property is set
		/// to \c True, the item's text will be or was drawn in bold font; otherwise it will be or was
		/// drawn in normal font.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Text
		[propget, id(DISPID_VTVI_BOLD), helpstring("Retrieves whether the item's text is drawn in bold font.")]
		HRESULT Bold([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the item is highlighted as drop target</em>
		///
		/// Retrieves whether the item will be or was drawn as the target of a drag'n'drop operation,
		/// i. e. whether its background will be or was highlighted. If this property is set to \c True,
		/// the item will be or was highlighted; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerTreeView::DropHilitedItem, Selected
		[propget, id(DISPID_VTVI_DROPHILITED), helpstring("Retrieves whether the item is highlighted as a target of a drag'n'drop operation.")]
		HRESULT DropHilited([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the icon that is displayed next to the item if it is expanded</em>
		///
		/// Retrieves the zero-based index of the item's expanded icon in the control's \c ilItems imagelist.
		/// The expanded icon is used instead of the normal icon identified by the \c IconIndex property if the
		/// item becomes or was expanded.\n
		/// If set to -1, the control will fire the \c ItemGetDisplayInfo event each time this property's
		/// value is required.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa IExplorerTreeView::hImageList, _IExplorerTreeViewEvents::ItemGetDisplayInfo, IconIndex,
		///     SelectedIconIndex, OverlayIndex, StateImageIndex, ExpansionState, ImageListConstants
		[propget, id(DISPID_VTVI_EXPANDEDICONINDEX), helpstring("Retrieves the zero-based index of the item's icon in the control's imagelist that is used if the item is expanded. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT ExpandedIconIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's expansion state</em>
		///
		/// Retrieves whether (and how) the item will be or was expanded. Any of the values defined by
		/// the \c ExpansionStateConstants enumeration is valid.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ExpandedIconIndex, ExpansionStateConstants
		[propget, id(DISPID_VTVI_EXPANSIONSTATE), helpstring("Retrieves whether (and how) the item is or was expanded.")]
		HRESULT ExpansionState([out, retval] ExpansionStateConstants* pValue);
		/// \brief <em>Retrieves whether the item's icon is drawn semi-transparent</em>
		///
		/// Retrieves whether the item's icon will be or was drawn semi-transparent. If this property
		/// is set to \c True, the item's icon will be or was drawn semi-transparent; otherwise it will
		/// be or was drawn normal. Usually you make items ghosted if they're hidden or selected for a
		/// cut-paste-operation.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Virtual, Grayed, IconIndex
		[propget, id(DISPID_VTVI_GHOSTED), helpstring("Retrieves whether the item's icon is drawn semi-transparent.")]
		HRESULT Ghosted([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the item is drawn as a disabled item</em>
		///
		/// Retrieves whether the item will be or was drawn as a disabled item, i. e. whether its background
		/// color will be or was changed to gray. If this property is set to \c True, the item's background
		/// will be or was gray; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Ghosted, IExplorerTreeView::Enabled
		[propget, id(DISPID_VTVI_GRAYED), helpstring("Retrieves whether the item is drawn as a disabled item, i. e. whether its background color is changed to gray. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Grayed([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether an expando is drawn next to the item</em>
		///
		/// Retrieves whether a "+" or "-" will be or was drawn next to the item indicating that the item
		/// will have or had sub-items. Any of the values defined by the \c HasExpandoConstants enumeration
		/// is valid. If set to \c heCallback, the control will fire the \c ItemGetDisplayInfo event each
		/// time this property's value is required.
		///
		/// \remarks This property is read-only.
		///
		/// \sa _IExplorerTreeViewEvents::ItemGetDisplayInfo, HasExpandoConstants,
		///     IExplorerTreeView::TreeViewStyle, IExplorerTreeView::FadeExpandos
		[propget, id(DISPID_VTVI_HASEXPANDO), helpstring("Retrieves whether a \"+\" or \"-\" is drawn next to the item indicating that the item has sub-items. If set to 'heCallback', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT HasExpando([out, retval] HasExpandoConstants* pValue);
		/// \brief <em>Retrieves the item's height multiplier</em>
		///
		/// Retrieves the item's height in multiples of the control's basic item height. E. g. a value of 2
		/// means that the item will be or was twice as high as an item with \c HeighIncrement set to 1.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerTreeView::ItemHeight
		[propget, id(DISPID_VTVI_HEIGHTINCREMENT), helpstring("Retrieves the item's height in multiples of the control's basic item height (ExplorerTreeView.ItemHeight property).")]
		HRESULT HeightIncrement([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's icon</em>
		///
		/// Retrieves the zero-based index of the item's icon in the control's \c ilItems imagelist. If set to
		/// -1, the control will fire the \c ItemGetDisplayInfo event each time this property's value is
		/// required.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerTreeView::hImageList, _IExplorerTreeViewEvents::ItemGetDisplayInfo,
		///     SelectedIconIndex, ExpandedIconIndex, OverlayIndex, StateImageIndex, ImageListConstants
		[propget, id(DISPID_VTVI_ICONINDEX), helpstring("Retrieves the zero-based index of the item's icon in the control's 'ilItems' imagelist. If set to -1, the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required."), nonbrowsable]
		HRESULT IconIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's associated data</em>
		///
		/// Retrieves the \c Long value that will be or was associated with the item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa _IExplorerTreeViewEvents::FreeItemData
		[propget, id(DISPID_VTVI_ITEMDATA), helpstring("Retrieves the Long value associated with the item.")]
		HRESULT ItemData([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's indentation level</em>
		///
		/// Retrieves the item's zero-based indentation level. An item's indentation level is its parent
		/// item's indentation level incremented by 1. A value of 0 means that the item doesn't have any
		/// parent item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ParentItem, IExplorerTreeView::Indent
		[propget, id(DISPID_VTVI_LEVEL), helpstring("Retrieves the item's zero-based indentation level.")]
		HRESULT Level([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's proceeding item with the same parent item</em>
		///
		/// Retrieves the item that will be or was this item's proceeding item with the same immediate
		/// parent item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ITreeViewItem, PreviousSiblingItem, ParentItem
		[propget, id(DISPID_VTVI_NEXTSIBLINGITEM), helpstring("Retrieves the item's proceeding item with the same immediate parent item."), nonbrowsable]
		HRESULT NextSiblingItem([out, retval] ITreeViewItem** ppNextItem);
		/// \brief <em>Retrieves the item's overlay icon</em>
		///
		/// Retrieves the one-based index of the item's overlay icon in the control's \c ilItems imagelist. An
		/// index of 0 means that no overlay will be or was drawn for this item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerTreeView::hImageList, IconIndex, SelectedIconIndex, ExpandedIconIndex,
		///     StateImageIndex, ImageListConstants
		[propget, id(DISPID_VTVI_OVERLAYINDEX), helpstring("Retrieves the one-based index of the overlay icon in the control's 'ilItems' imagelist. If set to 0, no overlay is drawn for this item."), nonbrowsable]
		HRESULT OverlayIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's parent item</em>
		///
		/// Retrieves the item that will be or was this item's immediate parent item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ITreeViewItem
		[propget, id(DISPID_VTVI_PARENTITEM), helpstring("Retrieves the item's immediate parent item."), nonbrowsable]
		HRESULT ParentItem([out, retval] ITreeViewItem** ppParentItem);
		/// \brief <em>Retrieves the item's preceding item with the same parent item</em>
		///
		/// Retrieves the item that will be or was this item's preceding item with the same immediate
		/// parent item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ITreeViewItem, NextSiblingItem, ParentItem
		[propget, id(DISPID_VTVI_PREVIOUSSIBLINGITEM), helpstring("Retrieves the item's preceding item with the same immediate parent item."), nonbrowsable]
		HRESULT PreviousSiblingItem([out, retval] ITreeViewItem** ppPreviousItem);
		/// \brief <em>Retrieves whether the item is selected</em>
		///
		/// Retrieves whether the item will be or was drawn as a selected item, i. e. whether its
		/// background will be or was highlighted. If this property is set to \c True, the item will be
		/// or was highlighted; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa DropHilited
		[propget, id(DISPID_VTVI_SELECTED), helpstring("Retrieves whether the item is drawn as a selected item.")]
		HRESULT Selected([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves the icon that is displayed next to the item if the item is selected</em>
		///
		/// Retrieves the zero-based index of the item's selected icon in the control's \c ilItems imagelist.
		/// The selected icon is used instead of the normal icon identified by the \c IconIndex property if the
		/// item becomes or was the caret item.\n
		/// If set to -1, the control will fire the \c ItemGetDisplayInfo event each time this property's
		/// value is required.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerTreeView::hImageList, _IExplorerTreeViewEvents::ItemGetDisplayInfo, IconIndex,
		///     ExpandedIconIndex, OverlayIndex, StateImageIndex, ImageListConstants
		[propget, id(DISPID_VTVI_SELECTEDICONINDEX), helpstring("Retrieves the zero-based index of the item's icon in the control's imagelist that is used if the item is the control's caret item."), nonbrowsable]
		HRESULT SelectedIconIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's state image</em>
		///
		/// Retrieves the one-based index of the item's state image in the control's \c ilState imagelist.
		/// The state image is drawn next to the item and usually a checkbox.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerTreeView::hImageList, IconIndex, SelectedIconIndex, ExpandedIconIndex, OverlayIndex,
		///     ImageListConstants
		[propget, id(DISPID_VTVI_STATEIMAGEINDEX), helpstring("Retrieves the one-based index of the item's state image in the control's 'ilState' imagelist."), nonbrowsable]
		HRESULT StateImageIndex([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's text</em>
		///
		/// Retrieves the item's text. The maximum number of characters in this text is 260. If set to
		/// \c vbNullString, the control will fire the \c ItemGetDisplayInfo event each time this property's
		/// value is required.
		///
		/// \remarks This is the default property of the \c IVirtualTreeViewItem interface.\n
		///          This property is read-only.
		///
		/// \sa _IExplorerTreeViewEvents::ItemGetDisplayInfo, GetPath
		[propget, id(DISPID_VTVI_TEXT), helpstring("Retrieves the item's text. If set to 'vbNullString', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Text([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves whether the item is a virtual (i. e. invisible) item</em>
		///
		/// Retrieves whether the item will be or was treated as not existent when drawing the treeview. If
		/// this property is set to \c True, the item won't be or was not drawn. Instead its sub-items will be
		/// or were drawn at this item's position. If this property is set to \c False, the item and its
		/// sub-items will be or were drawn normally.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Ghosted
		[propget, id(DISPID_VTVI_VIRTUAL), helpstring("Retrieves whether the item is treated as not existent when drawing the treeview. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Virtual([out, retval] VARIANT_BOOL* pValue);

		/// \brief <em>Retrieves the item's path</em>
		///
		/// Retrieves a string of the form ...\\a\\b\\c where c is this item's text, b is its parent item's
		/// text, c is b's parent item's text and so on. The separator is definable and defaults to "\".
		///
		/// \param[in] separator The \c String specifying the separator to use. If not specified, a
		///            backslash (\\) is used.
		///
		/// \sa Text
		[id(DISPID_VTVI_GETPATH), helpstring("Retrieves the item's path.")]
		HRESULT GetPath([in, defaultvalue("\\")] BSTR* separator, [out, retval] BSTR* pPath);
	}


	/// \interface ITreeViewItem
	/// \brief <em>Wraps an existing item</em>
	///
	/// This interface is a wrapper around a treeview item that - unlike an item wrapped by
	/// \c IVirtualTreeViewItem - really exists within the control.
	///
	/// \sa _ITreeViewItemEvents, IVirtualTreeViewItem, ITreeViewItems, ITreeViewItemContainer,
	///     IExplorerTreeView, _IExplorerTreeViewEvents
	[
		object,
		uuid(58DA40A3-1ED7-423a-8A00-4EC3C1E1D1FE),
		dual,
		nonextensible,
		helpstring("ITreeViewItem interface"),
		pointer_default(unique)
	]
	interface ITreeViewItem : IDispatch
	{
		/// \brief <em>Retrieves the item's accessibility ID</em>
		///
		/// Retrieves the item's accessibility ID which is used to identify the item in an accessibility
		/// explorer.
		///
		/// \remarks Requires comctl32.dll version 6.0 or higher.\n
		///          This property is read-only.
		///
		/// \sa Handle, ID, ItemIdentifierTypeConstants
		[propget, id(DISPID_TVI_ACCESSIBILITYID), helpstring("Retrieves the item's accessibility identifier. Requires comctl32.dll version 6.0 or higher.")]
		HRESULT AccessibilityID([out, retval] LONG* pValue);
		/// \brief <em>Specifies whether the item's text is drawn in bold font</em>
		///
		/// Retrieves or sets whether the item's text is drawn in bold font. If this property is set
		/// to \c True, the item's text is drawn in bold font; otherwise it's drawn in normal font.
		///
		/// \sa Text
		[propget, id(DISPID_TVI_BOLD), helpstring("Retrieves or sets whether the item's text is drawn in bold font.")]
		HRESULT Bold([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_TVI_BOLD), helpstring("Retrieves or sets whether the item's text is drawn in bold font.")]
		HRESULT Bold([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves whether the item is the control's caret item</em>
		///
		/// Retrieves whether the item is the control's caret item, i. e. it has the focus. If it is the
		/// caret item, this property is set to \c True; otherwise it's set to \c False.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Selected, IExplorerTreeView::CaretItem
		[propget, id(DISPID_TVI_CARET), helpstring("Retrieves whether the item is the current caret item, i. e. it has the focus.")]
		HRESULT Caret([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Retrieves whether the item is highlighted as drop target</em>
		///
		/// Retrieves whether the item is drawn as the target of a drag'n'drop operation, i. e. whether
		/// its background is highlighted. If this property is set to \c True, the item is highlighted;
		/// otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IExplorerTreeView::DropHilitedItem, Selected
		[propget, id(DISPID_TVI_DROPHILITED), helpstring("Retrieves whether the item is highlighted as a target of a drag'n'drop operation.")]
		HRESULT DropHilited([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies the icon that is displayed next to the item if it is expanded</em>
		///
		/// Retrieves or sets the zero-based index of the item's expanded icon in the control's \c ilItems
		/// imagelist. The expanded icon is used instead of the normal icon identified by the \c IconIndex
		/// property if the item is expanded. If set to -1, the control will fire the \c ItemGetDisplayInfo
		/// event each time this property's value is required.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IExplorerTreeView::hImageList, _IExplorerTreeViewEvents::ItemGetDisplayInfo, IconIndex,
		///     SelectedIconIndex, OverlayIndex, StateImageIndex, ExpansionState, ImageListConstants
		[propget, id(DISPID_TVI_EXPANDEDICONINDEX), helpstring("Retrieves the zero-based index of the item's icon in the control's imagelist that is used if the item is expanded. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT ExpandedIconIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_TVI_EXPANDEDICONINDEX), helpstring("Retrieves the zero-based index of the item's icon in the control's imagelist that is used if the item is expanded. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT ExpandedIconIndex([in] LONG newValue);
		/// \brief <em>Specifies the item's expansion state</em>
		///
		/// Retrieves or sets whether (and how) the item is expanded. Any of the values defined by the
		/// \c ExpansionStateConstants enumeration is valid.
		///
		/// \sa ExpandedIconIndex, ExpansionStateConstants
		[propget, id(DISPID_TVI_EXPANSIONSTATE), helpstring("Retrieves or sets whether (and how) the item is or was expanded.")]
		HRESULT ExpansionState([out, retval] ExpansionStateConstants* pValue);
		[propput, id(DISPID_TVI_EXPANSIONSTATE), helpstring("Retrieves or sets whether (and how) the item is or was expanded.")]
		HRESULT ExpansionState([in] ExpansionStateConstants newValue);
		/// \brief <em>Retrieves the item's first immediate sub-item</em>
		///
		/// Retrieves the item that is this item's first immediate sub-item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa LastSubItem, SubItems
		[propget, id(DISPID_TVI_FIRSTSUBITEM), helpstring("Retrieves the item's first immediate sub-item."), nonbrowsable]
		HRESULT FirstSubItem([out, retval] ITreeViewItem** ppFirstSubItem);
		/// \brief <em>Specifies whether the item's icon is drawn semi-transparent</em>
		///
		/// Retrieves or sets whether the item's icon is drawn semi-transparent. If this property
		/// is set to \c True, the item's icon is drawn semi-transparent; otherwise it's drawn
		/// normal. Usually you make items ghosted if they're hidden or selected for a cut-paste-operation.
		///
		/// \sa Virtual, Grayed, IconIndex
		[propget, id(DISPID_TVI_GHOSTED), helpstring("Retrieves or sets whether the item's icon is drawn semi-transparent.")]
		HRESULT Ghosted([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_TVI_GHOSTED), helpstring("Retrieves or sets whether the item's icon is drawn semi-transparent.")]
		HRESULT Ghosted([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the item is drawn as a disabled item</em>
		///
		/// Retrieves or sets whether the item is drawn as a disabled item, i. e. whether its background color
		/// is changed to gray. If this property is set to \c True, the item's background is gray; otherwise
		/// not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa Ghosted, IExplorerTreeView::Enabled
		[propget, id(DISPID_TVI_GRAYED), helpstring("Retrieves or sets whether the item is drawn as a disabled item, i. e. whether its background color is changed to gray. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Grayed([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_TVI_GRAYED), helpstring("Retrieves or sets whether the item is drawn as a disabled item, i. e. whether its background color is changed to gray. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Grayed([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the item's identifying handle</em>
		///
		/// Retrieves a handle identifying this item.
		///
		/// \remarks Although moving an item changes its handle, the handle is the best (and fastest)
		///          option to identify an item.\n
		///          This property is read-only.
		///
		/// \sa AccessibilityID, ID, ItemIdentifierTypeConstants
		[propget, id(DISPID_TVI_HANDLE), helpstring("Retrieves the item's handle.")]
		HRESULT Handle([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Specifies whether an expando is drawn next to the item</em>
		///
		/// Retrieves or sets whether a "+" or "-" is drawn next to the item indicating that the item has
		/// sub-items. Any of the values defined by the \c HasExpandoConstants enumeration is valid. If set to
		/// \c heCallback, the control will fire the \c ItemGetDisplayInfo event each time this property's
		/// value is required.
		///
		/// \sa _IExplorerTreeViewEvents::ItemGetDisplayInfo, HasExpandoConstants, SubItems,
		///     IExplorerTreeView::TreeViewStyle, IExplorerTreeView::FadeExpandos
		[propget, id(DISPID_TVI_HASEXPANDO), helpstring("Retrieves or sets whether a \"+\" or \"-\" is drawn next to the item indicating that the item has sub-items. If set to 'heCallback', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT HasExpando([out, retval] HasExpandoConstants* pValue);
		[propput, id(DISPID_TVI_HASEXPANDO), helpstring("Retrieves or sets whether a \"+\" or \"-\" is drawn next to the item indicating that the item has sub-items. If set to 'heCallback', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT HasExpando([in] HasExpandoConstants newValue);
		/// \brief <em>Specifies the item's height multiplier</em>
		///
		/// Retrieves or sets the item's height in multiples of the control's basic item height. E. g. a value
		/// of 2 means that the item is twice as high as an item with \c HeighIncrement set to 1.
		///
		/// \sa IExplorerTreeView::ItemHeight
		[propget, id(DISPID_TVI_HEIGHTINCREMENT), helpstring("Retrieves or sets the item's height in multiples of the control's basic item height (ExplorerTreeView.ItemHeight property).")]
		HRESULT HeightIncrement([out, retval] LONG* pValue);
		[propput, id(DISPID_TVI_HEIGHTINCREMENT), helpstring("Retrieves or sets the item's height in multiples of the control's basic item height (ExplorerTreeView.ItemHeight property).")]
		HRESULT HeightIncrement([in] LONG newValue);
		/// \brief <em>Specifies the item's icon</em>
		///
		/// Retrieves or sets the zero-based index of the item's icon in the control's \c ilItems imagelist. If
		/// set to -1, the control will fire the \c ItemGetDisplayInfo event each time this property's value is
		/// required.
		///
		/// \sa IExplorerTreeView::hImageList, _IExplorerTreeViewEvents::ItemGetDisplayInfo,
		///     SelectedIconIndex, ExpandedIconIndex, OverlayIndex, StateImageIndex, ImageListConstants
		[propget, id(DISPID_TVI_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the item's icon in the control's 'ilItems' imagelist. If set to -1, the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required."), nonbrowsable]
		HRESULT IconIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_TVI_ICONINDEX), helpstring("Retrieves or sets the zero-based index of the item's icon in the control's 'ilItems' imagelist. If set to -1, the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required."), nonbrowsable]
		HRESULT IconIndex([in] LONG newValue);
		/// \brief <em>Retrieves the item's ID</em>
		///
		/// Retrieves an unique ID identifying this item.
		///
		/// \remarks An item's ID will never change.\n
		///          This property is read-only.
		///
		/// \sa AccessibilityID, Handle, ItemIdentifierTypeConstants
		[propget, id(DISPID_TVI_ID), helpstring("Retrieves the item's unique ID.")]
		HRESULT ID([out, retval] LONG* pValue);
		/// \brief <em>Specifies the item's associated data</em>
		///
		/// Retrieves or sets the \c Long value associated with the item. Use this property to associate
		/// any data with the item.
		///
		/// \sa _IExplorerTreeViewEvents::FreeItemData
		[propget, id(DISPID_TVI_ITEMDATA), helpstring("Retrieves or sets the Long value associated with the item.")]
		HRESULT ItemData([out, retval] LONG* pValue);
		[propput, id(DISPID_TVI_ITEMDATA), helpstring("Retrieves or sets the Long value associated with the item.")]
		HRESULT ItemData([in] LONG newValue);
		/// \brief <em>Retrieves the item's last immediate sub-item</em>
		///
		/// Retrieves the item that is this item's last immediate sub-item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa FirstSubItem, SubItems
		[propget, id(DISPID_TVI_LASTSUBITEM), helpstring("Retrieves the item's last immediate sub-item."), nonbrowsable]
		HRESULT LastSubItem([out, retval] ITreeViewItem** ppLastSubItem);
		/// \brief <em>Retrieves the item's indentation level</em>
		///
		/// Retrieves the item's zero-based indentation level. An item's indentation level is its parent
		/// item's indentation level incremented by 1. A value of 0 means that the item doesn't have any
		/// parent item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ParentItem, IExplorerTreeView::Indent
		[propget, id(DISPID_TVI_LEVEL), helpstring("Retrieves the item's zero-based indentation level.")]
		HRESULT Level([out, retval] LONG* pValue);
		/// \brief <em>Retrieves the item's proceeding item with the same parent item</em>
		///
		/// Retrieves the item being this item's proceeding item with the same immediate parent item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa PreviousSiblingItem, NextVisibleItem, ParentItem
		[propget, id(DISPID_TVI_NEXTSIBLINGITEM), helpstring("Retrieves the item being this item's proceeding item with the same immediate parent item."), nonbrowsable]
		HRESULT NextSiblingItem([out, retval] ITreeViewItem** ppNextItem);
		/// \brief <em>Retrieves the item's proceeding item</em>
		///
		/// Retrieves the item being this item's proceeding item. The immediate parent item is not
		/// necessarily the same.
		///
		/// \remarks This property is read-only.
		///
		/// \sa PreviousVisibleItem, NextSiblingItem
		[propget, id(DISPID_TVI_NEXTVISIBLEITEM), helpstring("Retrieves the item being this item's proceeding item."), nonbrowsable]
		HRESULT NextVisibleItem([out, retval] ITreeViewItem** ppNextItem);
		/// \brief <em>Specifies the item's overlay icon</em>
		///
		/// Retrieves the one-based index of the item's overlay icon in the control's \c ilItems imagelist. An
		/// index of 0 means that no overlay is drawn for this item.
		///
		/// \sa IExplorerTreeView::hImageList, IconIndex, SelectedIconIndex, ExpandedIconIndex,
		///     StateImageIndex, ImageListConstants
		[propget, id(DISPID_TVI_OVERLAYINDEX), helpstring("Retrieves the one-based index of the overlay icon in the control's 'ilItems' imagelist. If set to 0, no overlay is drawn for this item."), nonbrowsable]
		HRESULT OverlayIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_TVI_OVERLAYINDEX), helpstring("Retrieves the one-based index of the overlay icon in the control's 'ilItems' imagelist. If set to 0, no overlay is drawn for this item."), nonbrowsable]
		HRESULT OverlayIndex([in] LONG newValue);
		// \brief <em>Specifies the size of the item's padding</em>
		//
		// Retrieves or sets the distance (in pixels) between the item's content and the control's border.
		//
		// \remarks Requires comctl32.dll version 6.10 or higher.
		//
		// \sa IExplorerTreeView::ItemXBorder, IExplorerTreeView::ItemYBorder
		/*TODO: [propget, id(DISPID_TVI_PADDING), helpstring("Retrieves or sets the distance (in pixels) between the item's content and the control's border. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT Padding([out, retval] LONG* pValue);
		[propput, id(DISPID_TVI_PADDING), helpstring("Retrieves or sets the distance (in pixels) between the item's content and the control's border. Requires comctl32.dll version 6.10 or higher."), nonbrowsable]
		HRESULT Padding([in] LONG newValue);*/
		/// \brief <em>Retrieves the item's parent item</em>
		///
		/// Retrieves the item being this item's immediate parent item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Move
		[propget, id(DISPID_TVI_PARENTITEM), helpstring("Retrieves the item being this item's immediate parent item."), nonbrowsable]
		HRESULT ParentItem([out, retval] ITreeViewItem** ppParentItem);
		/// \brief <em>Specifies the item's preceding item with the same parent item</em>
		///
		/// Retrieves or sets the item being this item's preceding item with the same immediate parent
		/// item. If set to \c Nothing, the item becomes the first item in its branch.
		///
		/// \sa NextSiblingItem, PreviousVisibleItem, ParentItem, Move
		[propget, id(DISPID_TVI_PREVIOUSSIBLINGITEM), helpstring("Retrieves or sets the item being this item's preceding item with the same immediate parent item."), nonbrowsable]
		HRESULT PreviousSiblingItem([out, retval] ITreeViewItem** ppPreviousItem);
		[propputref, id(DISPID_TVI_PREVIOUSSIBLINGITEM), helpstring("Retrieves or sets the item being this item's preceding item with the same immediate parent item."), nonbrowsable]
		HRESULT PreviousSiblingItem([in] ITreeViewItem* pNewPreviousItem);
		/// \brief <em>Retrieves the item's preceding item</em>
		///
		/// Retrieves the item being this item's preceding item. The immediate parent item is not
		/// necessarily the same.
		///
		/// \remarks This property is read-only.
		///
		/// \sa NextVisibleItem, PreviousSiblingItem
		[propget, id(DISPID_TVI_PREVIOUSVISIBLEITEM), helpstring("Retrieves the item being this item's preceding item."), nonbrowsable]
		HRESULT PreviousVisibleItem([out, retval] ITreeViewItem** ppPreviousItem);
		/// \brief <em>Retrieves whether the item is selected</em>
		///
		/// Retrieves whether the item is drawn as a selected item, i. e. whether its background is
		/// highlighted. If this property is set to \c True, the item is highlighted; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa Caret, DropHilited, IExplorerTreeView::CaretItem,
		///     _IExplorerTreeViewEvents::ItemSelectionChanging, _IExplorerTreeViewEvents::ItemSelectionChanged
		[propget, id(DISPID_TVI_SELECTED), helpstring("Retrieves whether the item is drawn as a selected item.")]
		HRESULT Selected([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies the icon that is displayed next to the item if the item is selected</em>
		///
		/// Retrieves or sets the zero-based index of the item's selected icon in the control's \c ilItems
		/// imagelist. The selected icon is used instead of the normal icon identified by the \c IconIndex
		/// property if the item is the caret item. If set to -1, the control will fire the
		/// \c ItemGetDisplayInfo event each time this property's value is required.
		///
		/// \sa IExplorerTreeView::hImageList, _IExplorerTreeViewEvents::ItemGetDisplayInfo, IconIndex,
		///     ExpandedIconIndex, OverlayIndex, StateImageIndex, ImageListConstants
		[propget, id(DISPID_TVI_SELECTEDICONINDEX), helpstring("Retrieves the zero-based index of the item's icon in the control's imagelist that is used if the item is the control's caret item."), nonbrowsable]
		HRESULT SelectedIconIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_TVI_SELECTEDICONINDEX), helpstring("Retrieves the zero-based index of the item's icon in the control's imagelist that is used if the item is the control's caret item."), nonbrowsable]
		HRESULT SelectedIconIndex([in] LONG newValue);
		#ifdef INCLUDESHELLBROWSERINTERFACE
			/// \brief <em>Retrieves the treeview item's corresponding \c ShellTreeViewItem object</em>
			///
			/// Retrieves the \c ShellTreeViewItem object of this treeview item from the attached
			/// \c ShellTreeView control.
			///
			/// \remarks This property is read-only.
			[propget, id(DISPID_TVI_SHELLTREEVIEWITEMOBJECT), helpstring("Retrieves the treeview item's corresponding 'ShellTreeViewItem' object."), nonbrowsable]
			HRESULT ShellTreeViewItemObject([out, retval] IDispatch** ppItem);
		#endif
		/// \brief <em>Specifies the item's state image</em>
		///
		/// Retrieves or sets the one-based index of the item's state image in the control's \c ilState
		/// imagelist. The state image is drawn next to the item and usually a checkbox.
		///
		/// \sa IExplorerTreeView::hImageList, IconIndex, SelectedIconIndex, ExpandedIconIndex, OverlayIndex,
		///     ImageListConstants
		[propget, id(DISPID_TVI_STATEIMAGEINDEX), helpstring("Retrieves or sets the one-based index of the item's state image in the control's 'ilState' imagelist."), nonbrowsable]
		HRESULT StateImageIndex([out, retval] LONG* pValue);
		[propput, id(DISPID_TVI_STATEIMAGEINDEX), helpstring("Retrieves or sets the one-based index of the item's state image in the control's 'ilState' imagelist."), nonbrowsable]
		HRESULT StateImageIndex([in] LONG newValue);
		/// \brief <em>Retrieves the item's immediate sub-items</em>
		///
		/// Retrieves a collection object wrapping all immediate sub-items of this item.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ITreeViewItems, FirstSubItem
		[propget, id(DISPID_TVI_SUBITEMS), helpstring("Retrieves a collection object wrapping all immediate sub-items of this item."), nonbrowsable]
		HRESULT SubItems([out, retval] ITreeViewItems** ppSubItems);
		/// \brief <em>Specifies the item's text</em>
		///
		/// Retrieves or sets the item's text. The maximum number of characters in this text is 260. If set to
		/// \c vbNullString, the control will fire the \c ItemGetDisplayInfo event each time this property's
		/// value is required.
		///
		/// \remarks This is the default property of the \c ITreeViewItem interface.
		///
		/// \sa _IExplorerTreeViewEvents::ItemGetDisplayInfo, GetPath, IsTruncated
		[propget, id(DISPID_TVI_TEXT), helpstring("Retrieves or sets the item's text. If set to 'vbNullString', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Text([out, retval] BSTR* pValue);
		[propput, id(DISPID_TVI_TEXT), helpstring("Retrieves or sets the item's text. If set to 'vbNullString', the control will fire the 'ItemGetDisplayInfo' event each time this property's value is required.")]
		HRESULT Text([in] BSTR newValue);
		/// \brief <em>Retrieves whether the item is a virtual (i. e. invisible) item</em>
		///
		/// Retrieves whether the item is treated as not existent when drawing the treeview. If this property
		/// is set to \c True, the item is not drawn. Instead its sub-items are drawn at this item's position.
		/// If this property is set to \c False, the item and its sub-items are drawn normally.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          This property is read-only.
		///
		/// \sa Ghosted
		[propget, id(DISPID_TVI_VIRTUAL), helpstring("Retrieves whether the item is treated as not existent when drawing the treeview. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT Virtual([out, retval] VARIANT_BOOL* pValue);

		/// \brief <em>Collapses the item's immediate sub-items</em>
		///
		/// \param[in] removeSubItems Specifies whether to remove all immediate sub-items. If set to
		///            \c False, the items are collapsed, but not removed; otherwise the items are removed.
		///
		/// \sa Expand, ExpansionState, SubItems
		[id(DISPID_TVI_COLLAPSE), helpstring("Collapses the item's immediate sub-items.")]
		HRESULT Collapse([in, defaultvalue(0)] VARIANT_BOOL removeSubItems);
		/// \brief <em>Retrieves whether calling \c Move with the specified parameters would succeed</em>
		///
		/// \param[in] newParentItem The new parent item. If set to \c Nothing, the item would become a
		///            root item.
		/// \param[in] insertAfter A \c Variant value specifying the item's new preceding item. This may
		///            be either a \c TreeViewItem object or a handle returned by \c ITreeViewItem::Handle
		///            or any of the values defined by the \c InsertAfterConstants enumeration. If set to
		///            \c Empty, the item would become the last item in the new branch.
		///
		/// \return \c True, if calling \c Move with the same parameters would succeed; otherwise \c False.
		///
		/// \remarks This method does <strong>not</strong> move the item.
		///
		/// \sa Move, ParentItem, PreviousSiblingItem
		[id(DISPID_TVI_COULDMOVETO), helpstring("Retrieves whether calling 'Move' with the specified parameters would succeed.")]
		HRESULT CouldMoveTo([in] ITreeViewItem* newParentItem, [in] VARIANT insertAfter, [out, retval] VARIANT_BOOL* pCouldMove);
		/// \brief <em>Retrieves an imagelist containing the item's drag image</em>
		///
		/// Retrieves the handle to an imagelist containing a bitmap that can be used to visualize
		/// dragging of this item.
		///
		/// \param[out] xUpperLeft The x-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the control's upper-left corner.
		/// \param[out] yUpperLeft The y-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the control's upper-left corner.
		///
		/// \return The handle to the imagelist containing the bitmap.
		///
		/// \remarks The caller is responsible for destroying the imagelist.
		[id(DISPID_TVI_CREATEDRAGIMAGE), helpstring("Retrieves the handle to an imagelist containing a bitmap that can be used to visualize dragging of this item.")]
		HRESULT CreateDragImage([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xUpperLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yUpperLeft, [out, retval] OLE_HANDLE* phImageList);
		/// \brief <em>Displays the item's info tip</em>
		///
		/// \remarks This method has no effect if the mouse cursor isn't located over the item.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa IExplorerTreeView::ShowToolTips, _IExplorerTreeViewEvents::ItemGetInfoTipText
		[id(DISPID_TVI_DISPLAYINFOTIP), helpstring("Displays the item's info tip. This method has no effect if the mouse cursor isn't located over the item. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DisplayInfoTip(void);
		/// \brief <em>Ensures the item is visible</em>
		///
		/// Ensures that the item is visible, expanding the parent item or scrolling the treeview, if
		/// necessary.
		///
		/// \return \c True, if any items were expanded; otherwise \c False.
		///
		/// \sa Expand
		[id(DISPID_TVI_ENSUREVISIBLE), helpstring("Ensures that the item is visible, expanding the parent item or scrolling the treeview, if necessary. Returns 'True' if any items were expanded.")]
		HRESULT EnsureVisible([out, retval] VARIANT_BOOL* pExpandedItems);
		/// \brief <em>Expands the item's immediate sub-items</em>
		///
		/// \param[in] expandPartial Specifies whether to replace the "+" button next to the item with
		///            a "-" button. If set to \c False, the button is changed to "-"; otherwise not.
		///
		/// \sa Collapse, ExpansionState, SubItems
		[id(DISPID_TVI_EXPAND), helpstring("Expands the item's immediate sub-items.")]
		HRESULT Expand([in, defaultvalue(0)] VARIANT_BOOL expandPartial);
		/// \brief <em>Retrieves the item's path</em>
		///
		/// Retrieves a string of the form ...\\a\\b\\c where c is this item's text, b is its parent item's
		/// text, a is b's parent item's text and so on. The separator is customizable and defaults to "\".
		///
		/// \param[in] separator The \c String specifying the separator to use. If not specified, a
		///            backslash (\\) is used.
		///
		/// \return A \c String containing the path.
		///
		/// \sa Text, ITreeViewItems::FindByPath
		[id(DISPID_TVI_GETPATH), helpstring("Retrieves the item's path.")]
		HRESULT GetPath([in, defaultvalue("\\")] BSTR* separator, [out, retval] BSTR* pPath);
		/// \brief <em>Retrieves the bounding rectangle of either the item or a part of it</em>
		///
		/// Retrieves the bounding rectangle (in pixels relative to the control's client area) of either the
		/// item or a part of it.
		///
		/// \param[in] rectangleType The rectangle to retrieve. Any of the values defined by the
		///            \c ItemRectangleTypeConstants enumeration is valid.
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \sa ItemRectangleTypeConstants
		[id(DISPID_TVI_GETRECTANGLE), helpstring("Retrieves the bounding rectangle (in pixels relative to the control's client area) of either the item or a part of it.")]
		HRESULT GetRectangle(ItemRectangleTypeConstants rectangleType, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
		/// \brief <em>Retrieves whether the item's text is truncated</em>
		///
		/// \return \c True, if the item's text is truncated; otherwise \c False.
		///
		/// \sa Text
		[id(DISPID_TVI_ISTRUNCATED), helpstring("Retrieves whether the item's text is truncated.")]
		HRESULT IsTruncated([out, retval] VARIANT_BOOL* pTruncated);
		/// \brief <em>Sets the \c ParentItem and \c PreviousSiblingItem properties</em>
		///
		/// Moves the item to the branch with the specified immediate parent item. It will be inserted
		/// after the specified item.
		///
		/// \param[in] newParentItem The new parent item. If set to \c Nothing, the item becomes a root
		///            item.
		/// \param[in] insertAfter A \c Variant value specifying the item's new preceding item. This may
		///            be either a \c TreeViewItem object or a handle returned by \c ITreeViewItem::Handle
		///            or any of the values defined by the \c InsertAfterConstants enumeration. If set to
		///            \c Empty, the item becomes the last item in the new branch.
		///
		/// \sa CouldMoveTo, ParentItem, PreviousSiblingItem
		[id(DISPID_TVI_MOVE), helpstring("Sets the 'ParentItem' and 'PreviousSiblingItem' properties.")]
		HRESULT Move([in] ITreeViewItem* newParentItem, [in] VARIANT insertAfter);
		/// \brief <em>Sorts the item's sub-items</em>
		///
		/// Sorts the item's sub-items by up to 5 criteria.
		///
		/// \param[in] firstCriterion The first criterion by which to sort. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] secondCriterion The second criterion by which to sort. It is used if two items are
		///            equivalent regarding the first criterion. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] thirdCriterion The third criterion by which to sort. It is used if two items are
		///            equivalent regarding the first 2 criteria. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] fourthCriterion The fourth criterion by which to sort. It is used if two items are
		///            equivalent regarding the first 3 criteria. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] fifthCriterion The fifth criterion by which to sort. It is used if two items are
		///            equivalent regarding the first 4 criteria. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] recurse If set to \c False, only the item's immediate sub-items will be sorted;
		///            otherwise all sub-items will be sorted recursively.
		/// \param[in] caseSensitive If set to \c True, text comparisons will be case sensitive; otherwise
		///            not.
		///
		/// \sa IExplorerTreeView::SortOrder, IExplorerTreeView::SortItems,
		///     _IExplorerTreeViewEvents::CompareItems, SortByConstants
		[id(DISPID_TVI_SORTSUBITEMS), helpstring("Sorts the item's sub-items.")]
		HRESULT SortSubItems([in, defaultvalue(sobShell)] SortByConstants firstCriterion, [in, defaultvalue(sobText)] SortByConstants secondCriterion, [in, defaultvalue(sobNone)] SortByConstants thirdCriterion, [in, defaultvalue(sobNone)] SortByConstants fourthCriterion, [in, defaultvalue(sobNone)] SortByConstants fifthCriterion, [in, defaultvalue(0)] VARIANT_BOOL recurse, [in, defaultvalue(0)] VARIANT_BOOL caseSensitive);
		/// \brief <em>Starts editing the item's text</em>
		///
		/// \sa IExplorerTreeView::EndLabelEdit, IExplorerTreeView::hWndEdit,
		///     _IExplorerTreeViewEvents::StartingLabelEditing, _IExplorerTreeViewEvents::RenamingItem
		[id(DISPID_TVI_STARTLABELEDITING), helpstring("Starts editing the item's text.")]
		HRESULT StartLabelEditing(void);
	}


	/// \interface ITreeViewItems
	/// \brief <em>Manages a collection of \c TreeViewItem objects</em>
	///
	/// This interface provides easy access (including filtering) to collections of \c TreeViewItem
	/// objects. While a \c TreeViewItemContainer object is used to group any items and acts more like
	/// a clipboard, a \c TreeViewItems object is used to group items that have certain properties in
	/// common.
	///
	/// \sa _ITreeViewItemsEvents, ITreeViewItem, ITreeViewItemContainer, IExplorerTreeView
	[
		object,
		uuid(6BBAE290-798D-49de-BC99-B7B1B5699234),
		dual,
		nonextensible,
		helpstring("ITreeViewItems interface"),
		pointer_default(unique)
	]
	interface ITreeViewItems : IDispatch
	{
		/// \brief <em>Specifies whether filters for string properties are case sensitive</em>
		///
		/// Retrieves or sets whether string comparisons, that are done when applying the filters on an item,
		/// are case sensitive. If this property is set to \c True, string comparisons are case sensitive;
		/// otherwise not.
		///
		/// \sa Filter, ComparisonFunction
		[propget, id(DISPID_TVIS_CASESENSITIVEFILTERS), helpstring("Retrieves or sets whether string comparisons, that are done when applying the filters on an item, are case sensitive.")]
		HRESULT CaseSensitiveFilters([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_TVIS_CASESENSITIVEFILTERS), helpstring("Retrieves or sets whether string comparisons, that are done when applying the filters on an item, are case sensitive.")]
		HRESULT CaseSensitiveFilters([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies a filter's comparison function</em>
		///
		/// Retrieves or sets an item filter's comparison function. This property takes the address of a
		/// function having the following signature:\n
		/// \code
		///   IsEqual(ByVal itemProperty As T, ByVal pattern As T) As Long
		/// \endcode
		/// where T stands for the filtered property's type (\c Boolean, \c Long, \c String or
		/// \c ITreeViewItem). This function must compare its arguments and return a non-zero value if the
		/// arguments are equal and zero otherwise.\n
		/// If this property is set to 0, the control compares the values itself using the "=" operator
		/// (\c lstrcmp and \c lstrcmpi for string filters).
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c FilteredPropertyConstants enumeration is valid.
		///
		/// \sa Filter, CaseSensitiveFilters, FilteredPropertyConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms647488.aspx">lstrcmp</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms647489.aspx">lstrcmpi</a>
		[propget, id(DISPID_TVIS_COMPARISONFUNCTION), helpstring("Retrieves or sets an item filter's comparison function.")]
		HRESULT ComparisonFunction([in] FilteredPropertyConstants filteredProperty, [out, retval] LONG* pValue);
		[propput, id(DISPID_TVIS_COMPARISONFUNCTION), helpstring("Retrieves or sets an item filter's comparison function.")]
		HRESULT ComparisonFunction([in] FilteredPropertyConstants filteredProperty, [in] LONG newValue);
		/// \brief <em>Specifies a filter for a property</em>
		///
		/// Retrieves or sets an item filter.\n
		/// An \c ITreeViewItems collection can be filtered by any of \c ITreeViewItem's properties, that
		/// the \c FilteredPropertyConstants enumeration defines a constant for. Combinations of multiple
		/// filters are possible, too. A filter is a \c Variant containing an array whose elements are of
		/// type \c Variant. Each element of this array contains a valid value for the property, that the
		/// filter refers to.\n
		/// When applying the filter, the elements of the array are connected using the logical Or operator.\n\n
		/// Setting this property to \c Empty or any other value, that doesn't match the described structure,
		/// deactivates the filter.
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c FilteredPropertyConstants enumeration is valid.
		///
		/// \sa FilterType, ComparisonFunction, FilteredPropertyConstants
		[propget, id(DISPID_TVIS_FILTER), helpstring("Retrieves or sets an item filter.")]
		HRESULT Filter([in] FilteredPropertyConstants filteredProperty, [out, retval] VARIANT* pValue);
		[propput, id(DISPID_TVIS_FILTER), helpstring("Retrieves or sets an item filter.")]
		HRESULT Filter([in] FilteredPropertyConstants filteredProperty, [in] VARIANT newValue);
		/// \brief <em>Specifies a filter's type</em>
		///
		/// Retrieves or sets an item filter's type.
		///
		/// \param[in] filteredProperty A value specifying the property that the filter refers to. Any of the
		///            values defined by the \c FilteredPropertyConstants enumeration is valid.
		///
		/// \sa Filter, FilteredPropertyConstants, FilterTypeConstants
		[propget, id(DISPID_TVIS_FILTERTYPE), helpstring("Retrieves or sets an item filter's type.")]
		HRESULT FilterType([in] FilteredPropertyConstants filteredProperty, [out, retval] FilterTypeConstants* pValue);
		[propput, id(DISPID_TVIS_FILTERTYPE), helpstring("Retrieves or sets an item filter's type.")]
		HRESULT FilterType([in] FilteredPropertyConstants filteredProperty, [in] FilterTypeConstants newValue);
		/// \brief <em>Retrieves a \c TreeViewItem object from the collection</em>
		///
		/// Retrieves a \c TreeViewItem object from the collection that wraps the item identified by
		/// \c itemIdentifier.
		///
		/// \param[in] itemIdentifier A value that identifies the treeview item to be retrieved.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ItemIdentifierTypeConstants enumeration is valid.
		///
		/// \remarks This is the default property of the \c ITreeViewItems interface.\n
		///          This property is read-only.
		///
		/// \sa ITreeViewItem, ItemIdentifierTypeConstants, Add, Remove, Contains
		[propget, id(DISPID_TVIS_ITEM), helpstring("Retrieves a 'TreeViewItem' object from the collection that wraps the item identified by 'itemIdentifier'."), nonbrowsable]
		HRESULT Item([in] LONG itemIdentifier, [in, defaultvalue(iitHandle)] ItemIdentifierTypeConstants itemIdentifierType, [out, retval] ITreeViewItem** ppItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c TreeViewItem objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_TVIS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);
		/// \brief <em>Specifies all items' parent item</em>
		///
		/// Retrieves or sets the item being the immediate parent item of all items in the collection.
		///
		/// \remarks The collection must be restricted to a single branch and level (i. e. it's a collection
		///          retrieved through the \c IExplorerTreeView::RootItems or \c ITreeViewItem::SubItems
		///          property). Otherwise retrieving or setting the parent item will fail.
		///
		/// \sa SingleLevel, IExplorerTreeView::RootItems, ITreeViewItem::SubItems
		[propget, id(DISPID_TVIS_PARENTITEM), helpstring("Retrieves or sets all items' parent item."), nonbrowsable]
		HRESULT ParentItem([out, retval] ITreeViewItem** ppParentItem);
		[propputref, id(DISPID_TVIS_PARENTITEM), helpstring("Retrieves or sets all items' parent item."), nonbrowsable]
		HRESULT ParentItem([in] ITreeViewItem* pNewParentItem);
		/// \brief <em>Specifies whether all items in the collection have the same immediate parent item</em>
		///
		/// Retrieves whether the collection recursively dives into sub-branches while enumerating the items.
		/// If this property is set to \c False, the collection dives into sub-branches; otherwise not.
		///
		/// \remarks This property is read-only.
		///
		/// \sa ParentItem, Filter, IExplorerTreeView::RootItems, ITreeViewItem::SubItems
		[propget, id(DISPID_TVIS_SINGLELEVEL), helpstring("Retrieves whether the collection recursively dives into sub-branches while enumerating the items.")]
		HRESULT SingleLevel([out, retval] VARIANT_BOOL* pValue);

		/// \brief <em>Adds an item to the treeview</em>
		///
		/// Adds an item with the specified properties at the specified position in the control and returns
		/// a \c TreeViewItem object wrapping the inserted item.
		///
		/// \param[in] itemText The new item's caption text. The maximum number of characters in this text
		///            is 260. If set to \c vbNullString, the control will fire the \c ItemGetDisplayInfo event
		///            each time this property's value is required.
		/// \param[in] parentItem The new item's immediate parent item. If set to \c Nothing, the item
		///            will be a top-level item.
		/// \param[in] insertAfter A \c Variant value specifying the new item's preceding item. This may
		///            be either a \c TreeViewItem object or a handle returned by \c ITreeViewItem::Handle
		///            or a value defined by the \c InsertAfterConstants enumeration. If set to \c Empty,
		///            the item will be inserted after the last item that has the same immediate parent
		///            item.
		/// \param[in] hasExpando A value specifying whether to draw a "+" or "-" next to the item
		///            indicating the item has sub-items. Any of the values defined by the
		///            \c HasExpandoConstants enumeration is valid. If set to \c heCallback, the control
		///            will fire the \c ItemGetDisplayInfo event each time this property's value is required.
		/// \param[in] iconIndex The zero-based index of the item's icon in the control's \c ilItems imagelist.
		///            If set to -1, the control will fire the \c ItemGetDisplayInfo event each time this
		///            property's value is required. A value of -2 means 'not specified' and is valid if
		///            there's no imagelist associated with the control.
		/// \param[in] selectedIconIndex The zero-based index of the item's selected icon in the control's
		///            \c ilItems imagelist. This icon will be used instead of the normal icon identified by
		///            \c iconIndex if the item is the caret item. If set to -1, the control will fire the
		///            \c ItemGetDisplayInfo event each time this property's value is required. If set to -2,
		///            the normal icon specified by \c iconIndex will be used.
		/// \param[in] expandedIconIndex The zero-based index of the item's expanded icon in the control's
		///            \c ilItems imagelist. This icon will be used instead of the normal icon identified by
		///            \c iconIndex if the item is expanded. If set to -1, the control will fire the
		///            \c ItemGetDisplayInfo event each time this property's value is required. If set to -2,
		///            the normal icon specified by \c iconIndex will be used.
		/// \param[in] itemData A \c Long value that will be associated with the item.
		/// \param[in] isVirtual If set to \c True, the item will be treated as not existent when drawing the
		///            treeview and therefore won't be drawn. Instead its sub-items will be drawn at this
		///            item's position. If set to \c False, the item and its sub-items will be drawn normally.
		/// \param[in] heightIncrement The item's height in multiples of the control's basic item height.
		///            E. g. a value of 2 means that the item will be twice as high as an item with
		///            \c heighIncrement set to 1.
		///
		/// \return The inserted item.
		///
		/// \remarks The \c expandedIconIndex and \c isVirtual parameters will be ignored if comctl32.dll is
		///          used in a version older than 6.10.
		///
		/// \sa Count, Remove, RemoveAll, ITreeViewItem::Text, ITreeViewItem::ParentItem,
		///     ITreeViewItem::PreviousSiblingItem, ITreeViewItem::HasExpando,
		///     ITreeViewItem::IconIndex, ITreeViewItem::SelectedIconIndex, ITreeViewItem::ExpandedIconIndex,
		///     ITreeViewItem::ItemData, ITreeViewItem::Virtual, ITreeViewItem::HeightIncrement,
		///     IExplorerTreeView::hImageList, IExplorerTreeView::ItemHeight,
		///     _IExplorerTreeViewEvents::ItemGetDisplayInfo, InsertAfterConstants, HasExpandoConstants,
		///     ImageListConstants
		[id(DISPID_TVIS_ADD), helpstring("Adds a new item with the specified properties. 'insertAfter' must be a 'TreeViewItem' object, an item handle or a value defined by the 'InsertAfterConstants' enumeration.")]
		HRESULT Add([in] BSTR itemText, [in, defaultvalue(NULL)] ITreeViewItem* parentItem, [in, optional] VARIANT insertAfter, [in, defaultvalue(heNo)] HasExpandoConstants HasExpando, [in, defaultvalue(-2)] LONG IconIndex, [in, defaultvalue(-2)] LONG SelectedIconIndex, [in, defaultvalue(-2)] LONG ExpandedIconIndex, [in, defaultvalue(0)] LONG ItemData, [in, defaultvalue(0)] VARIANT_BOOL isVirtual, [in, defaultvalue(1)] LONG HeightIncrement, [out, retval] ITreeViewItem** ppAddedItem);
		/// \brief <em>Retrieves whether the specified item is part of the item collection</em>
		///
		/// \param[in] itemIdentifier A value that identifies the item to be checked.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ItemIdentifierTypeConstants enumeration is valid.
		///
		/// \return \c True, if the specified item is part of the collection; otherwise \c False.
		///
		/// \sa Filter, Add, Remove, ItemIdentifierTypeConstants
		[id(DISPID_TVIS_CONTAINS), helpstring("Retrieves whether the specified item is part of the item collection.")]
		HRESULT Contains([in] LONG itemIdentifier, [in, defaultvalue(iitHandle)] ItemIdentifierTypeConstants itemIdentifierType, [out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Counts the items in the collection</em>
		///
		/// Retrieves the number of \c TreeViewItem objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_TVIS_COUNT), helpstring("Retrieves the number of 'TreeViewItem' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Removes the specified item in the collection from the treeview</em>
		///
		/// \param[in] itemIdentifier A value that identifies the item to be removed.
		/// \param[in] itemIdentifierType A value specifying the meaning of \c itemIdentifier. Any of the
		///            values defined by the \c ItemIdentifierTypeConstants enumeration is valid.
		///
		/// \sa Add, Count, RemoveAll, Contains, ItemIdentifierTypeConstants
		[id(DISPID_TVIS_REMOVE), helpstring("Removes the specified item in the collection from the control.")]
		HRESULT Remove([in] LONG itemIdentifier, [in, defaultvalue(iitHandle)] ItemIdentifierTypeConstants itemIdentifierType);
		/// \brief <em>Removes all items in the collection from the treeview</em>
		///
		/// \sa Add, Count, Remove
		[id(DISPID_TVIS_REMOVEALL), helpstring("Removes all items in the collection from the control.")]
		HRESULT RemoveAll(void);
		/// \brief <em>Searches for an item by its path</em>
		///
		/// Takes a string of the form ...\\a\\b\\c, where each part represents an item's text, and searches
		/// for a corresponding item. The search starts within the sub-items of the items defined by the
		/// \c ParentItem property.\n
		/// The separator is customizable and defaults to "\".
		///
		/// \param[in] path The item path to search for.
		/// \param[in] returnDeepestMatch Specifies the behavior for the case that no exactly matching item is
		///            found. If set to \c False, no item is returned in such cases. If set to \c True, the
		///            last item that matches a part of the path, is returned.
		/// \param[in] separator The \c String specifying the separator to use. If not specified, a
		///            backslash (\\) is used.
		///
		/// \return The tree view item that matches the specified path.
		///
		/// \remarks Case sensitivity is specified by the \c CaseSensitiveFilters property. The functioned that
		///          is used for text comparison can be customized using the \c ComparisonFunction property
		///          (for the \c fpText filter).
		///
		/// \sa ITreeViewItem::GetPath, CaseSensitiveFilters, ComparisonFunction
		[id(DISPID_TVIS_FINDBYPATH), helpstring("Finds a tree view item by its path.")]
		HRESULT FindByPath([in] BSTR path, [in, defaultvalue(0)] VARIANT_BOOL returnDeepestMatch, [in, defaultvalue("\\")] BSTR* separator, [out, retval] ITreeViewItem** ppItem);
	}


	/// \interface ITreeViewItemContainer
	/// \brief <em>Manages a collection of \c TreeViewItem objects</em>
	///
	/// This interface provides easy access to collections of \c TreeViewItem objects. While a
	/// \c TreeViewItems object is used to group items that have certain properties in common, a
	/// \c TreeViewItemContainer object is used to group any items and acts more like a clipboard.
	///
	/// \sa _ITreeViewItemContainerEvents, ITreeViewItem, ITreeViewItems, IExplorerTreeView
	[
		object,
		uuid(4C938A82-B757-4a74-9475-CB4BDD22FA8A),
		dual,
		nonextensible,
		helpstring("ITreeViewItemContainer interface"),
		pointer_default(unique)
	]
	interface ITreeViewItemContainer : IDispatch
	{
		/// \brief <em>Retrieves a \c TreeViewItem object from the collection</em>
		///
		/// Retrieves a \c TreeViewItem object from the collection that wraps the item identified by
		/// \c itemID.
		///
		/// \param[in] itemID The unique ID of the item to retrieve.
		///
		/// \remarks This is the default property of the \c ITreeViewItemContainer interface.\n
		///          This property is read-only.
		///
		/// \sa ITreeViewItem::ID, Add, Remove
		[propget, id(DISPID_TVIC_ITEM), helpstring("Retrieves a 'TreeViewItem' object from the collection that wraps the item identified by 'itemID'."), nonbrowsable]
		HRESULT Item([in] LONG itemID, [out, retval] ITreeViewItem** ppItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c TreeViewItem objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_TVIC__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds the specified item(s) to the collection</em>
		///
		/// \param[in] items The item(s) to add. May be either an item ID, a \c TreeViewItem object or a
		///            \c TreeViewItems collection.
		///
		/// \sa ITreeViewItem::ID, Count, Remove, RemoveAll
		[id(DISPID_TVIC_ADD), helpstring("Adds the specified item(s) to the collection.")]
		HRESULT Add([in] VARIANT items);
		/// \brief <em>Clones the collection object</em>
		///
		/// Retrieves an exact copy of the collection.
		///
		/// \return The cloned object.
		///
		/// \sa IExplorerTreeView::CreateItemContainer
		[id(DISPID_TVIC_CLONE), helpstring("Creates an exact copy of the collection.")]
		HRESULT Clone([out, retval] ITreeViewItemContainer** ppClone);
		/// \brief <em>Counts the items in the collection</em>
		///
		/// Retrieves the number of \c TreeViewItem objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_TVIC_COUNT), helpstring("Retrieves the number of 'TreeViewItem' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Retrieves an imagelist containing the items' common drag image</em>
		///
		/// Retrieves the handle to an imagelist containing a bitmap that can be used to visualize
		/// dragging of the items of this collection.
		///
		/// \param[out] xUpperLeft The x-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the control's upper-left corner.
		/// \param[out] yUpperLeft The y-coordinate (in pixels) of the drag image's upper-left corner relative
		///             to the control's upper-left corner.
		///
		/// \return: The handle to the imagelist containing the bitmap.
		///
		/// \remarks The caller is responsible for destroying the imagelist.
		[id(DISPID_TVIC_CREATEDRAGIMAGE), helpstring("Retrieves the handle to an imagelist containing a bitmap that can be used to visualize dragging of the items of this collection.")]
		HRESULT CreateDragImage([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xUpperLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yUpperLeft, [out, retval] OLE_HANDLE* phImageList);
		/// \brief <em>Removes the specified item from the collection</em>
		///
		/// \param[in] itemID The unique ID of the item to remove.
		/// \param[in] removePhysically If \c True, the item is removed from the control, too.
		///
		/// \sa ITreeViewItem::ID, Add, Count, RemoveAll
		[id(DISPID_TVIC_REMOVE), helpstring("Removes the specified item from the collection.")]
		HRESULT Remove([in] LONG itemID, [in, defaultvalue(0)] VARIANT_BOOL removePhysically);
		/// \brief <em>Removes all items from the collection</em>
		///
		/// \param[in] removePhysically If \c True, the items are removed from the control, too.
		///
		/// \sa Add, Count, Remove
		[id(DISPID_TVIC_REMOVEALL), helpstring("Removes all items from the collection.")]
		HRESULT RemoveAll([in, defaultvalue(0)] VARIANT_BOOL removePhysically);
	}


	/// \interface IOLEDataObject
	/// \brief <em>Wraps the \c IDataObject interface</em>
	///
	/// This interface provides easy access to data being transferred using the \c IDataObject interface.
	///
	/// \sa _IOLEDataObjectEvents,
	///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>
	[
		object,
		uuid(45956351-164E-4F3F-9E49-DCE38D2457D2),
		dual,
		nonextensible,
		helpstring("IOLEDataObject interface"),
		pointer_default(unique)
	]
	interface IOLEDataObject : IDispatch
	{
		/// \brief <em>Deletes the contents of the \c OLEDataObject object</em>
		///
		/// \remarks This method will succeed only if the \c OLEDataObject wraps the control's own
		///          implementation of the \c IDataObject interface.
		///
		/// \sa SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>
		[id(DISPID_ODO_CLEAR), helpstring("Deletes the contents of the 'OLEDataObject' object.")]
		HRESULT Clear(void);
		/// \brief <em>Retrieves the best format settings from the \c OLEDataObject object</em>
		///
		/// Call this method to retrieve data format settings that match best with the data format, that you
		/// actually want to work with. Set the parameters to the data format settings you want to work with.
		/// The method will set them to the settings you should use.
		///
		/// \param[in,out] formatID An integer value specifying the data format. Valid values are those defined
		///                by VB's \c ClipBoardConstants enumeration, but also any other format that was
		///                registered using the \c RegisterClipboardFormat API function.
		/// \param[in,out] index An integer value that is assigned to the internal \c FORMATETC struct's
		///                \c lindex member. Usually you pass -1 here, but some formats like
		///                \c CFSTR_FILECONTENTS require multiple \c FORMATETC structs for the same format. In
		///                such cases you'll give each struct of this format a separate index.
		/// \param[in,out] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
		///                struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
		///                Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \sa GetData, GetFormat,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETCANONICALFORMAT), helpstring("Call this method to retrieve data format settings that match best with the data format, that you actually want to work with.")]
		HRESULT GetCanonicalFormat([in, out] LONG* formatID, [in, out] LONG* Index, [in, out] LONG* dataOrViewAspect);
		/// \brief <em>Retrieves data from the \c OLEDataObject object</em>
		///
		/// Retrieves data from the \c OLEDataObject object, that has the specified format.
		///
		/// \param[in] formatID An integer value specifying the format of the data to retrieve. Valid values
		///            are those defined by VB's \c ClipBoardConstants enumeration, but also any other format
		///            that has been registered using the \c RegisterClipboardFormat API function.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \return The data that has the specified format.
		///
		/// \remarks This method will fail, if the \c OLEDataObject object does not contain data of the
		///          specified format.
		///
		/// \sa GetCanonicalFormat, GetFormat, SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETDATA), helpstring("Retrieves data from the 'OLEDataObject' object.")]
		HRESULT GetData([in] LONG formatID, [in, defaultvalue(-1)] LONG Index, [in, defaultvalue(1)] LONG dataOrViewAspect, [out, retval] VARIANT* pData);
		/// \brief <em>Retrieves the \c DROPDESCRIPTION data stored by the \c OLEDataObject object</em>
		///
		/// Retrieves the \c DROPDESCRIPTION data stored by the \c OLEDataObject object. The drop description
		/// describes what will happen if the user drops the dragged data at the current position. It is
		/// displayed at the bottom of the drag image.
		///
		/// \param[in,out] targetDescription Receives the description of the current drop target.
		/// \param[in,out] actionDescription Receives the description of the whole drop action, i. e. a string
		///                like <em>"Copy to %1"</em> where <em>"Copy to"</em> is the description of the current
		///                drop effect and <em>"%1"</em> is the placeholder for the drop target description
		///                specified by \c targetDescription.
		/// \param[in,out] icon Receives the icon used to visualize the current drop effect. Any of the values
		///                defined by the \c DropDescriptionIconConstants enumeration is valid.
		///
		/// \remarks In the \c actionDescription string, the sign "%" is escaped as "%%".\n
		///          Requires Windows Vista or newer.
		///
		/// \sa SetDropDescription, IExplorerTreeView::SupportOLEDragImages, DropDescriptionIconConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb773268.aspx">DROPDESCRIPTION</a>
		[id(DISPID_ODO_GETDROPDESCRIPTION), helpstring("Retrieves the 'DROPDESCRIPTION' data stored by the 'OLEDataObject' object. Requires Windows Vista or newer.")]
		HRESULT GetDropDescription([in, out, optional] VARIANT* targetDescription, [in, out, optional] VARIANT* actionDescription, [in, out, defaultvalue(0)] DropDescriptionIconConstants* Icon);
		/// \brief <em>Retrieves whether the \c OLEDataObject object contains data in a specific format</em>
		///
		/// \param[in] formatID An integer value specifying the format to check for. Valid values are those
		///            defined by VB's \c ClipBoardConstants enumeration, but also any other format that was
		///            registered using the \c RegisterClipboardFormat API function.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \return \c True, if the \c OLEDataObject object contains data in the specified format;
		///         otherwise \c False.
		///
		/// \sa GetCanonicalFormat, GetData, SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETFORMAT), helpstring("Retrieves whether the 'OLEDataObject' object contains data in a specific format.")]
		HRESULT GetFormat([in] LONG formatID, [in, defaultvalue(-1)] LONG Index, [in, defaultvalue(1)] LONG dataOrViewAspect, [out, retval] VARIANT_BOOL* pFormatAvailable);
		/// \brief <em>Inserts data into the \c OLEDataObject object using the specified format</em>
		///
		/// \param[in] formatID An integer value specifying the format of the data being passed. Valid values
		///            are those defined by VB's \c ClipBoardConstants enumeration, but also any other format
		///            that has been registered using the \c RegisterClipboardFormat API function.
		/// \param[in] data The data to insert. If not specified, the \c OLESetData event will be raised if
		///            data of the specified format is requested from the \c OLEDataObject object.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \remarks The \c data parameter is optional only if the \c OLEDataObject wraps the control's own
		///          implementation of the \c IDataObject interface.
		///
		/// \sa GetData, Clear, _IExplorerTreeViewEvents::OLESetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_SETDATA), helpstring("Inserts data into the 'OLEDataObject' object using the specified format.")]
		HRESULT SetData([in] LONG formatID, [in, optional] VARIANT data, [in, defaultvalue(-1)] LONG Index, [in, defaultvalue(1)] LONG dataOrViewAspect);
		/// \brief <em>Sets the drop description displayed below the drag image</em>
		///
		/// Sets the \c DROPDESCRIPTION data. The drop description describes what will happen if the user drops
		/// the dragged data at the current position. It is displayed at the bottom of the drag image.
		///
		/// \param[in] targetDescription The description of the current drop target.
		/// \param[in] actionDescription The description of the whole drop action, i. e. a string like <em>"Copy
		///            to %1"</em> where <em>"Copy to"</em> is the description of the current drop effect and
		///            <em>"%1"</em> is the placeholder for the drop target description specified by
		///            \c targetDescription.
		/// \param[in] icon The icon used to visualize the current drop effect. Any of the values defined by
		///            the \c DropDescriptionIconConstants enumeration is valid.
		///
		/// \remarks In the \c actionDescription string, the sign "%" is escaped as "%%".\n
		///          Requires Windows Vista or newer.
		///
		/// \sa GetDropDescription, IExplorerTreeView::SupportOLEDragImages, DropDescriptionIconConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb773268.aspx">DROPDESCRIPTION</a>
		[id(DISPID_ODO_SETDROPDESCRIPTION), helpstring("Sets the drop description displayed below the drag image. Requires Windows Vista or newer.")]
		HRESULT SetDropDescription([in, optional] VARIANT targetDescription, [in, optional] VARIANT actionDescription, [in, defaultvalue(ddiNone)] DropDescriptionIconConstants Icon);
	}


	/// \interface IExplorerTreeView
	/// \brief <em>The main interface</em>
	///
	/// This is the control's main interface. It wraps the control window.
	///
	/// \sa _IExplorerTreeViewEvents, ITreeViewItem, ITreeViewItems, IVirtualTreeViewItem
	[
		object,
		uuid(5CAC7073-538F-4422-8C32-1F852AD00693),
		dual,
		nonextensible,
		helpstring("IExplorerTreeView interface"),
		pointer_default(unique)
	]
	interface IExplorerTreeView : IDispatch
	{
		/// \brief <em>Specifies whether the control detects drag'n'drop operations</em>
		///
		/// Retrieves or sets whether drag'n'drop mode can be entered. If set to \c True, drag'n'drop mode
		/// can be entered by pressing the left or right mouse button over an item and then moving the
		/// mouse with the button still pressed. If set to \c False, drag'n'drop mode is not available -
		/// this also means the \c ItemBeginDrag and \c ItemBeginRDrag events don't get fired.
		///
		/// \sa RegisterForOLEDragDrop, DragExpandTime, DragScrollTimeBase, SetInsertMarkPosition,
		///     _IExplorerTreeViewEvents::ItemBeginDrag, _IExplorerTreeViewEvents::ItemBeginRDrag
		[propget, id(DISPID_EXTVW_ALLOWDRAGDROP), helpstring("Retrieves or sets whether drag'n'drop mode can be entered.")]
		HRESULT AllowDragDrop([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_ALLOWDRAGDROP), helpstring("Retrieves or sets whether drag'n'drop mode can be entered.")]
		HRESULT AllowDragDrop([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether label-editing mode can be entered</em>
		///
		/// Retrieves or sets whether label-editing mode can be entered. If set to \c True, label-edit
		/// mode can be entered by either calling \c ITreeViewItem::StartLabelEditing or by single-clicking
		/// the control's caret item. If set to \c False, label-edit mode is not available.
		///
		/// \sa hWndEdit, ITreeViewItem::StartLabelEditing, _IExplorerTreeViewEvents::StartingLabelEditing
		[propget, id(DISPID_EXTVW_ALLOWLABELEDITING), helpstring("Retrieves or sets whether label-editing mode can be entered.")]
		HRESULT AllowLabelEditing([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_ALLOWLABELEDITING), helpstring("Retrieves or sets whether label-editing mode can be entered.")]
		HRESULT AllowLabelEditing([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls how the selected item is displayed</em>
		///
		/// Retrieves or sets whether the selected items will be highlighted even if the control doesn't
		/// have the focus. If set to \c True, selected items are drawn as selected if the control does not
		/// have the focus; otherwise they're drawn as normal items.
		///
		/// \sa CaretItem, ITreeViewItem::Selected
		[propget, id(DISPID_EXTVW_ALWAYSSHOWSELECTION), helpstring("Retrieves or sets whether the selected items will be highlighted even if the control doesn't have the focus.")]
		HRESULT AlwaysShowSelection([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_ALWAYSSHOWSELECTION), helpstring("Retrieves or sets whether the selected items will be highlighted even if the control doesn't have the focus.")]
		HRESULT AlwaysShowSelection([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the style of the control's outer border</em>
		///
		/// Retrieves or sets the kind of border that is drawn around the control. Any of the values defined
		/// by the \c AppearanceConstants enumeration is valid.
		///
		/// \sa BorderStyle, AppearanceConstants
		[propget, id(DISPID_EXTVW_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([out, retval] AppearanceConstants* pValue);
		[propput, id(DISPID_EXTVW_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([in] AppearanceConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application ID</em>
		///
		///   Retrieves the control's application ID. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppName, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXTVW_APPID), hidden]
		HRESULT AppID([out, retval] SHORT* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application name</em>
		///
		///   Retrieves the control's application name. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXTVW_APPNAME), hidden]
		HRESULT AppName([out, retval] BSTR* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's short application name</em>
		///
		///   Retrieves the control's short application name. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXTVW_APPSHORTNAME), hidden]
		HRESULT AppShortName([out, retval] BSTR* pValue);
		/// \brief <em>Controls the control's automatic scrolling features</em>
		///
		/// Retrieves or sets whether the control does automatic horizontal scrolling to scroll the selected
		/// item into view. If set to \c True, the control does automatic scrolling; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa AutoHScrollPixelsPerSecond, AutoHScrollRedrawInterval, ScrollBars
		[propget, id(DISPID_EXTVW_AUTOHSCROLL), helpstring("Retrieves or sets whether the control does automatic horizontal scrolling to scroll the selected item into view. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT AutoHScroll([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_AUTOHSCROLL), helpstring("Retrieves or sets whether the control does automatic horizontal scrolling to scroll the selected item into view. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT AutoHScroll([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's automatic scrolling features</em>
		///
		/// Retrieves or sets the number of pixels to scroll per second when doing automatic horizontal
		/// scrolling. This value influences the scrolling speed.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa AutoHScroll, AutoHScrollRedrawInterval
		[propget, id(DISPID_EXTVW_AUTOHSCROLLPIXELSPERSECOND), helpstring("Retrieves or sets the number of pixels to scroll per second when doing automatic horizontal scrolling. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT AutoHScrollPixelsPerSecond([out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_AUTOHSCROLLPIXELSPERSECOND), helpstring("Retrieves or sets the number of pixels to scroll per second when doing automatic horizontal scrolling. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT AutoHScrollPixelsPerSecond([in] LONG newValue);
		/// \brief <em>Controls the control's automatic scrolling features</em>
		///
		/// Retrieves or sets the time (in milliseconds) between two redraws of the control when doing
		/// automatic horizontal scrolling. This value influences the scrolling smoothness. The lower the
		/// value, the smoother the scrolling.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa AutoHScroll, AutoHScrollPixelsPerSecond
		[propget, id(DISPID_EXTVW_AUTOHSCROLLREDRAWINTERVAL), helpstring("Retrieves or sets the time (in milliseconds) between two redraws of the control when doing automatic horizontal scrolling. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT AutoHScrollRedrawInterval([out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_AUTOHSCROLLREDRAWINTERVAL), helpstring("Retrieves or sets the time (in milliseconds) between two redraws of the control when doing automatic horizontal scrolling. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT AutoHScrollRedrawInterval([in] LONG newValue);
		/// \brief <em>Specifies the control's background color</em>
		///
		/// Retrieves or sets the control's background color.
		///
		/// \sa ForeColor, EditBackColor, InsertMarkColor, LineColor
		[propget, id(DISPID_EXTVW_BACKCOLOR), helpstring("Retrieves or sets the control's background color.")]
		HRESULT BackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXTVW_BACKCOLOR), helpstring("Retrieves or sets the control's background color.")]
		HRESULT BackColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls how the icons of selected items are drawn</em>
		///
		/// Retrieves or sets whether the selected items' icons are blended with the system highlight
		/// color. If set to \c True, the icons are blended; otherwise not.
		///
		/// \remarks If you set this property to \c True, you should set the \c ShowStateImages property
		///          to \c False and the \c ItemXBorder and \c ItemYBorder properties to 0 to avoid
		///          drawing bugs.\n
		///          If you set this property to \c True, the \c CustomDraw event will be fired for each
		///          single item also if you don't set the \c cdrvNotifyItemDraw flag.
		///
		/// \sa hImageList, ItemXBorder, ItemYBorder, ShowStateImages, _IExplorerTreeView::CustomDraw
		[propget, id(DISPID_EXTVW_BLENDSELECTEDITEMSICONS), helpstring("Retrieves or sets whether the selected items' icons are blended with the items' text background colors.")]
		HRESULT BlendSelectedItemsIcons([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_BLENDSELECTEDITEMSICONS), helpstring("Retrieves or sets whether the selected items' icons are blended with the items' text background colors.")]
		HRESULT BlendSelectedItemsIcons([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the style of the control's inner border</em>
		///
		/// Retrieves or sets the kind of inner border that is drawn around the control. Any of the values
		/// defined by the \c BorderStyleConstants enumeration is valid.
		///
		/// \sa Appearance, BorderStyleConstants
		[propget, id(DISPID_EXTVW_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([out, retval] BorderStyleConstants* pValue);
		[propput, id(DISPID_EXTVW_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([in] BorderStyleConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's build number</em>
		///
		///   Retrieves the control's build number. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa Version, AppID, AppName, AppShortName, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXTVW_BUILD), hidden]
		HRESULT Build([out, retval] LONG* pValue);
		/// \brief <em>Specifies the state images supported by the control directly</em>
		///
		/// Retrieves or sets which images the built-in state imagelist does consist of. The built-in state
		/// imagelist is used, if the \c ShowStateImages property is set to \c True and the \c ilState
		/// imagelist is NOT set to a custom imagelist.\n
		/// Any combination of the values defined by the \c BuiltInStateImagesConstants enumeration is valid.
		///
		/// \attention Changing this property may destroy and recreate the control window.
		///
		/// \sa ShowStateImages, hImageList, IndentStateImages, ITreeViewItem::StateImageIndex,
		///     BuiltInStateImagesConstants, ImageListConstants
		[propget, id(DISPID_EXTVW_BUILTINSTATEIMAGES), helpstring("Retrieves or sets which images the built-in state imagelist does consist of. Changing this property may destroy and recreate the control window."), nonbrowsable]
		HRESULT BuiltInStateImages([out, retval] BuiltInStateImagesConstants* pValue);
		[propput, id(DISPID_EXTVW_BUILTINSTATEIMAGES), helpstring("Retrieves or sets which images the built-in state imagelist does consist of. Changing this property may destroy and recreate the control window."), nonbrowsable]
		HRESULT BuiltInStateImages([in] BuiltInStateImagesConstants newValue);
		/// \brief <em>Controls when the \c CaretChanged event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the control waits before raising the
		/// \c CaretChanged event if the caret item was changed by keyboard input.
		///
		/// \sa CaretItem, _IExplorerTreeViewEvents::CaretChanged
		[propget, id(DISPID_EXTVW_CARETCHANGEDDELAYTIME), helpstring("Retrieves or sets the number of milliseconds the control waits before raising the CaretChanged event if the caret item was changed by keyboard input.")]
		HRESULT CaretChangedDelayTime([out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_CARETCHANGEDDELAYTIME), helpstring("Retrieves or sets the number of milliseconds the control waits before raising the CaretChanged event if the caret item was changed by keyboard input.")]
		HRESULT CaretChangedDelayTime([in] LONG newValue);
		/// \brief <em>Specifies the control's caret item</em>
		///
		/// Retrieves or sets the control's caret item. The caret item is the item that has the focus.
		///
		/// \param[in] noSingleExpand If \c True, the control behaves like it does if the \c SingleExpand
		///            property is set to \c seNone; otherwise the control behaves like it does if the
		///            caret change is done by the user using the mouse. This parameter is ignored on
		///            retrieving the caret item.
		///
		/// \remarks This is the control's default property.
		///
		/// \sa ITreeViewItem, SingleExpand
		[propget, id(DISPID_EXTVW_CARETITEM), helpstring("Retrieves or sets the control's caret item. The caret item is the item that has the focus."), nonbrowsable]
		HRESULT CaretItem([in, defaultvalue(-1)] VARIANT_BOOL noSingleExpand, [out, retval] ITreeViewItem** ppCaretItem);
		[propputref, id(DISPID_EXTVW_CARETITEM), helpstring("Retrieves or sets the control's caret item. The caret item is the item that has the focus."), nonbrowsable]
		HRESULT CaretItem([in, defaultvalue(-1)] VARIANT_BOOL noSingleExpand, [in] ITreeViewItem* pNewCaretItem);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's character set</em>
		///
		///   Retrieves the control's character set (Unicode or ANSI). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXTVW_CHARSET), hidden]
		HRESULT CharSet([out, retval] BSTR* pValue);
		/// \brief <em>Controls which events are fired</em>
		///
		/// Retrieves or sets the events that won't be fired. Disabling events increases performance.
		/// Any combination of the values defined by the \c DisabledEventsConstants enumeration is valid.
		///
		/// \sa DisabledEventsConstants
		[propget, id(DISPID_EXTVW_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([out, retval] DisabledEventsConstants* pValue);
		[propput, id(DISPID_EXTVW_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([in] DisabledEventsConstants newValue);
		/// \brief <em>Controls redrawing of the control</em>
		///
		/// Enables or disables automatic redrawing of the control. Disabling redraw while doing large changes
		/// on the treeview (like adding many items) may increase performance. If set to \c False, the control
		/// will redraw itself automatically; otherwise not.
		[propget, id(DISPID_EXTVW_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the speed of automatic item expansion during drag'n'drop</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be placed over an item
		/// during a drag'n'drop operation before this item will be expanded automatically. If set
		/// to 0, auto-expansion is disabled. If set to -1, the system's double-click time, multiplied
		/// with 4, is used.
		///
		/// \sa AllowDragDrop, RegisterForOLEDragDrop, DragScrollTimeBase,
		///     _IExplorerTreeViewEvents::DragMouseMove, _IExplorerTreeViewEvents::OLEDragMouseMove
		[propget, id(DISPID_EXTVW_DRAGEXPANDTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be placed over an item during a drag'n'drop operation before this item will be expanded automatically.")]
		HRESULT DragExpandTime([out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_DRAGEXPANDTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be placed over an item during a drag'n'drop operation before this item will be expanded automatically.")]
		HRESULT DragExpandTime([in] LONG newValue);
		/// \brief <em>Retrieves the items currently dragged</em>
		///
		/// Retrieves a collection object wrapping the items that are currently dragged. These are the
		/// same items that were passed to the \c BeginDrag or \c OLEDrag method.
		///
		/// \remarks This property is read-only.
		///
		/// \sa BeginDrag, OLEDrag, ITreeViewItemContainer, TreeItems
		[propget, id(DISPID_EXTVW_DRAGGEDITEMS), helpstring("Retrieves a collection object wrapping the items that are currently dragged."), nonbrowsable]
		HRESULT DraggedItems([out, retval] ITreeViewItemContainer** ppItems);
		/// \brief <em>Controls the speed of automatic scrolling during drag'n'drop</em>
		///
		/// Retrieves or sets the period of time (in milliseconds) that is used as the time-base to
		/// calculate the velocity of auto-scrolling during a drag'n'drop operation. If set to 0,
		/// auto-scrolling is disabled. If set to -1, the system's double-click time, divided by 4, is
		/// used.
		///
		/// \sa AllowDragDrop, RegisterForOLEDragDrop, DragExpandTime,
		///     _IExplorerTreeViewEvents::DragMouseMove, _IExplorerTreeViewEvents::OLEDragMouseMove
		[propget, id(DISPID_EXTVW_DRAGSCROLLTIMEBASE), helpstring("Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate the velocity of auto-scrolling during a drag'n'drop operation.")]
		HRESULT DragScrollTimeBase([out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_DRAGSCROLLTIMEBASE), helpstring("Retrieves or sets the period of time (in milliseconds) that is used as the time-base to calculate the velocity of auto-scrolling during a drag'n'drop operation.")]
		HRESULT DragScrollTimeBase([in] LONG newValue);
		/// \brief <em>Controls the control's asynchronous drawing features</em>
		///
		/// Retrieves or sets whether the control draws the items' associated images asynchronously.
		/// Asynchronous image drawing may improve performance. If set to \c True, item images are drawn
		/// asynchronously; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa hImageList, _IExplorerTreeViewEvents::ItemAsynchronousDrawFailed
		[propget, id(DISPID_EXTVW_DRAWIMAGESASYNCHRONOUSLY), helpstring("Retrieves or sets whether the control draws the items' associated images asynchronously. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DrawImagesAsynchronously([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_DRAWIMAGESASYNCHRONOUSLY), helpstring("Retrieves or sets whether the control draws the items' associated images asynchronously. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT DrawImagesAsynchronously([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the item that currently is the drop target</em>
		///
		/// Retrieves or sets the item, that is the target of a drag'n'drop operation. Its background is
		/// drawn highlighted. If set to \c Nothing, no item is a drop target.
		///
		/// \sa ITreeViewItem::DropHilited, AllowDragDrop, RegisterForOLEDragDrop, CaretItem,
		///     _IExplorerTreeViewEvents::DragMouseMove, _IExplorerTreeViewEvents::OLEDragMouseMove
		[propget, id(DISPID_EXTVW_DROPHILITEDITEM), helpstring("Retrieves or sets the item, that is the target of a drag'n'drop operation."), nonbrowsable]
		HRESULT DropHilitedItem([out, retval] ITreeViewItem** ppDropHilitedItem);
		[propputref, id(DISPID_EXTVW_DROPHILITEDITEM), helpstring("Retrieves or sets the item, that is the target of a drag'n'drop operation."), nonbrowsable]
		HRESULT DropHilitedItem([in] ITreeViewItem* pNewDropHilitedItem);
		/// \brief <em>Specifies the label-edit control's background color</em>
		///
		/// Retrieves or sets the label-edit control's background color.
		///
		/// \sa EditForeColor, BackColor
		[propget, id(DISPID_EXTVW_EDITBACKCOLOR), helpstring("Retrieves or sets the label-edit control's background color.")]
		HRESULT EditBackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXTVW_EDITBACKCOLOR), helpstring("Retrieves or sets the label-edit control's background color.")]
		HRESULT EditBackColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the label-edit control's text color</em>
		///
		/// Retrieves or sets the label-edit control's text color.
		///
		/// \sa EditBackColor, ForeColor
		[propget, id(DISPID_EXTVW_EDITFORECOLOR), helpstring("Retrieves or sets the label-edit control's text color.")]
		HRESULT EditForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXTVW_EDITFORECOLOR), helpstring("Retrieves or sets the label-edit control's text color.")]
		HRESULT EditForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls when the \c EditMouseHover event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over the
		/// label-edit control's client area before the \c EditMouseHover event is fired. If set
		/// to -1, the system hover time is used.
		///
		/// \sa _IExplorerTreeViewEvents::EditMouseHover, HoverTime
		[propget, id(DISPID_EXTVW_EDITHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the label-edit control's client area before the 'EditMouseHover' event is fired.")]
		HRESULT EditHoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_EDITHOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the label-edit control's client area before the 'EditMouseHover' event is fired.")]
		HRESULT EditHoverTime([in] LONG newValue);
		/// \brief <em>Controls the control's IME features</em>
		///
		/// Retrieves or sets the label-edit control's IME mode. IME is a Windows feature making it easy
		/// to enter Asian characters. Any of the values defined by the \c IMEModeConstants enumeration
		/// is valid.
		///
		/// \sa IMEMode, IMEModeConstants
		[propget, id(DISPID_EXTVW_EDITIMEMODE), helpstring("Retrieves or sets the label-edit control's IME mode.")]
		HRESULT EditIMEMode([out, retval] IMEModeConstants* pValue);
		[propput, id(DISPID_EXTVW_EDITIMEMODE), helpstring("Retrieves or sets the label-edit control's IME mode.")]
		HRESULT EditIMEMode([in] IMEModeConstants newValue);
		/// \brief <em>Specifies the label-edit control's content</em>
		///
		/// Retrieves or sets the text displayed by the label-edit control.
		///
		/// \sa ITreeViewItem::Text, _IExplorerTreeViewEvents::EditChange
		[propget, id(DISPID_EXTVW_EDITTEXT), helpstring("Retrieves or sets the text displayed by the label-edit control."), nonbrowsable]
		HRESULT EditText([out, retval] BSTR* pValue);
		[propput, id(DISPID_EXTVW_EDITTEXT), helpstring("Retrieves or sets the text displayed by the label-edit control."), nonbrowsable]
		HRESULT EditText([in] BSTR newValue);
		/// \brief <em>Controls whether the control accepts user input</em>
		///
		/// Enables or disables the control for user input. If set to \c True, it reacts to user input;
		/// otherwise not.
		///
		/// \sa ITreeViewItem::Grayed
		[propget, id(DISPID_EXTVW_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the mouse-over effects of the control's expandos</em>
		///
		/// Retrieves or sets whether the expando images are faded in, if the user moves the mouse cursor into
		/// the control's client area, and out, if the user moves the mouse cursor out of the control's client
		/// area. If set to \c True, fading takes place; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.\n
		///          If you set this property to \c True, you should set the \c HotTracking property to a value
		///          other than \c htrNone. Otherwise expando fading won't work correctly.
		///
		/// \sa HotTracking, ITreeViewItem::HasExpando, _IExplorerTreeViewEvents::MouseEnter,
		///     _IExplorerTreeViewEvents::MouseLeave
		[propget, id(DISPID_EXTVW_FADEEXPANDOS), helpstring("Retrieves or sets whether the expando images are faded in, if the user moves the mouse cursor into the control's client area, and out, if the user moves the mouse cursor out of the control's client area. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT FadeExpandos([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_FADEEXPANDOS), helpstring("Retrieves or sets whether the expando images are faded in, if the user moves the mouse cursor into the control's client area, and out, if the user moves the mouse cursor out of the control's client area. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT FadeExpandos([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls whether the control imitates the Windows Favorites management treeview</em>
		///
		/// Retrieves or sets whether a rectangle is drawn around the caret item and its sub-items to
		/// group them (like in Windows Favorites management window). If set to \c True, the items get
		/// grouped by a rectangle; otherwise not.
		///
		/// \remarks This feature should be used with \c SingleExpand set to \c seNormal.
		///
		/// \sa GroupBoxColor, SingleExpand, FullRowSelect, HotTracking
		[propget, id(DISPID_EXTVW_FAVORITESSTYLE), helpstring("Retrieves or sets whether a rectangle is drawn around the caret item and its subitems to group them (like in Windows Favorites management window).")]
		HRESULT FavoritesStyle([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_FAVORITESSTYLE), helpstring("Retrieves or sets whether a rectangle is drawn around the caret item and its subitems to group them (like in Windows Favorites management window).")]
		HRESULT FavoritesStyle([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the control's very first treeview item</em>
		///
		/// \remarks This property is read-only.
		///
		/// \sa LastRootItem, FirstVisibleItem, TreeItems
		[propget, id(DISPID_EXTVW_FIRSTROOTITEM), helpstring("Retrieves the control's very first treeview item."), nonbrowsable]
		HRESULT FirstRootItem([out, retval] ITreeViewItem** ppFirstItem);
		/// \brief <em>Specifies the control's first item that is displayed in the control's client area</em>
		///
		/// Retrieves or sets the first treeview item, that is entirely located within the control's client
		/// area and therefore visible to the user.
		///
		/// \sa LastVisibleItem, FirstRootItem, TreeItems
		[propget, id(DISPID_EXTVW_FIRSTVISIBLEITEM), helpstring("Retrieves or sets the control's first visible treeview item."), nonbrowsable]
		HRESULT FirstVisibleItem([out, retval] ITreeViewItem** ppFirstItem);
		[propputref, id(DISPID_EXTVW_FIRSTVISIBLEITEM), helpstring("Retrieves or sets the control's first visible treeview item."), nonbrowsable]
		HRESULT FirstVisibleItem([in] ITreeViewItem* pNewFirstItem);
		/// \brief <em>Specifies the control's font</em>
		///
		/// Retrieves or sets the control's font. It's used to draw the items' text.
		///
		/// \sa UseSystemFont, ForeColor, ITreeViewItem::Text
		[propget, id(DISPID_EXTVW_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([out, retval] IFontDisp** ppFont);
		[propput, id(DISPID_EXTVW_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		[propputref, id(DISPID_EXTVW_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		/// \brief <em>Specifies the control's text color</em>
		///
		/// Retrieves or sets the control's text color.
		///
		/// \sa BackColor, EditForeColor, InsertMarkColor, LineColor
		[propget, id(DISPID_EXTVW_FORECOLOR), helpstring("Retrieves or sets the control's text color.")]
		HRESULT ForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXTVW_FORECOLOR), helpstring("Retrieves or sets the control's text color.")]
		HRESULT ForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls the control's selection style</em>
		///
		/// Retrieves or sets whether an item's entire row is highlighted if it is selected. If set to
		/// \c True, the entire row, otherwise only the item's text is highlighted.
		///
		/// \remarks If this property is set to \c True while the \c TreeViewStyle property is set to
		///          include \c tvsLines, the \c tvsLines flag will be removed from the \c TreeViewStyle
		///          property.
		///
		/// \sa SingleExpand, FavoritesStyle, TreeViewStyle
		[propget, id(DISPID_EXTVW_FULLROWSELECT), helpstring("Retrieves or sets whether an item's entire row is highlighted if it is selected.")]
		HRESULT FullRowSelect([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_FULLROWSELECT), helpstring("Retrieves or sets whether an item's entire row is highlighted if it is selected.")]
		HRESULT FullRowSelect([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's appearance in favorites style mode</em>
		///
		/// Retrieves or sets the color of the rectangle that is drawn around the caret item and its
		/// sub-items if the \c FavoritesStyle property is set to \c True.
		///
		/// \sa FavoritesStyle
		[propget, id(DISPID_EXTVW_GROUPBOXCOLOR), helpstring("Retrieves or sets the color of the rectangle that is drawn around the caret item and its sub-items if the 'FavoritesStyle' property is set to 'True'.")]
		HRESULT GroupBoxColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXTVW_GROUPBOXCOLOR), helpstring("Retrieves or sets the color of the rectangle that is drawn around the caret item and its sub-items if the 'FavoritesStyle' property is set to 'True'.")]
		HRESULT GroupBoxColor([in] OLE_COLOR newValue);
		/// \brief <em>Retrieves the imagelist containing the drag image</em>
		///
		/// Retrieves the handle to the imagelist containing the drag image that is used during a
		/// drag'n'drop operation to visualize the dragged items.
		///
		/// \sa ShowDragImage, BeginDrag, _IExplorerTreeViewEvents::DragMouseMove
		[propget, id(DISPID_EXTVW_HDRAGIMAGELIST), helpstring("Retrieves the handle to the imagelist containing the drag image that is used during a drag'n'drop operation to visualize the dragged items."), nonbrowsable]
		HRESULT hDragImageList([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Specifies one of the control's associated imagelist</em>
		///
		/// Retrieves or sets the handle of the specified imagelist.
		///
		/// \param[in] imageList The imageList to retrieve or set. Any of the values defined by the
		///            \c ImageListConstants enumeration is valid.
		///
		/// \remarks The previously set image list does NOT get destroyed automatically.
		///
		/// \sa ImageListConstants
		[propget, id(DISPID_EXTVW_HIMAGELIST), helpstring("Retrieves or sets the handle to the specified imagelist."), nonbrowsable]
		HRESULT hImageList([in] ImageListConstants imageList, [out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_EXTVW_HIMAGELIST), helpstring("Retrieves or sets the handle to the specified imagelist."), nonbrowsable]
		HRESULT hImageList([in] ImageListConstants imageList, [in] OLE_HANDLE newValue);
		/// \brief <em>Controls the control's mouse-hover effects</em>
		///
		/// Retrieves or sets the hot tracking mode. If enabled, the item underneath the mouse cursor is
		/// underlined. Any of the values defined by the \c HotTrackingConstants enumeration is valid.
		///
		/// \remarks If you set this property to \c htrNone, expando fading (see \c FadeExpandos property)
		///          won't work correctly.
		///
		/// \sa FadeExpandos, SingleExpand, FavoritesStyle, HotTrackingConstants
		[propget, id(DISPID_EXTVW_HOTTRACKING), helpstring("Retrieves or sets the hot tracking mode.")]
		HRESULT HotTracking([out, retval] HotTrackingConstants* pValue);
		[propput, id(DISPID_EXTVW_HOTTRACKING), helpstring("Retrieves or sets the hot tracking mode.")]
		HRESULT HotTracking([in] HotTrackingConstants newValue);
		/// \brief <em>Controls when the \c MouseHover event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over the
		/// control's client area before the \c MouseHover event is fired. If set to -1, the system hover
		/// time is used.
		///
		/// \sa _IExplorerTreeViewEvents::MouseHover, EditHoverTime
		[propget, id(DISPID_EXTVW_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([in] LONG newValue);
		/// \brief <em>Retrieves the control's window handle</em>
		///
		/// Retrieves the control's window handle.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWndEdit, _IExplorerTreeViewEvents::RecreatedControlWindow,
		///     _IExplorerTreeViewEvents::DestroyedControlWindow
		[propget, id(DISPID_EXTVW_HWND), helpstring("Retrieves the control's window handle."), nonbrowsable]
		HRESULT hWnd([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Retrieves the label-edit control's window handle</em>
		///
		/// Retrieves the label-edit control's window handle.
		///
		/// \remarks This property is read-only.
		///
		/// \sa hWnd, _IExplorerTreeViewEvents::CreatedEditControlWindow,
		///     _IExplorerTreeViewEvents::DestroyedEditControlWindow
		[propget, id(DISPID_EXTVW_HWNDEDIT), helpstring("Retrieves the label-edit control's window handle."), nonbrowsable]
		HRESULT hWndEdit([out, retval] OLE_HANDLE* pValue);
		/// \brief <em>Specifies the tooltip control's window handle</em>
		///
		/// Retrieves or sets the tooltip control's window handle.
		///
		/// \remarks The previously set tooltip window does NOT get destroyed automatically.
		///
		/// \sa ShowToolTips, RichToolTips
		[propget, id(DISPID_EXTVW_HWNDTOOLTIP), helpstring("Retrieves or sets the tooltip control's window handle."), nonbrowsable]
		HRESULT hWndToolTip([out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_EXTVW_HWNDTOOLTIP), helpstring("Retrieves or sets the tooltip control's window handle."), nonbrowsable]
		HRESULT hWndToolTip([in] OLE_HANDLE newValue);
		/// \brief <em>Controls the control's IME features</em>
		///
		/// Retrieves or sets the control's IME mode. IME is a Windows feature making it easy to enter
		/// Asian characters. Any of the values defined by the \c IMEModeConstants enumeration is valid.
		///
		/// \sa EditIMEMode, IMEModeConstants
		[propget, id(DISPID_EXTVW_IMEMODE), helpstring("Retrieves or sets the control's IME mode.")]
		HRESULT IMEMode([out, retval] IMEModeConstants* pValue);
		[propput, id(DISPID_EXTVW_IMEMODE), helpstring("Retrieves or sets the control's IME mode.")]
		HRESULT IMEMode([in] IMEModeConstants newValue);
		/// \brief <em>Retrieves the control's current incremental search-string</em>
		///
		/// Retrieves the control's current incremental search-string. This string is used to select an item
		/// based on characters entered by the user.
		///
		/// \remarks This property is read-only.
		///
		/// \sa _IExplorerTreeViewEvents::IncrementalSearchStringChanging
		[propget, id(DISPID_EXTVW_INCREMENTALSEARCHSTRING), helpstring("Retrieves the control's current incremental search-string. This string is used to select an item based on characters entered by the user.")]
		HRESULT IncrementalSearchString([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the items' indentation</em>
		///
		/// Retrieves or sets the items' indentation in pixels.
		///
		/// \sa ITreeViewItem::Level
		[propget, id(DISPID_EXTVW_INDENT), helpstring("Retrieves or sets the items' indentation in pixels.")]
		HRESULT Indent([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXTVW_INDENT), helpstring("Retrieves or sets the items' indentation in pixels.")]
		HRESULT Indent([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Controls where state images are drawn</em>
		///
		/// Retrieves or sets whether the state images are left-aligned or placed between the items' expandos
		/// and the items' captions. If set to \c True, state images follow the respective item's indentation
		/// and are placed between its expando and its caption. If set to \c False, state images are aligned to
		/// the control's edge.
		///
		/// \remarks On current versions of Windows state-images can't be toggled using the mouse if this
		///          property is set to \c False.\n
		///          Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa hImageList, ShowStateImages, ITreeViewItem::StateImageIndex
		[propget, id(DISPID_EXTVW_INDENTSTATEIMAGES), helpstring("Retrieves or sets whether the state images are left-aligned or placed between the items' expandos and the items' captions. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT IndentStateImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_INDENTSTATEIMAGES), helpstring("Retrieves or sets whether the state images are left-aligned or placed between the items' expandos and the items' captions. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT IndentStateImages([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the color of the control's insertion mark</em>
		///
		/// Retrieves or sets the color that the control's insertion mark is drawn in.
		///
		/// \sa SetInsertMarkPosition, BackColor, ForeColor, LineColor
		[propget, id(DISPID_EXTVW_INSERTMARKCOLOR), helpstring("Retrieves or sets the color that the control's insertion mark is drawn in.")]
		HRESULT InsertMarkColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXTVW_INSERTMARKCOLOR), helpstring("Retrieves or sets the color that the control's insertion mark is drawn in.")]
		HRESULT InsertMarkColor([in] OLE_COLOR newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's release type</em>
		///
		///   Retrieves the control's release type. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze. If set to
		///   \c True, the control was compiled for release; otherwise it was compiled for debugging.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, Programmer, Tester
		/// \endif
		[propget, id(DISPID_EXTVW_ISRELEASE), hidden]
		HRESULT IsRelease([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies which parts of an item are treated as such</em>
		///
		/// Retrieves or sets the parts of an item that get treated as such if firing any kind of mouse
		/// event. Any combination of the values defined by the \c ItemBoundingBoxDefinitionConstants
		/// enumeration is valid. E. g. if set to \c ibbdItemIcon combined with \c ibbdItemIndent, the
		/// \c treeItem parameter of the \c MouseMove event will identify the item only if the mouse
		/// cursor is located over the item's icon or indentation space; otherwise (e. g. if the cursor
		/// is located over the item's text) it will be \c Nothing.
		///
		/// \sa HitTest, ItemBoundingBoxDefinitionConstants
		[propget, id(DISPID_EXTVW_ITEMBOUNDINGBOXDEFINITION), helpstring("Retrieves or sets the parts of an item that get treated as such if firing any kind of mouse event."), nonbrowsable]
		HRESULT ItemBoundingBoxDefinition([out, retval] ItemBoundingBoxDefinitionConstants* pValue);
		[propput, id(DISPID_EXTVW_ITEMBOUNDINGBOXDEFINITION), helpstring("Retrieves or sets the parts of an item that get treated as such if firing any kind of mouse event."), nonbrowsable]
		HRESULT ItemBoundingBoxDefinition([in] ItemBoundingBoxDefinitionConstants newValue);
		/// \brief <em>Specifies all items' basic height</em>
		///
		/// Retrieves or sets the items' basic height in pixels. The height of an item may be any
		/// multiple of this height, depending on the item's \c HeightIncrement setting.
		///
		/// \sa ITreeViewItem::HeightIncrement
		[propget, id(DISPID_EXTVW_ITEMHEIGHT), helpstring("Retrieves or sets the items' basic height in pixels.")]
		HRESULT ItemHeight([out, retval] OLE_YSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXTVW_ITEMHEIGHT), helpstring("Retrieves or sets the items' basic height in pixels.")]
		HRESULT ItemHeight([in] OLE_YSIZE_PIXELS newValue);
		/// \brief <em>Specifies the thickness of the items' vertical borders</em>
		///
		/// Retrieves or sets the thickness (in pixels) of the left and right borders of items.
		///
		/// \remarks This is an undocumented feature of the native Win32 treeview control.\n
		///          You should set this property to 0 if you want to set the \c BlendSelectedItemsIcons
		///          property to \c True.
		///
		/// \sa ItemYBorder, BlendSelectedItemsIcons
		[propget, id(DISPID_EXTVW_ITEMXBORDER), helpstring("Retrieves or sets the thickness (in pixels) of the left and right borders of items.")]
		HRESULT ItemXBorder([out, retval] OLE_XSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXTVW_ITEMXBORDER), helpstring("Retrieves or sets the thickness (in pixels) of the left and right borders of items.")]
		HRESULT ItemXBorder([in] OLE_XSIZE_PIXELS newValue);
		/// \brief <em>Specifies the thickness of the items' horizontal borders</em>
		///
		/// Retrieves or sets the thickness (in pixels) of the upper and lower borders of items.
		///
		/// \remarks This is an undocumented feature of the native Win32 treeview control.\n
		///          You should set this property to 0 if you want to set the \c BlendSelectedItemsIcons
		///          property to \c True.
		///
		/// \sa ItemXBorder, BlendSelectedItemsIcons
		[propget, id(DISPID_EXTVW_ITEMYBORDER), helpstring("Retrieves or sets the thickness (in pixels) of the upper and lower borders of items.")]
		HRESULT ItemYBorder([out, retval] OLE_YSIZE_PIXELS* pValue);
		[propput, id(DISPID_EXTVW_ITEMYBORDER), helpstring("Retrieves or sets the thickness (in pixels) of the upper and lower borders of items.")]
		HRESULT ItemYBorder([in] OLE_YSIZE_PIXELS newValue);
		/// \brief <em>Retrieves the control's last top-level item</em>
		///
		/// \remarks This property is read-only.
		///
		/// \sa FirstRootItem, LastVisibleItem, TreeItems
		[propget, id(DISPID_EXTVW_LASTROOTITEM), helpstring("Retrieves the control's last top-level item."), nonbrowsable]
		HRESULT LastRootItem([out, retval] ITreeViewItem** ppLastItem);
		/// \brief <em>Retrieves the last item that is displayed in the control's client area</em>
		///
		/// Retrieves the last item, that is entirely located in the control's client area and therefore
		/// visible to the user.
		///
		/// \remarks This property is read-only.
		///
		/// \sa FirstVisibleItem, LastRootItem, TreeItems
		[propget, id(DISPID_EXTVW_LASTVISIBLEITEM), helpstring("Retrieves the last item, that is entirely located in the control's client area and therefore visible to the user."), nonbrowsable]
		HRESULT LastVisibleItem([out, retval] ITreeViewItem** ppLastItem);
		/// \brief <em>Specifies the color of the control's tree lines</em>
		///
		/// Retrieves or sets the control's line color, which is used to draw the tree lines visualizing
		/// the hierarchy.
		///
		/// \sa LineStyle, TreeViewStyle, BackColor, ForeColor, InsertMarkColor
		[propget, id(DISPID_EXTVW_LINECOLOR), helpstring("Retrieves or sets the control's line color, which is used to draw the tree lines visualizing the hierarchy.")]
		HRESULT LineColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_EXTVW_LINECOLOR), helpstring("Retrieves or sets the control's line color, which is used to draw the tree lines visualizing the hierarchy.")]
		HRESULT LineColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the style of the control's tree lines</em>
		///
		/// Retrieves or sets the control's line-style. Any of the values defined by the \c LineStyleConstants
		/// enumeration is valid.
		///
		/// \sa LineColor, TreeViewStyle, LineStyleConstants
		[propget, id(DISPID_EXTVW_LINESTYLE), helpstring("Retrieves or sets the control's line-style.")]
		HRESULT LineStyle([out, retval] LineStyleConstants* pValue);
		[propput, id(DISPID_EXTVW_LINESTYLE), helpstring("Retrieves or sets the control's line-style.")]
		HRESULT LineStyle([in] LineStyleConstants newValue);
		/// \brief <em>Controls the scrolling speed</em>
		///
		/// Retrieves or sets the number of milliseconds the control may need to scroll its content.
		[propget, id(DISPID_EXTVW_MAXSCROLLTIME), helpstring("Retrieves or sets the number of milliseconds the control may need to scroll its content.")]
		HRESULT MaxScrollTime([out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_MAXSCROLLTIME), helpstring("Retrieves or sets the number of milliseconds the control may need to scroll its content.")]
		HRESULT MaxScrollTime([in] LONG newValue);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets a user-defined mouse cursor. It's used if \c MousePointer is set to
		/// \c mpCustom.
		///
		/// \sa MousePointer, MousePointerConstants
		[propget, id(DISPID_EXTVW_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([out, retval] IPictureDisp** ppMouseIcon);
		[propput, id(DISPID_EXTVW_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		[propputref, id(DISPID_EXTVW_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's
		/// client area. Any of the values defined by the \c MousePointerConstants enumeration is valid.
		///
		/// \sa MouseIcon, MousePointerConstants
		[propget, id(DISPID_EXTVW_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([out, retval] MousePointerConstants* pValue);
		[propput, id(DISPID_EXTVW_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([in] MousePointerConstants newValue);
		/// \brief <em>Specifies the appearance of the OLE drag images generated by the control</em>
		///
		/// Retrieves or sets the appearance of the OLE drag images generated by the control. Any of the values
		/// defined by the \c OLEDragImageStyleConstants enumeration is valid.
		///
		/// \sa SupportOLEDragImages, OLEDrag, OLEDragImageStyleConstants
		[propget, id(DISPID_EXTVW_OLEDRAGIMAGESTYLE), helpstring("Retrieves or sets the appearance of the OLE drag images generated by the control.")]
		HRESULT OLEDragImageStyle([out, retval] OLEDragImageStyleConstants* pValue);
		[propput, id(DISPID_EXTVW_OLEDRAGIMAGESTYLE), helpstring("Retrieves or sets the appearance of the OLE drag images generated by the control.")]
		HRESULT OLEDragImageStyle([in] OLEDragImageStyleConstants newValue);
		/// \brief <em>Specifies whether the \c ContextMenu event can be invoked using the keyboard</em>
		///
		/// Retrieves or sets whether the control fires the \c ContextMenu and \c EditContextMenu events if the
		/// user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU]. If set to \c True, the events get fired;
		/// otherwise not.
		///
		/// \sa _IExplorerTreeViewEvents::ContextMenu, _IExplorerTreeViewEvents::EditContextMenu
		[propget, id(DISPID_EXTVW_PROCESSCONTEXTMENUKEYS), helpstring("Retrieves or sets whether the control fires the 'ContextMenu' and 'EditContextMenu' events if the user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU].")]
		HRESULT ProcessContextMenuKeys([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_PROCESSCONTEXTMENUKEYS), helpstring("Retrieves or sets whether the control fires the 'ContextMenu' and 'EditContextMenu' events if the user presses [SHIFT]+[F10] or [WINDOWS CONTEXTMENU].")]
		HRESULT ProcessContextMenuKeys([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's programmer(s)</em>
		///
		///   Retrieves the name(s) of the control's programmer(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Tester
		/// \endif
		[propget, id(DISPID_EXTVW_PROGRAMMER), hidden]
		HRESULT Programmer([out, retval] BSTR* pValue);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control is registered as a target for OLE drag'n'drop. If set to
		/// \c True, the control accepts OLE drag'n'drop actions; otherwise not.
		///
		/// \sa AllowDragDrop, SupportOLEDragImages, _IExplorerTreeViewEvents::OLEDragEnter
		[propget, id(DISPID_EXTVW_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the style of the control's tooltips</em>
		///
		/// Retrieves or sets whether the control's tooltips are "rich formatted", i.e. they include the item's
		/// icon. If set to \c True, the tooltips include the item's icon; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 6.10 or higher.
		///
		/// \sa ShowToolTips, hWndToolTip, _IExplorerTreeViewEvents::ItemGetInfoTipText
		[propget, id(DISPID_EXTVW_RICHTOOLTIPS), helpstring("Retrieves or sets whether the control's tooltips are \"rich formatted\", i.e. they include the item's icon. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT RichToolTips([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_RICHTOOLTIPS), helpstring("Retrieves or sets whether the control's tooltips are \"rich formatted\", i.e. they include the item's icon. Requires comctl32.dll version 6.10 or higher.")]
		HRESULT RichToolTips([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's right-to-left features</em>
		///
		/// Enables or disables bidirectional features. Any combination of the values defined by the
		/// \c RightToLeftConstants enumeration is valid.
		///
		/// \attention Setting or clearing the \c rtlLayout flag destroys and recreates the control window.
		///
		/// \sa IMEMode, RightToLeftConstants
		[propget, id(DISPID_EXTVW_RIGHTTOLEFT), helpstring("Enables or disables bidirectional features. Setting or clearing the 'rtlLayout' flag destroys and recreates the control window.")]
		HRESULT RightToLeft([out, retval] RightToLeftConstants* pValue);
		[propput, id(DISPID_EXTVW_RIGHTTOLEFT), helpstring("Enables or disables bidirectional features. Setting or clearing the 'rtlLayout' flag destroys and recreates the control window.")]
		HRESULT RightToLeft([in] RightToLeftConstants newValue);
		/// \brief <em>Retrieves the control's top-level items</em>
		///
		/// Retrieves a collection object wrapping the top-level items.
		///
		/// \remarks This property is read-only.
		///
		/// \sa TreeItems, ITreeViewItems
		[propget, id(DISPID_EXTVW_ROOTITEMS), helpstring("Retrieves a collection object wrapping the top-level items."), nonbrowsable]
		HRESULT RootItems([out, retval] ITreeViewItems** ppItems);
		/// \brief <em>Specifies the scrollbars to show</em>
		///
		/// Retrieves or sets the scrollbars to show if necessary. Any of the values defined by the
		/// \c ScrollBarsConstants enumeration is valid.
		///
		/// \attention Changing this property may destroy and recreate the control window.
		///
		/// \sa AutoHScroll, ScrollBarsConstants
		[propget, id(DISPID_EXTVW_SCROLLBARS), helpstring("Retrieves or sets the scrollbars to show if necessary. Changing this property may destroy and recreate the control window.")]
		HRESULT ScrollBars([out, retval] ScrollBarsConstants* pValue);
		[propput, id(DISPID_EXTVW_SCROLLBARS), helpstring("Retrieves or sets the scrollbars to show if necessary. Changing this property may destroy and recreate the control window.")]
		HRESULT ScrollBars([in] ScrollBarsConstants newValue);
		/// \brief <em>Controls the visibility of the control's drag image</em>
		///
		/// Retrieves or sets whether the drag image is currently visible or hidden. If set to \c True, it
		/// is visible; otherwise it is hidden.
		///
		/// \sa hDragImageList, SupportOLEDragImages, _IExplorerTreeViewEvents::DragMouseMove
		[propget, id(DISPID_EXTVW_SHOWDRAGIMAGE), helpstring("Retrieves or sets whether the drag image is currently visible."), nonbrowsable]
		HRESULT ShowDragImage([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_SHOWDRAGIMAGE), helpstring("Retrieves or sets whether the drag image is currently visible."), nonbrowsable]
		HRESULT ShowDragImage([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control draws state images next to the items</em>
		///
		/// Retrieves or sets whether the control draws a state image (usually a checkbox) to the left of
		/// each item. If set to \c True, the state images are drawn; otherwise not.
		///
		/// \attention Changing this property may destroy and recreate the control window.
		///
		/// \remarks If you set this property to \c True, you should set the \c BlendSelectedItemsIcons
		///          property to \c False to avoid drawing bugs.
		///
		/// \sa BuiltInStateImages, hImageList, IndentStateImages, BlendSelectedItemsIcons,
		///     ITreeViewItem::StateImageIndex
		[propget, id(DISPID_EXTVW_SHOWSTATEIMAGES), helpstring("Retrieves or sets whether the control draws a state image (usually a checkbox) to the left of each item. Changing this property may destroy and recreate the control window.")]
		HRESULT ShowStateImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_SHOWSTATEIMAGES), helpstring("Retrieves or sets whether the control draws a state image (usually a checkbox) to the left of each item. Changing this property may destroy and recreate the control window.")]
		HRESULT ShowStateImages([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control displays any tooltips</em>
		///
		/// Retrieves or sets whether the control displays any tooltips. A treeview knows two kinds of
		/// tooltips: Tooltips that display the complete text of truncated items and so-called info tips
		/// displaying details about the item that the mouse cursor is placed over.\n
		/// If you set this property to \c True, the truncated items' tooltips are displayed and the
		/// \c ItemGetInfoTipText event is fired for the item below the mouse cursor. Otherwise no
		/// tooltips are shown.
		///
		/// \sa hWndToolTip, RichToolTips, ITreeViewItem::DisplayInfoTip,
		///     _IExplorerTreeViewEvents::ItemGetInfoTipText
		[propget, id(DISPID_EXTVW_SHOWTOOLTIPS), helpstring("Retrieves or sets whether the control displays any tooltips.")]
		HRESULT ShowToolTips([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_SHOWTOOLTIPS), helpstring("Retrieves or sets whether the control displays any tooltips.")]
		HRESULT ShowToolTips([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's behavior during item expansion</em>
		///
		/// Retrieves or sets the way items are expanded and collapsed. Any of the values defined by
		/// the \c SingleExpandConstants enumeration is valid.
		///
		/// \sa _IExplorerTreeViewEvents::SingleExpanding, FullRowSelect, HotTracking, FavoritesStyle,
		///     SingleExpandConstants
		[propget, id(DISPID_EXTVW_SINGLEEXPAND), helpstring("Retrieves or sets the way items are expanded and collapsed.")]
		HRESULT SingleExpand([out, retval] SingleExpandConstants* pValue);
		[propput, id(DISPID_EXTVW_SINGLEEXPAND), helpstring("Retrieves or sets the way items are expanded and collapsed.")]
		HRESULT SingleExpand([in] SingleExpandConstants newValue);
		/// \brief <em>Specifies the control's sorting direction</em>
		///
		/// Retrieves or sets the direction items are sorted in. Any of the values defined by the
		/// \c SortOrderConstants enumeration is valid.
		///
		/// \sa SortItems, SortOrderConstants
		[propget, id(DISPID_EXTVW_SORTORDER), helpstring("Retrieves or sets the direction items are sorted in.")]
		HRESULT SortOrder([out, retval] SortOrderConstants* pValue);
		[propput, id(DISPID_EXTVW_SORTORDER), helpstring("Retrieves or sets the direction items are sorted in.")]
		HRESULT SortOrder([in] SortOrderConstants newValue);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control creates \c IDropTargetHelper and \c IDragSourceHelper
		/// objects, so that a drag image can be displayed during OLE drag'n'drop. If set to \c True, the
		/// control creates the objects; otherwise not.
		///
		/// \remarks Requires shell32.dll version 5.0 or higher.
		///
		/// \sa RegisterForOLEDragDrop, hImageList, ShowDragImage, OLEDragImageStyle, FinishOLEDragDrop,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646238.aspx">IDropTargetHelper</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646441.aspx">IDragSourceHelper</a>
		[propget, id(DISPID_EXTVW_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates 'IDropTargetHelper' and 'IDragSourceHelper' objects, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates 'IDropTargetHelper' and 'IDragSourceHelper' objects, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's tester(s)</em>
		///
		///   Retrieves the name(s) of the control's tester(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Programmer
		/// \endif
		[propget, id(DISPID_EXTVW_TESTER), hidden]
		HRESULT Tester([out, retval] BSTR* pValue);
		/// \brief <em>Retrieves the control's items</em>
		///
		/// Retrieves a collection object wrapping the treeview items.
		///
		/// \remarks This property is read-only.
		///
		/// \sa RootItems, ITreeViewItems
		[propget, id(DISPID_EXTVW_TREEITEMS), helpstring("Retrieves a collection object wrapping the control's items."), nonbrowsable]
		HRESULT TreeItems([out, retval] ITreeViewItems** ppItems);
		/// \brief <em>Controls which visual elements the control displays</em>
		///
		/// Enables or disables some of the control's visual elements. Any combination of the values defined
		/// by the \c TreeViewStyleConstants enumeration is valid.
		///
		/// \remarks If this property is set to a value that includes \c tvsLines while the \c FullRowSelect
		///          property is set to \c True, the \c FullRowSelect property will be changed to \c False.
		///
		/// \sa LineStyle, FullRowSelect, ITreeViewItem::HasExpando, TreeViewStyleConstants
		[propget, id(DISPID_EXTVW_TREEVIEWSTYLE), helpstring("Enables or disables some of the control's visual elements.")]
		HRESULT TreeViewStyle([out, retval] TreeViewStyleConstants* pValue);
		[propput, id(DISPID_EXTVW_TREEVIEWSTYLE), helpstring("Enables or disables some of the control's visual elements.")]
		HRESULT TreeViewStyle([in] TreeViewStyleConstants newValue);
		/// \brief <em>Specifies whether the control uses the system font</em>
		///
		/// Retrieves or sets whether the control uses the system's default treeview font or the font
		/// specified by the \c Font property. If set to \c True, the system font; otherwise the specified
		/// font is used.
		///
		/// \sa Font
		[propget, id(DISPID_EXTVW_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the system's default treeview font or the font specified by the 'Font' property.")]
		HRESULT UseSystemFont([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_EXTVW_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the system's default treeview font or the font specified by the 'Font' property.")]
		HRESULT UseSystemFont([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the control's version</em>
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_EXTVW_VERSION), helpstring("Retrieves the control's version."), nonbrowsable]
		HRESULT Version([out, retval] BSTR* pValue);

		/// \brief <em>Displays the control's credits</em>
		///
		/// Displays some information about this control and its author.
		[id(DISPID_EXTVW_ABOUT), helpstring("Displays some information about this control and its author.")]
		HRESULT About(void);
		/// \brief <em>Enters drag'n'drop mode</em>
		///
		/// \param[in] draggedItems A collection object containing the items to drag.
		/// \param[in] hDragImageList The imagelist containing the drag image that shall be used to
		///            visualize the drag'n'drop operation. If -1, the control creates the drag image
		///            itself; if \c 0, no drag image is used.
		/// \param[in,out] xHotSpot The x-coordinate (in pixels) of the drag image's hotspot relative to the
		///                drag image's upper-left corner. If the \c hDragImageList parameter is set to -1 or
		///                0, this parameter is ignored. This parameter will be changed to the value that
		///                finally was used by the method.
		/// \param[in,out] yHotSpot The y-coordinate (in pixels) of the drag image's hotspot relative to the
		///                drag image's upper-left corner. If the \c hDragImageList parameter is set to -1 or
		///                0, this parameter is ignored. This parameter will be changed to the value that
		///                finally was used by the method.
		///
		/// \sa OLEDrag, DraggedItems, EndDrag, hDragImageList,
		///     _IExplorerTreeViewEvents::ItemBeginDrag, _IExplorerTreeViewEvents::ItemBeginRDrag,
		///     ITreeViewItem::CreateDragImage, ITreeViewItemContainer::CreateDragImage
		[id(DISPID_EXTVW_BEGINDRAG), helpstring("Enters drag'n'drop mode.")]
		HRESULT BeginDrag([in] ITreeViewItemContainer* draggedItems, [in, defaultvalue(0)] OLE_HANDLE hDragImageList, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xHotSpot, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yHotSpot);
		/// \brief <em>Calculates the maximum number of entirely visible items within the treeview</em>
		///
		/// Retrieves the number of items that fit entirely into the control's client area.
		///
		/// \return The maximum number of simultaneous visible items.
		///
		/// \sa ITreeViewItems::Count
		[id(DISPID_EXTVW_COUNTVISIBLE), helpstring("Retrieves the number of items that fit entirely into the control's client area.")]
		HRESULT CountVisible([out, retval] LONG* pValue);
		/// \brief <em>Creates a new \c TreeViewItemContainer object</em>
		///
		/// Retrieves a new \c TreeViewItemContainer object and fills it with the specified items.
		///
		/// \param[in] items The item(s) to add to the collection. May be either \c Empty, an item ID, a
		///            \c TreeViewItem object or a \c TreeViewItems collection.
		///
		/// \return The created \c TreeViewItemContainer object.
		///
		/// \sa ITreeViewItemContainer::Clone, ITreeViewItemContainer::Add
		[id(DISPID_EXTVW_CREATEITEMCONTAINER), helpstring("Retrieves a new 'TreeViewItemContainer' object and fills it with 'items'.")]
		HRESULT CreateItemContainer([in, optional] VARIANT items, [out, retval] ITreeViewItemContainer** ppContainer);
		/// \brief <em>Exits drag'n'drop mode</em>
		///
		/// \param[in] abort If \c True, the drag'n'drop operation will be treated as aborted; otherwise
		///            it will be treated as a drop.
		///
		/// \sa DraggedItems, BeginDrag, _IExplorerTreeViewEvents::AbortedDrag,
		///     _IExplorerTreeViewEvents::Drop
		[id(DISPID_EXTVW_ENDDRAG), helpstring("Exits drag'n'drop mode.")]
		HRESULT EndDrag([in] VARIANT_BOOL abort);
		/// \brief <em>Ends label-editing</em>
		///
		/// Ends editing the item's text.
		///
		/// \param[in] discard Specifies whether to apply or discard the text contained by the label-edit
		///            control at the time this method is called. If set to \c True, the text is
		///            discarded and the edited item's text remains the same; otherwise the edited item's
		///            text is changed to the text contained by the label-edit control at the time this
		///            method is called.
		///
		/// \sa ITreeViewItem::StartLabelEditing, _IExplorerTreeViewEvents::RenamedItem,
		///     _IExplorerTreeViewEvents::ItemSetText
		[id(DISPID_EXTVW_ENDLABELEDIT), helpstring("Ends editing the item's text.")]
		HRESULT EndLabelEdit([in] VARIANT_BOOL discard);
		/// \brief <em>Retrieves the position of the control's insertion mark</em>
		///
		/// \param[out] relativePosition The insertion mark's position relative to the specified item. The
		///             following values, defined by the \c InsertMarkPositionConstants enumeration, are
		///             valid: \c impBefore, \c impAfter, \c impNowhere.
		/// \param[out] treeItem The item at which the insertion mark is displayed.
		///
		/// \sa SetInsertMarkPosition, InsertMarkPositionConstants
		[id(DISPID_EXTVW_GETINSERTMARKPOSITION), helpstring("Retrieves the position of the control's insertion mark.")]
		HRESULT GetInsertMarkPosition([in, out] InsertMarkPositionConstants* relativePosition, [in, out] ITreeViewItem** treeItem);
		/// \brief <em>Hit-tests the specified point</em>
		///
		/// Retrieves the control's parts that lie below the point ('x'; 'y').
		///
		/// \param[in] x The x-coordinate (in pixels) of the point to check. It must be relative to the
		///            control's upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the point to check. It must be relative to the
		///            control's upper-left corner.
		/// \param[in,out] hitTestDetails Receives a value specifying the exact part of the control the
		///                specified point lies in. Any of the values defined by the \c HitTestConstants
		///                enumeration is valid.
		///
		/// \return The item that the specified point belongs to. \c Nothing, if no item was "hit".
		///
		/// \sa ItemBoundingBoxDefinition, HitTestConstants
		[id(DISPID_EXTVW_HITTEST), helpstring("Retrieves the control's parts that lie below the point ('x'; 'y').")]
		HRESULT HitTest([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y, [in, out] HitTestConstants* hitTestDetails, [out, retval] ITreeViewItem** ppHitItem);
		/// \brief <em>Loads the control's settings from the specified file</em>
		///
		/// \param[in] file The file to read from.
		///
		/// \return \c True if the settings could be loaded; otherwise \c False.
		///
		/// \sa SaveSettingsToFile
		[id(DISPID_EXTVW_LOADSETTINGSFROMFILE), helpstring("Loads the control's settings from the specified file.")]
		HRESULT LoadSettingsFromFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Enters OLE drag'n'drop mode</em>
		///
		/// \param[in] pDataObject A pointer to the \c IDataObject implementation to use during OLE
		///            drag'n'drop. If not specified, the control's own implementation is used.
		/// \param[in] supportedEffects A bit field defining all drop effects you want to support. Any
		///            combination of the values defined by the \c OLEDropEffectConstants enumeration
		///            (except \c odeScroll) is valid.
		/// \param[in] hWndToAskForDragImage The handle of the window, that will receive the
		///            \c DI_GETDRAGIMAGE message to specify the drag image to use. If -1, the control
		///            creates the drag image itself.\n
		///            If \c SupportOLEDragImages is set to \c False, no drag image is used.
		/// \param[in] draggedItems A collection object containing the items to drag. This parameter is
		///            used to generate the drag image, if \c hWndToAskForDragImage is set to -1.
		/// \param[in] itemCountToDisplay The number to display in the item count label of Aero drag images.
		///            If set to 0 or 1, no item count label is displayed. If set to -1, the number of items
		///            contained in the \c draggedItems collection is displayed in the item count label. If
		///            set to any value larger than 1, this value is displayed in the item count label.
		///
		/// \return The performed drop effect. Any of the values defined by the \c OLEDropEffectConstants
		///         enumeration (except \c odeScroll) is valid.
		///
		/// \sa BeginDrag, _IExplorerTreeViewEvents::ItemBeginDrag, _IExplorerTreeViewEvents::ItemBeginRDrag,
		///     _IExplorerTreeViewEvents::OLEStartDrag, _IExplorerTreeViewEvents::OLEGiveFeedback,
		///     _IExplorerTreeViewEvents::OLEQueryContinueDrag, SupportOLEDragImages, OLEDragImageStyle,
		///     OLEDropEffectConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646443.aspx">DI_GETDRAGIMAGE</a>
		[id(DISPID_EXTVW_OLEDRAG), helpstring("Enters OLE drag'n'drop mode.")]
		HRESULT OLEDrag([in, defaultvalue(NULL)] LONG* pDataObject, [in, defaultvalue(odeCopyOrMove)] OLEDropEffectConstants supportedEffects, [in, defaultvalue(-1)] OLE_HANDLE hWndToAskForDragImage, [in, defaultvalue(NULL)] ITreeViewItemContainer* draggedItems, [in, defaultvalue(-1)] LONG itemCountToDisplay, [out, retval] OLEDropEffectConstants* pPerformedEffects);
		/// \brief <em>Advises the control to redraw itself</em>
		[id(DISPID_EXTVW_REFRESH), helpstring("Advises the control to redraw itself.")]
		HRESULT Refresh(void);
		/// \brief <em>Saves the control's settings to the specified file</em>
		///
		/// \param[in] file The file to write to.
		///
		/// \return \c True if the settings could be saved; otherwise \c False.
		///
		/// \sa LoadSettingsFromFile
		[id(DISPID_EXTVW_SAVESETTINGSTOFILE), helpstring("Saves the control's settings to the specified file.")]
		HRESULT SaveSettingsToFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Sets the position of the control's insertion mark</em>
		///
		/// \param[in] relativePosition The insertion mark's position relative to the specified item. Any
		///            of the values defined by the \c InsertMarkPositionConstants enumeration is valid.
		/// \param[in] treeItem The item at which to show the insertion mark. If set to \c Nothing, the
		///            insertion mark is removed.
		///
		/// \sa GetInsertMarkPosition, InsertMarkColor, AllowDragDrop, RegisterForOLEDragDrop,
		///     InsertMarkPositionConstants
		[id(DISPID_EXTVW_SETINSERTMARKPOSITION), helpstring("Sets the position of the control's insertion mark.")]
		HRESULT SetInsertMarkPosition([in] InsertMarkPositionConstants relativePosition, [in] ITreeViewItem* treeItem);
		/// \brief <em>Sorts the control's top-level items</em>
		///
		/// Sorts the control's top-level items by up to 5 criteria.
		///
		/// \param[in] firstCriterion The first criterion by which to sort. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] secondCriterion The second criterion by which to sort. It is used if two items are
		///            equivalent regarding the first criterion. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] thirdCriterion The third criterion by which to sort. It is used if two items are
		///            equivalent regarding the first 2 criteria. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] fourthCriterion The fourth criterion by which to sort. It is used if two items are
		///            equivalent regarding the first 3 criteria. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] fifthCriterion The fifth criterion by which to sort. It is used if two items are
		///            equivalent regarding the first 4 criteria. Any of the values defined by the
		///            \c SortByConstants enumeration is valid.
		/// \param[in] recurse If \c False, only the top-level items are sorted; otherwise all items are
		///            sorted recursively.
		/// \param[in] caseSensitive If \c True, string comparisons are case sensitive; otherwise not.
		///
		/// \sa SortOrder, ITreeViewItem::SortSubItems, _IExplorerTreeViewEvents::CompareItems,
		///     SortByConstants
		[id(DISPID_EXTVW_SORTITEMS), helpstring("Sorts the control's top-level items.")]
		HRESULT SortItems([in, defaultvalue(sobShell)] SortByConstants firstCriterion, [in, defaultvalue(sobText)] SortByConstants secondCriterion, [in, defaultvalue(sobNone)] SortByConstants thirdCriterion, [in, defaultvalue(sobNone)] SortByConstants fourthCriterion, [in, defaultvalue(sobNone)] SortByConstants fifthCriterion, [in, defaultvalue(0)] VARIANT_BOOL recurse, [in, defaultvalue(0)] VARIANT_BOOL caseSensitive);

		/// \brief <em>Specifies which locale to use when sorting items</em>
		///
		/// Retrieves or sets the unique ID of the locale to use when sorting the tree view items.
		///
		/// \remarks The locale is used when sorting using the \c sobNumericIntText, \c sobNumericFloatText,
		///          \c sobCurrencyText or \c sobDateTimeText sorting criterion.
		///
		/// \sa TextParsingFlags, SortItems, SortByConstants
		[propget, id(DISPID_EXTVW_LOCALE), helpstring("Retrieves or sets the unique ID of the locale to use when sorting the tree view items."), nonbrowsable]
		HRESULT Locale([out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_LOCALE), helpstring("Retrieves or sets the unique ID of the locale to use when sorting the tree view items."), nonbrowsable]
		HRESULT Locale([in] LONG newValue);
		/// \brief <em>Controls how text is parsed when sorting items</em>
		///
		/// Retrieves or sets the options to apply when parsing the item text into a numerical or date value.
		/// The parsing results may be used when sorting the tree view items.
		///
		/// \param[in] parsingFunction Specifies the parsing function for which to retrieve or set the options.
		///            Any of the values defined by the \c TextParsingFunctionConstants enumeration is valid.
		///
		/// \remarks The parsing options are used when sorting using the \c sobNumericIntText,
		///          \c sobNumericFloatText, \c sobCurrencyText or \c sobDateTimeText sorting criterion.\n
		///          They are also used when sorting using the \c sobText criterion if a specific locale
		///          identifier has been set.
		///
		/// \sa Locale, SortItems, SortByConstants, TextParsingFunctionConstants
		[propget, id(DISPID_EXTVW_TEXTPARSINGFLAGS), helpstring("Retrieves or sets the options to apply when parsing the item text into a numerical or date value. The parsing results may be used when sorting the tree view items."), nonbrowsable]
		HRESULT TextParsingFlags([in] TextParsingFunctionConstants parsingFunction, [out, retval] LONG* pValue);
		[propput, id(DISPID_EXTVW_TEXTPARSINGFLAGS), helpstring("Retrieves or sets the options to apply when parsing the item text into a numerical or date value. The parsing results may be used when sorting the tree view items."), nonbrowsable]
		HRESULT TextParsingFlags([in] TextParsingFunctionConstants parsingFunction, [in] LONG newValue);
		/// \brief <em>Finishes a pending drop operation</em>
		///
		/// During a drag'n'drop operation the drag image is displayed until the \c OLEDragDrop event has been
		/// handled. This order is intended by Microsoft Windows. However, if a message box is displayed from
		/// within the \c OLEDragDrop event, or the drop operation cannot be performed asynchronously and takes
		/// a long time, it may be desirable to remove the drag image earlier.\n
		/// This method will break the intended order and finish the drag'n'drop operation (including removal
		/// of the drag image) immediately.
		///
		/// \remarks This method will fail if not called from the \c OLEDragDrop event handler or if no drag
		///          images are used.
		///
		/// \sa _IExplorerTreeViewEvents::OLEDragDrop, SupportOLEDragImages
		[id(DISPID_EXTVW_FINISHOLEDRAGDROP), helpstring("Finishes a pending drop operation from within the 'OLEDragDrop' event, removing the drag image, but breaking the intended order. See documentation for details.")]
		HRESULT FinishOLEDragDrop(void);
	};


	/// \interface _IExplorerTreeViewEvents
	/// \brief <em>The \c ExplorerTreeView class' events interface</em>
	///
	/// This interface defines all events the \c ExplorerTreeView class may raise.
	///
	/// \sa IExplorerTreeView
	[
		uuid(850D24B7-A753-47c7-9387-DD64A428C6DB),
		helpstring("IExplorerTreeView-event-interface")
	]
	dispinterface _IExplorerTreeViewEvents
	{
		properties:
		methods:
			/// \brief <em>The caret was changed</em>
			///
			/// Will be fired after another item became the caret item. The caret item is the item that has
			/// the focus.
			///
			/// \param[in] previousCaretItem The previous caret item.
			/// \param[in] newCaretItem The new caret item.
			/// \param[in] caretChangeReason The reason for the caret change. Any of the values defined by
			///            the \c CaretChangeCausedByConstants enumeration is valid.
			///
			/// \remarks This is the control's default event.
			///
			/// \sa IExplorerTreeView::CaretChangedDelayTime, CaretChanging, ItemSelectionChanged,
			///     SingleExpanding, ITreeViewItem::Caret, IExplorerTreeView::CaretItem,
			///     CaretChangeCausedByConstants
			[id(DISPID_EXTVWE_CARETCHANGED), helpstring("Will be fired after another item became the caret item. The caret item is the item that has the focus.")]
			void CaretChanged(ITreeViewItem* previousCaretItem, ITreeViewItem* newCaretItem, CaretChangeCausedByConstants caretChangeReason);
			/// \brief <em>A drag'n'drop operation was aborted</em>
			///
			/// Will be fired if a drag'n'drop operation was aborted.
			///
			/// \sa Drop, IExplorerTreeView::EndDrag
			[id(DISPID_EXTVWE_ABORTEDDRAG), helpstring("Will be fired if a drag'n'drop operation was aborted.")]
			void AbortedDrag(void);
			/// \brief <em>The caret is about to change</em>
			///
			/// Will be fired before another item becomes the caret item. The caret item is the item that has
			/// the focus.
			///
			/// \param[in] previousCaretItem The previous caret item.
			/// \param[in] newCaretItem The new caret item.
			/// \param[in] caretChangeReason The reason for the caret change. Any of the values defined by
			///            the \c CaretChangeCausedByConstants enumeration is valid.
			/// \param[in,out] cancelCaretChange If set to \c True, the caret change is aborted, i. e. the
			///                current caret item remains the caret item. In this case the \c CaretChanged
			///                event isn't fired. If set to \c False, the caret change is completed.
			///
			/// \sa CaretChanged, ItemSelectionChanging, SingleExpanding, ITreeViewItem::Caret,
			///     IExplorerTreeView::CaretItem, CaretChangeCausedByConstants
			[id(DISPID_EXTVWE_CARETCHANGING), helpstring("Will be fired before another item becomes the caret item. The caret item is the item that has the focus.")]
			void CaretChanging(ITreeViewItem* previousCaretItem, ITreeViewItem* newCaretItem, CaretChangeCausedByConstants caretChangeReason, VARIANT_BOOL* cancelCaretChange);
			/// \brief <em>The control's sort order was changed</em>
			///
			/// Will be fired after the control's sort order has been redefined.
			///
			/// \param[in] previousSortOrder The control's old sort order. Any of the values defined by the
			///            \c SortOrderConstants enumeration is valid.
			/// \param[in] newSortOrder The control's new sort order. Any of the values defined by the
			///            \c SortOrderConstants enumeration is valid.
			///
			/// \sa ChangingSortOrder, IExplorerTreeView::SortOrder, SortOrderConstants
			[id(DISPID_EXTVWE_CHANGEDSORTORDER), helpstring("Will be fired after the control's sort order has been redefined.")]
			void ChangedSortOrder(SortOrderConstants previousSortOrder, SortOrderConstants newSortOrder);
			/// \brief <em>The control's sort order is about to be changed</em>
			///
			/// Will be fired before the control's sort order is redefined.
			///
			/// \param[in] previousSortOrder The control's old sort order. Any of the values defined by the
			///            \c SortOrderConstants enumeration is valid.
			/// \param[in] newSortOrder The control's new sort order. Any of the values defined by the
			///            \c SortOrderConstants enumeration is valid.
			/// \param[in,out] cancelChange If set to \c True, redefining is aborted, i. e. the sort order
			///                remains the same. If set to \c False, the sort order is redefined.
			///
			/// \sa ChangedSortOrder, IExplorerTreeView::SortOrder, SortOrderConstants
			[id(DISPID_EXTVWE_CHANGINGSORTORDER), helpstring("Will be fired before the control's sort order is redefined.")]
			void ChangingSortOrder(SortOrderConstants previousSortOrder, SortOrderConstants newSortOrder, VARIANT_BOOL* cancelChange);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the left mouse button.
			///
			/// \param[in] treeItem The item that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa DblClick, MClick, RClick, XClick, HitTestConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_CLICK), helpstring("Will be fired if the user clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void Click(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>An item was collapsed</em>
			///
			/// Will be fired after an item's immediate sub-items were collapsed.
			///
			/// \param[in] treeItem The immediate parent item of the items that were collapsed.
			/// \param[in] removedAllSubItems If \c True, the item's sub-items were removed; otherwise they
			///            simply were collapsed.
			///
			/// \sa CollapsingItem, ExpandedItem, ITreeViewItem::Collapse
			[id(DISPID_EXTVWE_COLLAPSEDITEM), helpstring("Will be fired after an item's immediate sub-items were collapsed.")]
			void CollapsedItem(ITreeViewItem* treeItem, VARIANT_BOOL removedAllSubItems);
			/// \brief <em>An item is about to get collapsed</em>
			///
			/// Will be fired before an item's immediate sub-items get collapsed.
			///
			/// \param[in] treeItem The immediate parent item of the items that get collapsed.
			/// \param[in] removingAllSubItems If \c True, the item's sub-items get removed; otherwise they
			///            simply get collapsed.
			/// \param[in,out] cancelCollapse If set to \c True, the collapse action is aborted, i. e. the
			///                item remains expanded. In this case the \c CollapsedItem event isn't fired.
			///                If set to \c False, the collapse action is completed.
			///
			/// \sa CollapsedItem, ExpandingItem, ITreeViewItem::Collapse
			[id(DISPID_EXTVWE_COLLAPSINGITEM), helpstring("Will be fired before an item's immediate sub-items get collapsed.")]
			void CollapsingItem(ITreeViewItem* treeItem, VARIANT_BOOL removingAllSubItems, VARIANT_BOOL* cancelCollapse);
			/// \brief <em>Two items must be compared</em>
			///
			/// Will be fired during custom sorting if two items must be compared.
			///
			/// \param[in] firstItem The first item to compare.
			/// \param[in] secondItem The second item to compare.
			/// \param[in,out] result The comparison's result. Any of the values defined by the
			///                \c CompareResultConstants enumeration is valid. If \c SortOrder is set to
			///                \c soDescending, the control inverts this value.
			///
			/// \sa IExplorerTreeView::SortOrder, IExplorerTreeView::SortItems, ITreeViewItem::SortSubItems,
			///     CompareResultConstants
			[id(DISPID_EXTVWE_COMPAREITEMS), helpstring("Will be fired during custom sorting if two items must be compared.")]
			void CompareItems(ITreeViewItem* firstItem, ITreeViewItem* secondItem, CompareResultConstants* result);
			/// \brief <em>The context menu should be displayed</em>
			///
			/// Will be fired if the control's context menu should be displayed.
			///
			/// \param[in] treeItem The item the context menu refers to. Will be \c Nothing if the context
			///            menu should be displayed for the whole control instead of only for a single item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the menu's proposed position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] showDefaultMenu If set to \c True, the default context menu is displayed;
			///                otherwise the control doesn't display any context menu itself, but you may
			///                display your custom menu.
			///
			/// \sa RClick, HitTestConstants
			[id(DISPID_EXTVWE_CONTEXTMENU), helpstring("Will be fired if the control's context menu should be displayed.")]
			void ContextMenu(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>The label-edit control was created</em>
			///
			/// Will be fired after the label-edit control was created.
			///
			/// \param[in] hWndEdit The label-edit control's window handle.
			///
			/// \sa DestroyedEditControlWindow, StartingLabelEditing, IExplorerTreeView::hWndEdit
			[id(DISPID_EXTVWE_CREATEDEDITCONTROLWINDOW), helpstring("Will be fired after the label-edit control was created.")]
			void CreatedEditControlWindow(LONG hWndEdit);
			/// \brief <em>Custom drawing should be done here</em>
			///
			/// Will be fired after the control processed a \c NM_CUSTOMDRAW notification allowing custom
			/// drawing of the control's content.
			///
			/// \param[in] treeItem The item that the notification refers to. May be \c Nothing.
			/// \param[in,out] itemLevel The item's indentation level. May be changed, but this will change
			///                the visual indentation only, whereas the logical one remains the same.
			/// \param[in,out] textColor The color to draw the item's text in.
			/// \param[in,out] textBackColor The color to fill the item text's background with.
			/// \param[in] drawStage Specifies the stage of custom drawing this event was raised for. Any of
			///            the values defined by the \c CustomDrawStageConstants enumeration is valid.
			/// \param[in] itemState Specifies the item's current state (focused, selected etc.). Most of
			///            the values defined by the \c CustomDrawItemStateConstants enumeration are valid.
			/// \param[in] hDC The handle of the device context in which all drawing should take place.
			/// \param[in] drawingRectangle The bounding rectangle of the area that must be drawn.
			/// \param[in,out] furtherProcessing Controls further drawing. Most of the values defined by the
			///                \c CustomDrawReturnValuesConstants enumeration are valid.
			///
			/// \remarks If you set the \c FavoritesStyle property to \c True, this event will be fired
			///          for the \c cdsPostPaint draw stage also if you don't set the \c cdrvNotifyPostPaint
			///          flag.\n
			///          This event may be disabled.
			///
			/// \sa ITreeViewItem::Level, IExplorerTreeView::ForeColor,
			///     IExplorerTreeView::BlendSelectedItemsIcons, IExplorerTreeView::FavoritesStyle, RECTANGLE,
			///     CustomDrawStageConstants, CustomDrawItemStateConstants, CustomDrawReturnValuesConstants,
			///     IExplorerTreeView::DisabledEvents,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms650133.aspx">NM_CUSTOMDRAW (tree view)</a>
			[id(DISPID_EXTVWE_CUSTOMDRAW), helpstring("Will be fired after the control processed a 'NM_CUSTOMDRAW' notification allowing custom drawing of the control's content. This event may be disabled.")]
			void CustomDraw(ITreeViewItem* treeItem, LONG* itemLevel, OLE_COLOR* textColor, OLE_COLOR* textBackColor, CustomDrawStageConstants drawStage, CustomDrawItemStateConstants itemState, LONG hDC, RECTANGLE* drawingRectangle, CustomDrawReturnValuesConstants* furtherProcessing);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the left mouse
			/// button.
			///
			/// \param[in] treeItem The item that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa Click, MDblClick, RDblClick, XDblClick, HitTestConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_DBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void DblClick(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control window was destroyed</em>
			///
			/// Will be fired after the control window was destroyed.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa RecreatedControlWindow, IExplorerTreeView::hWnd
			[id(DISPID_EXTVWE_DESTROYEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed.")]
			void DestroyedControlWindow(LONG hWnd);
			/// \brief <em>The label-edit control was destroyed</em>
			///
			/// Will be fired after the label-edit control was destroyed.
			///
			/// \param[in] hWndEdit The label-edit control's window handle.
			///
			/// \sa CreatedEditControlWindow, StartingLabelEditing, IExplorerTreeView::hWndEdit,
			///     IExplorerTreeView::EndLabelEdit
			[id(DISPID_EXTVWE_DESTROYEDEDITCONTROLWINDOW), helpstring("Will be fired after the label-edit control was destroyed.")]
			void DestroyedEditControlWindow(LONG hWndEdit);
			/// \brief <em>The mouse cursor was moved over the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the control's client area during a
			/// drag'n'drop operation.
			///
			/// \param[in,out] dropTarget The item that is the current target of the drag'n'drop operation.
			///                You may set this parameter to another item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] yToItemTop The y-coordinate (in pixels) of the mouse cursor's position relative to the
			///            \c dropTarget item's upper border.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] autoExpandItem If set to \c True, the item specified by \c dropTarget will be
			///                auto-expanded; otherwise not. See the following <strong>remarks</strong> section for
			///                details.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set
			///                to 0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			/// \param[in,out] autoVScrollVelocity The speed multiplier for vertical auto-scrolling. If set to 0,
			///                vertical auto-scrolling is disabled; if set to a value less than 0, the control
			///                auto-scrolls upwardly; if set to a value greater than 0, the control auto-scrolls
			///                downwards. The higher/lower the value is, the faster the control scrolls.
			///
			/// \remarks Auto-expansion is timered, i. e. the timer is started after this event, if the
			///          \c dropTarget parameter specifies another item than the last time this event was
			///          fired. Setting the \c autoExpandItem parameter to \c False cancels the timer. If
			///          it isn't canceled, the item is expanded when the timer expires.
			///
			/// \sa MouseMove, OLEDragMouseMove, ITreeViewItem::GetRectangle, IExplorerTreeView::DragExpandTime,
			///     IExplorerTreeView::DragScrollTimeBase, IExplorerTreeView::DropHilitedItem,
			///     IExplorerTreeView::SetInsertMarkPosition, IExplorerTreeView::BeginDrag, HitTestConstants
			[id(DISPID_EXTVWE_DRAGMOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the control's client area during a drag'n'drop operation.")]
			void DragMouseMove(ITreeViewItem** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, LONG yToItemTop, HitTestConstants hitTestDetails, VARIANT_BOOL* autoExpandItem, LONG* autoHScrollVelocity, LONG* autoVScrollVelocity);
			/// \brief <em>A drag'n'drop operation ended successful</em>
			///
			/// Will be fired if a drag'n'drop operation ended successful.
			///
			/// \param[in] dropTarget The item that is the nearest one from the mouse cursor's position. If
			///            the mouse cursor's position lies outside the control's client area, this parameter
			///            is \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] yToItemTop The y-coordinate (in pixels) of the mouse cursor's position relative to the
			///            \c dropTarget item's upper border.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \sa AbortedDrag, IExplorerTreeView::EndDrag, HitTestConstants
			[id(DISPID_EXTVWE_DROP), helpstring("Will be fired if a drag'n'drop operation ended successful.")]
			void Drop(ITreeViewItem* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, LONG yToItemTop, HitTestConstants hitTestDetails);
			/// \brief <em>The label-edit control's text was changed</em>
			///
			/// Will be fired after the text displayed by the label-edit control was changed.
			///
			/// \sa EditKeyPress, IExplorerTreeView::EditText,
			[id(DISPID_EXTVWE_EDITCHANGE), helpstring("Will be fired after the text displayed by the label-edit control was changed.")]
			void EditChange(void);
			/// \brief <em>The user clicked into the label-edit control's client area</em>
			///
			/// Will be fired if the user clicks into the label-edit control's client area using the left mouse
			/// button.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the label-edit
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the label-edit
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditDblClick, EditMClick, EditRClick, EditXClick, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITCLICK), helpstring("Will be fired if the user clicks into the label-edit control's client area using the left mouse button. This event may be disabled.")]
			void EditClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The label-edit control's context menu should be displayed</em>
			///
			/// Will be fired if the label-edit control's context menu should be displayed.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the menu's proposed position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the menu's proposed position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in,out] showDefaultMenu If set to \c True, the default context menu is displayed;
			///                otherwise the control doesn't display any context menu itself, but you may
			///                display your custom menu.
			///
			/// \sa EditRClick
			[id(DISPID_EXTVWE_EDITCONTEXTMENU), helpstring("Will be fired if the label-edit control's context menu should be displayed.")]
			void EditContextMenu(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, VARIANT_BOOL* showDefaultMenu);
			/// \brief <em>The user double-clicked into the label-edit control's client area</em>
			///
			/// Will be fired if the user double-clicks into the label-edit control's client area using the
			/// left mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            label-edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditClick, EditMDblClick, EditRDblClick, EditXDblClick, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITDBLCLICK), helpstring("Will be fired if the user double-clicks into the label-edit control's client area using the left mouse button. This event may be disabled.")]
			void EditDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The focus was set to the label-edit control</em>
			///
			/// Will be fired after the label-edit control gained the keyboard focus.
			///
			/// \sa EditLostFocus
			[id(DISPID_EXTVWE_EDITGOTFOCUS), helpstring("Will be fired after the label-edit control gained the keyboard focus.")]
			void EditGotFocus(void);
			/// \brief <em>A key was pressed while the label-edit control has the focus</em>
			///
			/// Will be fired if the user presses a key while the label-edit control has the focus.
			///
			/// \param[in,out] keyCode The pressed key. Any of the values defined by VB's \c KeyCodeConstants
			///                enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa EditKeyUp, EditKeyPress, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITKEYDOWN), helpstring("Will be fired if the user presses a key while the label-edit control has the focus. This event may be disabled.")]
			void EditKeyDown(SHORT* keyCode, SHORT shift);
			/// \brief <em>An alphanumeric key was pressed and released while the label-edit control has the focus</em>
			///
			/// Will be fired if the user presses and releases an alphanumeric key while the label-edit control
			/// has the focus.
			///
			/// \param[in,out] keyAscii The pressed key's ASCII code.
			///
			/// \remarks You may set \c keyAscii to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa EditKeyDown, EditKeyUp, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITKEYPRESS), helpstring("Will be fired if the user presses and releases an alphanumeric key while the label-edit control has the focus. This event may be disabled.")]
			void EditKeyPress(SHORT* keyAscii);
			/// \brief <em>A key was released while the label-edit control has the focus</em>
			///
			/// Will be fired if the user releases a key while the label-edit control has the focus.
			///
			/// \param[in,out] keyCode The released key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa EditKeyDown, EditKeyPress, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITKEYUP), helpstring("Will be fired if the user releases a key while the label-edit control has the focus. This event may be disabled.")]
			void EditKeyUp(SHORT* keyCode, SHORT shift);
			/// \brief <em>The label-edit control lost the focus</em>
			///
			/// Will be fired after the label-edit control lost the keyboard focus.
			///
			/// \sa EditGotFocus
			[id(DISPID_EXTVWE_EDITLOSTFOCUS), helpstring("Will be fired after the label-edit control lost the keyboard focus.")]
			void EditLostFocus(void);
			/// \brief <em>The user clicked into the label-edit control's client area</em>
			///
			/// Will be fired if the user clicks into the label-edit control's client area using the middle
			/// mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the label-edit
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the label-edit
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMDblClick, EditClick, EditRClick, EditXClick, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITMCLICK), helpstring("Will be fired if the user clicks into the label-edit control's client area using the middle mouse button. This event may be disabled.")]
			void EditMClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user double-clicked into the label-edit control's client area</em>
			///
			/// Will be fired if the user double-clicks into the label-edit control's client area using the
			/// middle mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            label-edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMClick, EditDblClick, EditRDblClick, EditXDblClick, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITMDBLCLICK), helpstring("Will be fired if the user double-clicks into the label-edit control's client area using the middle mouse button. This event may be disabled.")]
			void EditMDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>A mouse button was pressed over the label-edit control's client area</em>
			///
			/// Will be fired if the user presses a mouse button while the mouse cursor is located over the
			/// label-edit control's client area.
			///
			/// \param[in] button The pressed mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseUp, EditClick, EditMClick, EditRClick, EditXClick, ExtendedMouseButtonConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITMOUSEDOWN), helpstring("Will be fired if the user presses a mouse button while the mouse cursor is located over the label-edit control's client area. This event may be disabled.")]
			void EditMouseDown(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved into the label-edit control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor into the label-edit control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseLeave, EditMouseHover, EditMouseMove, ExtendedMouseButtonConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the label-edit control's client area. This event may be disabled.")]
			void EditMouseEnter(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved into the label-edit control's client area a specified period of time before</em>
			///
			/// Will be fired if the mouse cursor has been located over the label-edit control's client area
			/// for the number of milliseconds specified by the \c IExplorerTreeView::EditHoverTime property.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseEnter, EditMouseLeave, EditMouseMove, IExplorerTreeView::EditHoverTime,
			///     ExtendedMouseButtonConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITMOUSEHOVER), helpstring("Will be fired if the mouse cursor has been located over the label-edit control's client area for the number of milliseconds specified by the 'EditHoverTime' property. This event may be disabled.")]
			void EditMouseHover(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved out of the label-edit control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor out of the label-edit control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseEnter, EditMouseHover, EditMouseMove, ExtendedMouseButtonConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITMOUSELEAVE), helpstring("Will be fired if the user moved the mouse cursor out of the label-edit control's client area. This event may be disabled.")]
			void EditMouseLeave(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse cursor was moved over the label-edit control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the label-edit control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseEnter, EditMouseLeave, EditMouseDown, EditMouseUp, EditMouseWheel,
			///     ExtendedMouseButtonConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITMOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the label-edit control's client area. This event may be disabled.")]
			void EditMouseMove(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>A mouse button was released over the label-edit control's client area</em>
			///
			/// Will be fired if the user releases a mouse button while the mouse cursor is located over the
			/// label-edit control's client area.
			///
			/// \param[in] button The released mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            label-edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseDown, EditClick, EditMClick, EditRClick, EditXClick, ExtendedMouseButtonConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITMOUSEUP), helpstring("Will be fired if the user releases a mouse button while the mouse cursor is located over the label-edit control's client area. This event may be disabled.")]
			void EditMouseUp(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The mouse wheel was rotated over the contained edit control's client area</em>
			///
			/// Will be fired if the user rotates the mouse wheel over the contained edit control's client area.
			///
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] scrollAxis Specifies whether the user intents to scroll vertically or horizontally.
			///            Any of the values defined by the \c ScrollAxisConstants enumeration is valid.
			/// \param[in] wheelDelta The distance the wheel has been rotated.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditMouseMove, MouseWheel, ExtendedMouseButtonConstants, ScrollAxisConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITMOUSEWHEEL), helpstring("Will be fired if the user rotates the mouse wheel over the contained edit control's client area. This event may be disabled.")]
			void EditMouseWheel(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, ScrollAxisConstants scrollAxis, SHORT wheelDelta);
			/// \brief <em>The user clicked into the label-edit control's client area</em>
			///
			/// Will be fired if the user clicks into the label-edit control's client area using the right
			/// mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the label-edit
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the label-edit
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditContextMenu, EditRDblClick, EditClick, EditMClick, EditXClick,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITRCLICK), helpstring("Will be fired if the user clicks into the label-edit control's client area using the right mouse button. This event may be disabled.")]
			void EditRClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user double-clicked into the label-edit control's client area</em>
			///
			/// Will be fired if the user double-clicks into the label-edit control's client area using the
			/// right mouse button.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            label-edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            label-edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditRClick, EditDblClick, EditMDblClick, EditXDblClick, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITRDBLCLICK), helpstring("Will be fired if the user double-clicks into the label-edit control's client area using the right mouse button. This event may be disabled.")]
			void EditRDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user clicks into the contained edit control's client area using one of the
			/// extended mouse buttons.
			///
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the contained edit
			///            control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditXDblClick, EditClick, EditMClick, EditRClick, ExtendedMouseButtonConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITXCLICK), helpstring("Will be fired if the user clicks into the contained edit control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void EditXClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>The user double-clicked into the contained edit control's client area</em>
			///
			/// Will be fired if the user double-clicks into the contained edit control's client area using one
			/// of the extended mouse buttons.
			///
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            contained edit control's upper-left corner.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa EditXClick, EditDblClick, EditMDblClick, EditRDblClick, ExtendedMouseButtonConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_EDITXDBLCLICK), helpstring("Will be fired if the user double-clicks into the contained edit control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void EditXDblClick(SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
			/// \brief <em>An item was expanded</em>
			///
			/// Will be fired after an item's immediate sub-items were expanded.
			///
			/// \param[in] treeItem The immediate parent item of the items that were expanded.
			/// \param[in] expandedPartially If \c False, the "+" button next to the item was replaced with
			///            a "-" button; otherwise the button remains a "+".
			///
			/// \sa ExpandingItem, CollapsedItem, ITreeViewItem::Expand
			[id(DISPID_EXTVWE_EXPANDEDITEM), helpstring("Will be fired after an item's immediate sub-items were expanded.")]
			void ExpandedItem(ITreeViewItem* treeItem, VARIANT_BOOL expandedPartially);
			/// \brief <em>An item is about to get expanded</em>
			///
			/// Will be fired before an item's immediate sub-items get expanded.
			///
			/// \param[in] treeItem The immediate parent item of the items that get expanded.
			/// \param[in] expandingPartially If \c False, the "+" button next to the item is replaced
			///            with a "-" button; otherwise the button remains a "+".
			/// \param[in,out] cancelExpansion: If set to \c True, the expand action is aborted, i. e. the
			///                item remains collapsed. In this case the \c ExpandedItem event isn't fired.
			///                If set to \c False, the expand action is completed.
			///
			/// \sa ExpandedItem, CollapsingItem, ITreeViewItem::Expand
			[id(DISPID_EXTVWE_EXPANDINGITEM), helpstring("Will be fired before an item's immediate sub-items get expanded.")]
			void ExpandingItem(ITreeViewItem* treeItem, VARIANT_BOOL expandingPartially, VARIANT_BOOL* cancelExpansion);
			/// \brief <em>Any data associated with an item should be freed</em>
			///
			/// Will be fired if any data associated with the specified item should be freed.
			///
			/// \param[in] treeItem The item for which to free the data.
			///
			/// \attention On program termination the application probably won't receive this event anymore,
			///            because Visual Basic shuts down the event receiver too early. So if you use this
			///            event to free any data, you should also add an event handler for \c Form_Unload (or
			///            similar) in which you iterate all items freeing their associated data.\n
			///            This event may be disabled.
			///
			/// \sa RemovingItem, RemovedItem, ITreeViewItem::ItemData, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_FREEITEMDATA), helpstring("Will be fired if any data associated with the specified item should be freed. This event may be disabled.")]
			void FreeItemData(ITreeViewItem* treeItem);
			/// \brief <em>The incremental search-string is about to be changed</em>
			///
			/// Will be fired before the control's incremental search-string is changed. This
			/// string is used to select an item based on characters entered by the user.
			///
			/// \param[in] currentSearchString The control's current incremental search-string.
			/// \param[in] keyCodeOfCharToBeAdded The key code of the character to be added to the
			///            search-string. Most of the values defined by VB's \c KeyCodeConstants enumeration
			///            are valid.
			/// \param[in,out] cancelChange If set to \c True, the character is discarded, i. e. the
			///                search-string remains the same. If set to \c False, the character is added
			///                to the search-string.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa KeyPress, IExplorerTreeView::IncrementalSearchString, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_INCREMENTALSEARCHSTRINGCHANGING), helpstring("Will be fired before the control's incremental search-string is changed. This string is used to select an item based on characters entered by the user. This event may be disabled.")]
			void IncrementalSearchStringChanging(BSTR currentSearchString, SHORT keyCodeOfCharToBeAdded, VARIANT_BOOL* cancelChange);
			/// \brief <em>An item was inserted</em>
			///
			/// Will be fired after a new item was inserted.
			///
			/// \param[in] treeItem The item that was inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertingItem, RemovedItem, ITreeViewItem, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_INSERTEDITEM), helpstring("Will be fired after a new item was inserted. This event may be disabled.")]
			void InsertedItem(ITreeViewItem* treeItem);
			/// \brief <em>An item is about to be inserted</em>
			///
			/// Will be fired before a new item is inserted.
			///
			/// \param[in] treeItem The item that is about to be inserted.
			/// \param[in,out] cancelInsertion If set to \c True, insertion is aborted, i. e. the item
			///                isn't inserted. If set to \c False, the item is inserted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa InsertedItem, RemovingItem, IVirtualTreeViewItem, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_INSERTINGITEM), helpstring("Will be fired before a new item is inserted. This event may be disabled.")]
			void InsertingItem(IVirtualTreeViewItem* treeItem, VARIANT_BOOL* cancelInsertion);
			/// \brief <em>Drawing an item's icon asynchronously failed</em>
			///
			/// Will be fired if drawing an item's icon asynchronously failed.
			///
			/// \param[in] treeItem The item whose image failed to be drawn.
			/// \param[in] imageDetails Details about the failed drawing operation.
			/// \param[in] failureReason The reason why the drawing operation failed. Any of the values defined
			///            by the \c ImageDrawingFailureReasonConstants enumeration are valid.
			/// \param[in,out] furtherProcessing Controls further drawing of the image. Any of the values defined
			///                by the \c FailedAsyncDrawReturnValuesConstants enumeration are valid.
			/// \param[in,out] newImageToDraw The zero-based index within the control's imagelist of the new
			///                image to draw. This value is ignored if the \c furtherProcessing parameter is not
			///                set to \c fadrvDrawNewImageAsynchronously.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.
			///
			/// \sa IExplorerTreeView::DrawImagesAsynchronously, FAILEDIMAGEDETAILS,
			///     ImageDrawingFailureReasonConstants, FailedAsyncDrawReturnValuesConstants
			[id(DISPID_EXTVWE_ITEMASYNCHRONOUSDRAWFAILED), helpstring("Will be fired if drawing an item's icon asynchronously failed. Requires comctl32.dll version 6.10 or higher.")]
			void ItemAsynchronousDrawFailed(ITreeViewItem* treeItem, FAILEDIMAGEDETAILS* imageDetails, ImageDrawingFailureReasonConstants failureReason, FailedAsyncDrawReturnValuesConstants* furtherProcessing, LONG* newImageToDraw);
			/// \brief <em>The user seems to want to drag an item</em>
			///
			/// Will be fired if the user seems to want to drag an item using the left mouse button.
			///
			/// \param[in] treeItem The item that the user wants to drag.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid, but usually it is just
			///            \c vbLeftButton.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \sa IExplorerTreeView::BeginDrag, IExplorerTreeView::OLEDrag,
			///     IExplorerTreeView::AllowDragDrop, ItemBeginRDrag, HitTestConstants
			[id(DISPID_EXTVWE_ITEMBEGINDRAG), helpstring("Will be fired if the user seems to want to drag an item using the left mouse button.")]
			void ItemBeginDrag(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user seems to want to drag an item</em>
			///
			/// Will be fired if the user seems to want to drag an item using the right mouse button.
			///
			/// \param[in] treeItem The item that the user wants to drag.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid, but usually it is just
			///            \c vbRightButton.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \sa IExplorerTreeView::BeginDrag, IExplorerTreeView::OLEDrag,
			///     IExplorerTreeView::AllowDragDrop, ItemBeginDrag, HitTestConstants
			[id(DISPID_EXTVWE_ITEMBEGINRDRAG), helpstring("Will be fired if the user seems to want to drag an item using the right mouse button.")]
			void ItemBeginRDrag(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>An item's icon, selected icon, text or the value of its \c HasExpando property is required</em>
			///
			/// Will be fired if an item's \c IconIndex, \c SelectedIconIndex or \c ExpandedIconIndex property
			/// was set to -1 or its \c HasExpando property was set to \c heCallback or its text was set to
			/// \c Empty and now the property's value is required.
			///
			/// \param[in] treeItem The item that the value is required for.
			/// \param[in] requestedInfo Specifies which properties' values are required. Any combination of
			///            the values defined by the \c RequestedInfoConstants enumeration is valid.
			/// \param[out] iconIndex Set this parameter to the zero-based index of the icon to use. The
			///             icon is taken from the control's \c ilItems imagelist. If the \c requestedInfo
			///             parameter doesn't include \c riIconIndex, this value is ignored.
			/// \param[out] selectedIconIndex Set this parameter to the zero-based index of the icon to use.
			///             The icon is taken from the control's \c ilItems imagelist. If the \c requestedInfo
			///             parameter doesn't include \c riSelectedIconIndex, this value is ignored.
			/// \param[out] expandedIconIndex Set this parameter to the zero-based index of the icon to use.
			///             The icon is taken from the control's \c ilItems imagelist. If the \c requestedInfo
			///             parameter doesn't include \c riExpandedIconIndex, this value is ignored.
			/// \param[out] hasExpando If set to \c True, an expando is drawn next to the item; otherwise not.
			///             If the \c requestedInfo parameter doesn't include \c riHasExpando, this value is
			///             ignored.
			/// \param[in] maxItemTextLength The maximum number of characters the item's text may consist of.
			///            If the \c requestedInfo parameter doesn't include \c riItemText, this value is
			///            ignored.
			/// \param[out] itemText Set this parameter to the text to use for the specified item. If the
			///             \c requestedInfo parameter doesn't include \c riItemText, this value is ignored.
			/// \param[in,out] dontAskAgain If set to \c True, this event won't be fired again for the
			///                specified item. Instead the specified values will be persisted.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ITreeViewItem::IconIndex, ITreeViewItem::SelectedIconIndex, ITreeViewItem::ExpandedIconIndex,
			///     IExplorerTreeView::hImageList, ITreeViewItem::HasExpando, ITreeViewItem::Text,
			///     RequestedInfoConstants, ImageListConstants
			[id(DISPID_EXTVWE_ITEMGETDISPLAYINFO), helpstring("Will be fired if an item's 'IconIndex', 'SelectedIconIndex', 'ExpandedIconIndex', 'HasExpando' or 'Text' property was set to a callback value and now the property's value is required. This event may be disabled.")]
			void ItemGetDisplayInfo(ITreeViewItem* treeItem, RequestedInfoConstants requestedInfo, LONG* IconIndex, LONG* SelectedIconIndex, LONG* ExpandedIconIndex, VARIANT_BOOL* HasExpando, LONG maxItemTextLength, BSTR* itemText, VARIANT_BOOL* dontAskAgain);
			/// \brief <em>The control is about to show the item's info tip and the text to display is required</em>
			///
			/// Will be fired if the control is about to popup a tooltip to display some information about the
			/// specified item and requests the text to display.
			///
			/// \param[in] treeItem The item that the tooltip will be displayed for.
			/// \param[in] maxInfoTipLength The maximum number of characters the info tip text may consist of.
			/// \param[out] infoTipText Set this parameter to the text to display in the tooltip control.
			/// \param[in,out] abortToolTip If set to \c True, the tooltip won't be displayed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa IExplorerTreeView::ShowToolTips, ITreeViewItem::DisplayInfoTip,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_ITEMGETINFOTIPTEXT), helpstring("Will be fired if the control is about to popup a tooltip to display some information about the specified item and requests the text to display. This event may be disabled.")]
			void ItemGetInfoTipText(ITreeViewItem* treeItem, LONG maxInfoTipLength, BSTR* infoTipText, VARIANT_BOOL* abortToolTip);
			/// \brief <em>The mouse cursor was moved into an item's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor into the specified item's bounding rectangle.
			///
			/// \param[in] treeItem The item that was entered.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ItemMouseLeave, MouseMove, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_ITEMMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the specified item's bounding rectangle. This event may be disabled.")]
			void ItemMouseEnter(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of an item's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor out of the specified item's bounding rectangle.
			///
			/// \param[in] treeItem The item that was left.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ItemMouseEnter, MouseMove, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_ITEMMOUSELEAVE), helpstring("Will be fired if the user moved the mouse cursor out of the specified item's bounding rectangle. This event may be disabled.")]
			void ItemMouseLeave(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>An item's selection state has changed</em>
			///
			/// Will be fired after an item's selection state has changed.
			///
			/// \param[in] treeItem The item that was selected/unselected.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.\n
			///          This event may be disabled.
			///
			/// \sa ItemSelectionChanging, ITreeViewItem::Selected, CaretChanged
			[id(DISPID_EXTVWE_ITEMSELECTIONCHANGED), helpstring("Will be fired after an item's selection state has changed. Requires comctl32.dll version 6.10 or higher. This event may be disabled.")]
			void ItemSelectionChanged(ITreeViewItem* treeItem);
			/// \brief <em>An item's selection state is about to be changed</em>
			///
			/// Will be fired before an item's selection state is changed.
			///
			/// \param[in] treeItem The item that will be selected/unselected.
			/// \param[in,out] cancelChange If set to \c True, the state image change is aborted, i. e.
			///                the item's selection state remains the same. In this case the
			///                \c ItemSelectionChanged event isn't fired. If set to \c False, the selection
			///                change is completed.
			///
			/// \remarks Requires comctl32.dll version 6.10 or higher.\n
			///          This event may be disabled.
			///
			/// \sa ItemSelectionChanged, ITreeViewItem::Selected, CaretChanging
			[id(DISPID_EXTVWE_ITEMSELECTIONCHANGING), helpstring("Will be fired before an item's selection state is changed. Requires comctl32.dll version 6.10 or higher. This event may be disabled.")]
			void ItemSelectionChanging(ITreeViewItem* treeItem, VARIANT_BOOL* cancelChange);
			/// \brief <em>An item's text was changed</em>
			///
			/// Will be fired if an item's text was set to \c vbNullString and now has been changed by
			/// label-editing.
			///
			/// \param[in] treeItem The item that was changed.
			/// \param[in] itemText The item's new text.
			///
			/// \sa ItemGetDisplayInfo, ITreeViewItem::Text
			[id(DISPID_EXTVWE_ITEMSETTEXT), helpstring("Will be fired if an item's text was set to 'Empty' and now has been changed by label-editing.")]
			void ItemSetText(ITreeViewItem* treeItem, BSTR itemText);
			/// \brief <em>An item's state image was changed</em>
			///
			/// Will be fired after an item's state image was changed. The state image is identified by an
			/// one-based index and is part of the control's \c ilState imagelist. It's drawn next to the item
			/// and usually a checkbox.
			///
			/// \param[in] treeItem The item whose state image was changed.
			/// \param[in] previousStateImageIndex The item's previous state image index.
			/// \param[in] newStateImageIndex The item's new state image index.
			/// \param[in] causedBy The reason for the state image change. Any of the values defined by
			///            the \c StateImageChangeCausedByConstants enumeration is valid.
			///
			/// \sa ItemStateImageChanging, ITreeViewItem::StateImageIndex, StateImageChangeCausedByConstants,
			///     ImageListConstants
			[id(DISPID_EXTVWE_ITEMSTATEIMAGECHANGED), helpstring("Will be fired after an item's state image was changed.")]
			void ItemStateImageChanged(ITreeViewItem* treeItem, LONG previousStateImageIndex, LONG newStateImageIndex, StateImageChangeCausedByConstants causedBy);
			/// \brief <em>An item's state image is about to be changed</em>
			///
			/// Will be fired before an item's state image is changed. The state image is identified by an
			/// one-based index and is part of the control's \c ilState imagelist. It's drawn next to the item
			/// and usually a checkbox.
			///
			/// \param[in] treeItem The item whose state image will be changed.
			/// \param[in] previousStateImageIndex The item's previous state image index.
			/// \param[in,out] newStateImageIndex The item's new state image index. You may change this
			///                value.
			/// \param[in] causedBy The reason for the state image change. Any of the values defined by
			///            the \c StateImageChangeCausedByConstants enumeration is valid.
			/// \param[in,out] cancelChange If set to \c True, the state image change is aborted, i. e.
			///                the item's state image remains the same. In this case the
			///                \c ItemStateImageChanged event isn't fired. If set to \c False, the state
			///                image change is completed.
			///
			/// \sa ItemStateImageChanged, ITreeViewItem::StateImageIndex, StateImageChangeCausedByConstants,
			///     ImageListConstants
			[id(DISPID_EXTVWE_ITEMSTATEIMAGECHANGING), helpstring("Will be fired before an item's state image is changed.")]
			void ItemStateImageChanging(ITreeViewItem* treeItem, LONG previousStateImageIndex, LONG* newStateImageIndex, StateImageChangeCausedByConstants causedBy, VARIANT_BOOL* cancelChange);
			/// \brief <em>A key was pressed while the control has the focus</em>
			///
			/// Will be fired if the user presses a key while the control has the focus.
			///
			/// \param[in,out] keyCode The pressed key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyUp, KeyPress, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_KEYDOWN), helpstring("Will be fired if the user presses a key while the control has the focus. This event may be disabled.")]
			void KeyDown(SHORT* keyCode, SHORT shift);
			/// \brief <em>An alphanumeric key was pressed and released while the control has the focus</em>
			///
			/// Will be fired if the user presses and releases an alphanumeric key while the control has the
			/// focus.
			///
			/// \param[in,out] keyAscii The pressed key's ASCII code.
			///
			/// \remarks You may set \c keyAscii to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa IncrementalSearchStringChanging, KeyDown, KeyUp, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_KEYPRESS), helpstring("Will be fired if the user presses and releases an alphanumeric key while the control has the focus. This event may be disabled.")]
			void KeyPress(SHORT* keyAscii);
			/// \brief <em>A key was released while the control has the focus</em>
			///
			/// Will be fired if the user releases a key while the control has the focus.
			///
			/// \param[in,out] keyCode The released key. Any of the values defined by VB's
			///                \c KeyCodeConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			///
			/// \remarks You may set \c keyCode to 0 to eat the message.\n
			///          This event may be disabled.
			///
			/// \sa KeyDown, KeyPress, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_KEYUP), helpstring("Will be fired if the user releases a key while the control has the focus. This event may be disabled.")]
			void KeyUp(SHORT* keyCode, SHORT shift);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the middle mouse button.
			///
			/// \param[in] treeItem The item that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MDblClick, Click, RClick, XClick, HitTestConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_MCLICK), helpstring("Will be fired if the user clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MClick(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the middle mouse
			/// button.
			///
			/// \param[in] treeItem The item that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any
			///            of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MClick, DblClick, RDblClick, XDblClick, HitTestConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_MDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MDblClick(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was pressed over the control's client area</em>
			///
			/// Will be fired if the user presses a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] treeItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseUp, Click, MClick, RClick, XClick, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_MOUSEDOWN), helpstring("Will be fired if the user presses a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseDown(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor into the control's client area.
			///
			/// \param[in] treeItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseLeave, ItemMouseEnter, MouseHover, MouseMove, ExtendedMouseButtonConstants,
			///     HitTestConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_MOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the control's client area. This event may be disabled.")]
			void MouseEnter(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the control's client area a specified period of time before</em>
			///
			/// Will be fired if the mouse cursor has been located over the control's client area for the
			/// number of milliseconds specified by the \c IExplorerTreeView::HoverTime property.
			///
			/// \param[in] treeItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseMove, IExplorerTreeView::HoverTime,
			///     ExtendedMouseButtonConstants, HitTestConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_MOUSEHOVER), helpstring("Will be fired if the mouse cursor has been located over the control's client area for the number of milliseconds specified by the 'HoverTime' property. This event may be disabled.")]
			void MouseHover(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor out of the control's client area.
			///
			/// \param[in] treeItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, ItemMouseLeave, MouseHover, MouseMove, ExtendedMouseButtonConstants,
			///     HitTestConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_MOUSELEAVE), helpstring("Will be fired if the user moves the mouse cursor out of the control's client area. This event may be disabled.")]
			void MouseLeave(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved over the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the control's client area.
			///
			/// \param[in] treeItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseDown, MouseUp, MouseWheel, ExtendedMouseButtonConstants,
			///     HitTestConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_MOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the control's client area. This event may be disabled.")]
			void MouseMove(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was released over the control's client area</em>
			///
			/// Will be fired if the user releases a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] treeItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The released mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseDown, Click, MClick, RClick, XClick, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_MOUSEUP), helpstring("Will be fired if the user releases a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseUp(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse wheel was rotated over the control's client area</em>
			///
			/// Will be fired if the user rotates the mouse wheel over the control's client area.
			///
			/// \param[in] treeItem The item that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in] scrollAxis Specifies whether the user intents to scroll vertically or horizontally.
			///            Any of the values defined by the \c ScrollAxisConstants enumeration is valid.
			/// \param[in] wheelDelta The distance the wheel has been rotated.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseMove, EditMouseWheel, ExtendedMouseButtonConstants, HitTestConstants,
			///     ScrollAxisConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_MOUSEWHEEL), helpstring("Will be fired if the user rotates the mouse wheel over the control's client area. This event may be disabled.")]
			void MouseWheel(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails, ScrollAxisConstants scrollAxis, SHORT wheelDelta);
			/// \brief <em>An OLE drag'n'drop operation was completed</em>
			///
			/// Will be fired after OLE drag'n'drop if the drag'n'drop operation was completed successfully.
			///
			/// \param[in] data The object that holds the dragged data. The drop target may have added data to
			///            it.
			/// \param[in] performedEffect The performed drop effect. Any of the values (except \c odeScroll)
			///            defined by the \c OLEDropEffectConstants enumeration is valid.
			///
			/// \sa IExplorerTreeView::OLEDrag, OLEStartDrag, IOLEDataObject::GetData
			[id(DISPID_EXTVWE_OLECOMPLETEDRAG), helpstring("Will be fired after OLE drag'n'drop if the drag'n'drop operation was completed successfully.")]
			void OLECompleteDrag(IOLEDataObject* data, OLEDropEffectConstants performedEffect);
			/// \brief <em>The data was dropped onto the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor
			/// is located over the control's client area.
			///
			/// \param[in] data The dropped data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target finally
			///                executed.
			/// \param[in,out] dropTarget The item that is the target of the drag'n'drop operation. You may set
			///                this parameter to another item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] yToItemTop The y-coordinate (in pixels) of the mouse cursor's position relative to the
			///            \c dropTarget item's upper border.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragLeave, MouseUp,
			///     IExplorerTreeView::RegisterForOLEDragDrop, IExplorerTreeView::FinishOLEDragDrop,
			///     OLEDropEffectConstants, ITreeViewItem::GetRectangle, IExplorerTreeView::DropHilitedItem,
			///     IExplorerTreeView::SetInsertMarkPosition, HitTestConstants
			[id(DISPID_EXTVWE_OLEDRAGDROP), helpstring("Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor is located over the control's client area.")]
			void OLEDragDrop(IOLEDataObject* data, OLEDropEffectConstants* effect, ITreeViewItem** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, LONG yToItemTop, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dragged into the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in,out] dropTarget The item that is the current target of the drag'n'drop operation.
			///                You may set this parameter to another item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] yToItemTop The y-coordinate (in pixels) of the mouse cursor's position relative to the
			///            \c dropTarget item's upper border.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] autoExpandItem If set to \c True, the item specified by \c dropTarget will be
			///                auto-expanded; otherwise not. See the following <strong>remarks</strong> section for
			///                details.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set
			///                to 0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			/// \param[in,out] autoVScrollVelocity The speed multiplier for vertical auto-scrolling. If set to 0,
			///                vertical auto-scrolling is disabled; if set to a value less than 0, the control
			///                auto-scrolls upwardly; if set to a value greater than 0, the control auto-scrolls
			///                downwards. The higher/lower the value is, the faster the control scrolls.
			///
			/// \remarks Auto-expansion is timered, i. e. the timer is started after this event, if the
			///          \c dropTarget parameter specifies another item than the last time this event was
			///          fired. Setting the \c autoExpandItem parameter to \c False cancels the timer. If
			///          it isn't canceled, the item is expanded when the timer expires.
			///
			/// \sa OLEDragMouseMove, OLEDragLeave, OLEDragDrop, MouseEnter,
			///     IExplorerTreeView::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     ITreeViewItem::GetRectangle, IExplorerTreeView::DragExpandTime,
			///     IExplorerTreeView::DragScrollTimeBase, IExplorerTreeView::DropHilitedItem,
			///     IExplorerTreeView::SetInsertMarkPosition, HitTestConstants
			[id(DISPID_EXTVWE_OLEDRAGENTER), helpstring("Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's client area.")]
			void OLEDragEnter(IOLEDataObject* data, OLEDropEffectConstants* effect, ITreeViewItem** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, LONG yToItemTop, HitTestConstants hitTestDetails, VARIANT_BOOL* autoExpandItem, LONG* autoHScrollVelocity, LONG* autoVScrollVelocity);
			/// \brief <em>The user has dragged the data into a potential drop target window during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user dragged the mouse cursor into a potential drop
			/// target window.
			///
			/// \param[in] hWndPotentialTarget The potential drop target window's handle.
			///
			/// \remarks Requires Windows Vista or newer.
			///
			/// \sa OLEDragLeavePotentialTarget, IExplorerTreeView::OLEDrag
			[id(DISPID_EXTVWE_OLEDRAGENTERPOTENTIALTARGET), helpstring("Will be fired during OLE drag'n'drop if the user dragged the mouse cursor into a potential drop target window. Requires Windows Vista or newer.")]
			void OLEDragEnterPotentialTarget(LONG hWndPotentialTarget);
			/// \brief <em>The data was dragged out of the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor out of the control's
			/// client area or if the user canceled the drag'n'drop operation.
			///
			/// \param[in] data The dragged data.
			/// \param[in] dropTarget The item that is the current target of the drag'n'drop operation.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] yToItemTop The y-coordinate (in pixels) of the mouse cursor's position relative to the
			///            \c dropTarget item's upper border.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragDrop, MouseLeave,
			///     IExplorerTreeView::RegisterForOLEDragDrop, ITreeViewItem::GetRectangle,
			///     IExplorerTreeView::DropHilitedItem, IExplorerTreeView::SetInsertMarkPosition,
			///     HitTestConstants
			[id(DISPID_EXTVWE_OLEDRAGLEAVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area or if the user canceled the drag'n'drop operation.")]
			void OLEDragLeave(IOLEDataObject* data, ITreeViewItem* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, LONG yToItemTop, HitTestConstants hitTestDetails);
			/// \brief <em>The user has dragged the data out of a potential drop target window during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user dragged the mouse cursor out of a potential drop
			/// target window.
			///
			/// \remarks Requires Windows Vista or newer.
			///
			/// \sa OLEDragEnterPotentialTarget, IExplorerTreeView::OLEDrag
			[id(DISPID_EXTVWE_OLEDRAGLEAVEPOTENTIALTARGET), helpstring("Will be fired during OLE drag'n'drop if the user dragged the mouse cursor out of a potential drop target window. Requires Windows Vista or newer.")]
			void OLEDragLeavePotentialTarget(void);
			/// \brief <em>The data was dragged over the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On
			///                return, this paramter must be set to the drop effect that the target wants
			///                to be used on drop.
			/// \param[in,out] dropTarget The item that is the current target of the drag'n'drop operation.
			///                You may set this parameter to another item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] yToItemTop The y-coordinate (in pixels) of the mouse cursor's position relative to the
			///            \c dropTarget item's upper border.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			/// \param[in,out] autoExpandItem If set to \c True, the item specified by \c dropTarget will be
			///                auto-expanded; otherwise not. See the following <strong>remarks</strong> section for
			///                details.
			/// \param[in,out] autoHScrollVelocity The speed multiplier for horizontal auto-scrolling. If set
			///                to 0, horizontal auto-scrolling is disabled; if set to a value less than 0, the
			///                control auto-scrolls to the left; if set to a value greater than 0, the control
			///                auto-scrolls to the right. The higher/lower the value is, the faster the control
			///                scrolls.
			/// \param[in,out] autoVScrollVelocity The speed multiplier for vertical auto-scrolling. If set to 0,
			///                vertical auto-scrolling is disabled; if set to a value less than 0, the control
			///                auto-scrolls upwardly; if set to a value greater than 0, the control auto-scrolls
			///                downwards. The higher/lower the value is, the faster the control scrolls.
			///
			/// \remarks Auto-expansion is timered, i. e. the timer is started after this event, if the
			///          \c dropTarget parameter specifies another item than the last time this event was
			///          fired. Setting the \c autoExpandItem parameter to \c False cancels the timer. If
			///          it isn't canceled, the item is expanded when the timer expires.
			///
			/// \sa OLEDragEnter, OLEDragLeave, OLEDragDrop, MouseMove,
			///     IExplorerTreeView::RegisterForOLEDragDrop, OLEDropEffectConstants,
			///     ITreeViewItem::GetRectangle, IExplorerTreeView::DragExpandTime,
			///     IExplorerTreeView::DragScrollTimeBase, IExplorerTreeView::DropHilitedItem,
			///     IExplorerTreeView::SetInsertMarkPosition, HitTestConstants
			[id(DISPID_EXTVWE_OLEDRAGMOUSEMOVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area.")]
			void OLEDragMouseMove(IOLEDataObject* data, OLEDropEffectConstants* effect, ITreeViewItem** dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, LONG yToItemTop, HitTestConstants hitTestDetails, VARIANT_BOOL* autoExpandItem, LONG* autoHScrollVelocity, LONG* autoVScrollVelocity);
			/// \brief <em>The mouse cursor needs to be updated during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the mouse cursor should be updated to visualize the
			/// current drop effect.
			///
			/// \param[in] effect The current drop effect. It is chosen by the potential drop target.
			///            Any of the values defined by the \c OLEDropEffectConstants enumeration is valid.
			/// \param[in,out] useDefaultCursors If set to \c True, the system's default mouse cursors are
			///                used to visualize the various drop effects. If set to \c False, custom
			///                mouse cursors are used. You must set the custom cursor within the handler of
			///                this event.
			///
			/// \sa IExplorerTreeView::OLEDrag, OLEQueryContinueDrag, OLEDropEffectConstants
			[id(DISPID_EXTVWE_OLEGIVEFEEDBACK), helpstring("Will be fired during OLE drag'n'drop if the mouse cursor should be updated.")]
			void OLEGiveFeedback(OLEDropEffectConstants effect, VARIANT_BOOL* useDefaultCursors);
			/// \brief <em>The drag source should decide how to proceed with the OLE drag'n'drop operation</em>
			///
			/// Will be fired during OLE drag'n'drop if the keyboard or mouse button state has changed. It
			/// gives the drag source the chance to cancel or complete the drag'n'drop operation.
			///
			/// \param[in] pressedEscape If \c True, the user has pressed the \c ESC key since the last time
			///            this event was fired.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in,out] actionToContinueWith Indicates whether to continue, cancel or complete the
			///                drag'n'drop operation. Any of the values defined by the
			///                \c OLEActionToContinueWithConstants enumeration is valid.
			///
			/// \sa IExplorerTreeView::OLEDrag, OLEGiveFeedback, OLEActionToContinueWithConstants
			[id(DISPID_EXTVWE_OLEQUERYCONTINUEDRAG), helpstring("Will be fired during OLE drag'n'drop if the keyboard or mouse button state has changed.")]
			void OLEQueryContinueDrag(VARIANT_BOOL pressedEscape, SHORT button, SHORT shift, OLEActionToContinueWithConstants* actionToContinueWith);
			/// \brief <em>Data has been stored in the data object</em>
			///
			/// Will be fired during OLE drag'n'drop if data in the specified format has been written into the
			/// dragged data object.
			///
			/// \param[in] data The object that holds the dragged data.
			/// \param[in] formatID An integer value specifying the format the data object has received data for.
			///            Valid values are those defined by VB's \c ClipBoardConstants enumeration, but also any
			///            other format that has been registered using the \c RegisterClipboardFormat API
			///            function.
			/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's
			///            \c lindex member. Usually it is -1, but some formats like \c CFSTR_FILECONTENTS
			///            require multiple \c FORMATETC structs for the same format. In such cases each struct
			///            of this format will have a separate index.
			/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
			///            struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
			///            Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
			///
			/// \remarks This event won't be fired if a custom \c IDataObject implementation was passed to
			///          the \c OLEDrag method.
			///
			/// \sa OLESetData, IOLEDataObject::GetData,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
			[id(DISPID_EXTVWE_OLERECEIVEDNEWDATA), helpstring("Will be fired during OLE drag'n'drop if data in the specified format has been written into the dragged data object.")]
			void OLEReceivedNewData(IOLEDataObject* data, LONG formatID, LONG Index, LONG dataOrViewAspect);
			/// \brief <em>Data is requested from the data object</em>
			///
			/// Will be fired during OLE drag'n'drop if data is requested from the dragged data object in a data
			/// format, that you've chosen to support (in the \c OLEStartDrag event), but for which you didn't
			/// provide any data so far.\n
			/// Call the provided object's \c SetData method to provide the data. If you chose to not support
			/// this data format, simply do nothing.
			///
			/// \param[in] data The object that holds the dragged data.
			/// \param[in] formatID An integer value specifying the format the drop target is requesting data
			///            for. Valid values are those defined by VB's \c ClipBoardConstants enumeration, but
			///            also any other format that has been registered using the \c RegisterClipboardFormat
			///            API function.
			/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's
			///            \c lindex member. Usually it is -1, but some formats like \c CFSTR_FILECONTENTS
			///            require multiple \c FORMATETC structs for the same format. In such cases each struct
			///            of this format will have a separate index.
			/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
			///            struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
			///            Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
			///
			/// \remarks This event won't be fired if a custom \c IDataObject implementation was passed to
			///          the \c OLEDrag method.
			///
			/// \sa OLEStartDrag, IOLEDataObject::SetData,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
			///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
			[id(DISPID_EXTVWE_OLESETDATA), helpstring("Will be fired during OLE drag'n'drop if data is requested from the dragged data object in a data format, that you've chosen to support (in the 'OLEStartDrag' event), but for which you didn't provide any data so far.")]
			void OLESetData(IOLEDataObject* data, LONG formatID, LONG Index, LONG dataOrViewAspect);
			/// \brief <em>The container holding the dragged data needs to be filled up</em>
			///
			/// Will be fired after you called the \c OLEDrag method to determine the data you're offering. You
			/// must call the provided object's \c SetData method for each data format you're offering data in.
			///
			/// \param[in] data The object that holds the dragged data.
			///
			/// \remarks This event won't be fired if a custom \c IDataObject implementation was passed to
			///          the \c OLEDrag method.
			///
			/// \sa IExplorerTreeView::OLEDrag, OLESetData, OLECompleteDrag, IOLEDataObject::SetData
			[id(DISPID_EXTVWE_OLESTARTDRAG), helpstring("Will be fired after you called the 'OLEDrag' method to determine the data you're offering.")]
			void OLEStartDrag(IOLEDataObject* data);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the right mouse button.
			///
			/// \param[in] treeItem The item that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ContextMenu, RDblClick, Click, MClick, XClick, HitTestConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_RCLICK), helpstring("Will be fired if the user clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RClick(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the right mouse
			/// button.
			///
			/// \param[in] treeItem The item that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any
			///            of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RClick, DblClick, MDblClick, XDblClick, HitTestConstants, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_RDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RDblClick(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control window was recreated</em>
			///
			/// Will be fired after the control window was destroyed and recreated.\n
			/// Some properties (e. g. \c ShowStateImages) can't be changed after the control window was created.
			/// If such a property is changed and the control window already exists, it is destroyed and
			/// recreated.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa DestroyedControlWindow, IExplorerTreeView::hWnd
			[id(DISPID_EXTVWE_RECREATEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed and recreated.")]
			void RecreatedControlWindow(LONG hWnd);
			/// \brief <em>An item was removed</em>
			///
			/// Will be fired after an item was removed.
			///
			/// \param[in] treeItem The item that was removed. If \c Nothing, all items were removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovingItem, InsertedItem, IVirtualTreeViewItem, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_REMOVEDITEM), helpstring("Will be fired after an item was removed. If 'treeItem' is 'Nothing', all items were removed. This event may be disabled.")]
			void RemovedItem(IVirtualTreeViewItem* treeItem);
			/// \brief <em>An item is about to be removed</em>
			///
			/// Will be fired before an item is removed.
			///
			/// \param[in] treeItem The item that is about to be removed. If \c Nothing, all items are removed.
			/// \param[in,out] cancelDeletion If set to \c True, deletion is aborted, i. e. the item isn't
			///                removed. If set to \c False, the item is removed.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RemovedItem, InsertingItem, ITreeViewItem, IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_REMOVINGITEM), helpstring("Will be fired before an item is removed. If 'treeItem' is 'Nothing', all items are removed. This event may be disabled.")]
			void RemovingItem(ITreeViewItem* treeItem, VARIANT_BOOL* cancelDeletion);
			/// \brief <em>An item was renamed via label-editing</em>
			///
			/// Will be fired after an item was renamed via label-editing.
			///
			/// \param[in] treeItem The item that was renamed.
			/// \param[in] previousItemText The item's previous text.
			/// \param[in] newItemText The item's new text.
			///
			/// \sa RenamingItem, StartingLabelEditing, DestroyedEditControlWindow, ITreeViewItem
			[id(DISPID_EXTVWE_RENAMEDITEM), helpstring("Will be fired after an item was renamed via label-editing.")]
			void RenamedItem(ITreeViewItem* treeItem, BSTR previousItemText, BSTR newItemText);
			/// \brief <em>An item is about to be renamed via label-editing</em>
			///
			/// Will be fired before an item is renamed via label-editing.
			///
			/// \param[in] treeItem The item that is about to be renamed.
			/// \param[in] previousItemText The item's current text.
			/// \param[in] newItemText The item's new text.
			/// \param[in,out] cancelRenaming If set to \c True, renaming is aborted, i. e. the item keeps
			///                its text. If set to \c False, the item is renamed.
			///
			/// \sa RenamedItem, StartingLabelEditing, DestroyedEditControlWindow, ITreeViewItem
			[id(DISPID_EXTVWE_RENAMINGITEM), helpstring("Will be fired before an item is renamed via label-editing.")]
			void RenamingItem(ITreeViewItem* treeItem, BSTR previousItemText, BSTR newItemText, VARIANT_BOOL* cancelRenaming);
			/// \brief <em>The control window was resized</em>
			///
			/// Will be fired after the control window was resized.
			[id(DISPID_EXTVWE_RESIZEDCONTROLWINDOW), helpstring("Will be fired after the control window was resized.")]
			void ResizedControlWindow(void);
			/// \brief <em>The caret item is about to change and \c SingleExpand is activated</em>
			///
			/// Will be fired (if SingleExpand is activated) before another item becomes the control's caret
			/// item. The caret item is the item that has the focus.
			///
			/// \param[in] previousCaretItem The previous caret item.
			/// \param[in] newCaretItem The new caret item.
			/// \param[in,out] dontChangePreviousItem If set to \c True, the previous caret item's expansion
			///                state won't be changed.
			/// \param[in,out] dontChangeNewItem If set to \c True, the new caret item's expansion state
			///                won't be changed.
			///
			/// \sa IExplorerTreeView::SingleExpand, ITreeViewItem::ExpansionState, CaretChanging
			[id(DISPID_EXTVWE_SINGLEEXPANDING), helpstring("Will be fired (if SingleExpand is activated) before another item becomes the control's caret item. The caret item is the item that has the focus.")]
			void SingleExpanding(ITreeViewItem* previousCaretItem, ITreeViewItem* newCaretItem, VARIANT_BOOL* dontChangePreviousItem, VARIANT_BOOL* dontChangeNewItem);
			/// \brief <em>An item is about to be renamed via label-editing</em>
			///
			/// Will be fired before item-renaming via label-editing starts.
			///
			/// \param[in] treeItem The item that is about to be edited.
			/// \param[in,out] cancelEditing If set to \c True, editing is aborted, i. e. the label-edit
			///                control isn't displayed. If set to \c False, the item label-editing continues.
			///
			/// \sa RenamingItem, CreatedEditControlWindow, ITreeViewItem, IExplorerTreeView::AllowLabelEditing
			[id(DISPID_EXTVWE_STARTINGLABELEDITING), helpstring("Will be fired before item-renaming via label-editing starts.")]
			void StartingLabelEditing(ITreeViewItem* treeItem, VARIANT_BOOL* cancelEditing);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using one of the extended mouse
			/// buttons.
			///
			/// \param[in] treeItem The item that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is
			///            valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XDblClick, Click, MClick, RClick, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_XCLICK), helpstring("Will be fired if the user clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XClick(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using one of the extended
			/// mouse buttons.
			///
			/// \param[in] treeItem The item that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XClick, DblClick, MDblClick, RDblClick, ExtendedMouseButtonConstants, HitTestConstants,
			///     IExplorerTreeView::DisabledEvents
			[id(DISPID_EXTVWE_XDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XDblClick(ITreeViewItem* treeItem, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
	};


	/// \brief <em>The \c ExplorerTreeView class</em>
	///
	/// The control's main COM class. It implements the \c IExplorerTreeView and
	/// \c _IExplorerTreeViewEvents interfaces.
	///
	/// \sa TreeViewItems, TreeViewItem, VirtualTreeViewItem, IExplorerTreeView, _IExplorerTreeViewEvents
	[
		uuid(3CDEC5BC-8CF1-46d0-A5E4-4079A5BD0C5C),
		version(2.6),
		helpstring("ExplorerTreeView Control 2.6 (Unicode)")
	]
	coclass ExplorerTreeView
	{
		[default] interface IExplorerTreeView;
		[default, source] dispinterface _IExplorerTreeViewEvents;
	};


	/// \interface _IVirtualTreeViewItemEvents
	/// \brief <em>The \c VirtualTreeViewItem class' events interface</em>
	///
	/// This interface defines all events the \c VirtualTreeViewItem class may raise.
	///
	/// \sa IVirtualTreeViewItem
	[
		uuid(9EF0D0D6-0058-476e-A16E-50D07B93187C),
		helpstring("IVirtualTreeViewItem-event-interface")
	]
	dispinterface _IVirtualTreeViewItemEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c VirtualTreeViewItem class</em>
	///
	/// This COM class implements the \c IVirtualTreeViewItem and \c _IVirtualTreeViewItemEvents
	/// interfaces.
	///
	/// \sa IVirtualTreeViewItem, _IVirtualTreeViewItemEvents, ExplorerTreeView, TreeViewItem
	[
		uuid(BAB21230-795F-437a-878B-EE0B1535EF83),
		version(2.6),
		noncreatable,
		helpstring("VirtualTreeViewItem Class 2.6 (Unicode)")
	]
	coclass VirtualTreeViewItem
	{
		[default] interface IVirtualTreeViewItem;
		[default, source] dispinterface _IVirtualTreeViewItemEvents;
	};


	/// \interface _ITreeViewItemEvents
	/// \brief <em>The \c TreeViewItem class' events interface</em>
	///
	/// This interface defines all events the \c TreeViewItem class may raise.
	///
	/// \sa ITreeViewItem
	[
		uuid(CF78B920-1264-4539-8ED7-BCB8913FF9A1),
		helpstring("ITreeViewItem-event-interface")
	]
	dispinterface _ITreeViewItemEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c TreeViewItem class</em>
	///
	/// This COM class implements the \c ITreeViewItem and \c _ITreeViewItemEvents interfaces.
	///
	/// \sa ITreeViewItem, _ITreeViewItemEvents, ExplorerTreeView, TreeViewItems
	[
		uuid(2A2D2CA9-CB7A-4ae4-AC1D-938864143BB5),
		version(2.6),
		noncreatable,
		helpstring("TreeViewItem Class 2.6 (Unicode)")
	]
	coclass TreeViewItem
	{
		[default] interface ITreeViewItem;
		[default, source] dispinterface _ITreeViewItemEvents;
	};


	/// \interface _ITreeViewItemsEvents
	/// \brief <em>The \c TreeViewItems class' events interface</em>
	///
	/// This interface defines all events the \c TreeViewItems class may raise.
	///
	/// \sa ITreeViewItems
	[
		uuid(7B9A2166-7812-4ff4-B2BC-660002004EAC),
		helpstring("ITreeViewItems-event-interface")
	]
	dispinterface _ITreeViewItemsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c TreeViewItems class</em>
	///
	/// This COM class implements the \c ITreeViewItems and \c _ITreeViewItemsEvents interfaces.
	///
	/// \sa ITreeViewItems, _ITreeViewItemsEvents, ExplorerTreeView, TreeViewItem
	[
		uuid(F8C007A6-721B-4da2-A757-C5EBDD583D7B),
		version(2.6),
		noncreatable,
		helpstring("TreeViewItems Class 2.6 (Unicode)")
	]
	coclass TreeViewItems
	{
		[default] interface ITreeViewItems;
		[default, source] dispinterface _ITreeViewItemsEvents;
	};


	/// \interface _ITreeViewItemContainerEvents
	/// \brief <em>The \c TreeViewItemContainer class' events interface</em>
	///
	/// This interface defines all events the \c TreeViewItemContainer class may raise.
	///
	/// \sa ITreeViewItemContainer
	[
		uuid(830249C9-5064-4cb8-81B6-6A31346CF6F6),
		helpstring("ITreeViewItemContainer-event-interface")
	]
	dispinterface _ITreeViewItemContainerEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c TreeViewItemContainer class</em>
	///
	/// This COM class implements the \c ITreeViewItemContainer and \c _ITreeViewItemContainerEvents
	/// interfaces.
	///
	/// \sa ITreeViewItemContainer, _ITreeViewItemContainerEvents, ExplorerTreeView, TreeViewItem
	[
		uuid(29928993-3C79-4626-B9FC-D55188CB1611),
		version(2.6),
		noncreatable,
		helpstring("TreeViewItemContainer Class 2.6 (Unicode)")
	]
	coclass TreeViewItemContainer
	{
		[default] interface ITreeViewItemContainer;
		[default, source] dispinterface _ITreeViewItemContainerEvents;
	};


	/// \interface _IOLEDataObjectEvents
	/// \brief <em>The \c OLEDataObject class' events interface</em>
	///
	/// This interface defines all events the \c OLEDataObject class may raise.
	///
	/// \sa IOLEDataObject
	[
		uuid(39742055-5162-4F29-83F1-0BDDAF497DB2),
		helpstring("IOLEDataObject-event-interface")
	]
	dispinterface _IOLEDataObjectEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c OLEDataObject class</em>
	///
	/// This COM class implements the \c IOLEDataObject and \c _IOLEDataObjectEvents interfaces.
	///
	/// \sa IOLEDataObject, _IOLEDataObjectEvents
	[
		uuid(6798B27D-4D78-414E-A6C0-3D4C6E10F858),
		version(2.6),
		noncreatable,
		helpstring("OLEDataObject Class 2.6 (Unicode)")
	]
	coclass OLEDataObject
	{
		[default] interface IOLEDataObject;
		[default, source] dispinterface _IOLEDataObjectEvents;
	};


	[
		uuid(CCF1C300-FEBD-49A8-8A6B-A4075C741DCA),
		version(2.6),
		noncreatable,
		helpstring("CommonProperties Class 2.6 (Unicode)"),
		hidden
	]
	coclass CommonProperties
	{
		[default] interface IUnknown;
	};
};
